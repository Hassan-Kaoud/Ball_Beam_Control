
Ball_Beam_Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004fec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011a  00800060  00004fec  00005080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000037  0080017a  0080017a  0000519a  2**0
                  ALLOC
  3 .stab         0000606c  00000000  00000000  0000519c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000029cc  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  0000dbd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  0000ddb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002891  00000000  00000000  0000dfe6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  00010877  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013de  00000000  00000000  00011e9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  00013280  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030f  00000000  00000000  00013480  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a56  00000000  00000000  0001378f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000141e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 df 14 	jmp	0x29be	; 0x29be <__vector_1>
       8:	0c 94 12 15 	jmp	0x2a24	; 0x2a24 <__vector_2>
       c:	0c 94 45 15 	jmp	0x2a8a	; 0x2a8a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 ec 0e 	jmp	0x1dd8	; 0x1dd8 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 b9 0e 	jmp	0x1d72	; 0x1d72 <__vector_8>
      24:	0c 94 53 0e 	jmp	0x1ca6	; 0x1ca6 <__vector_9>
      28:	0c 94 e2 12 	jmp	0x25c4	; 0x25c4 <__vector_10>
      2c:	0c 94 a6 12 	jmp	0x254c	; 0x254c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ee       	ldi	r30, 0xEC	; 236
      68:	ff e4       	ldi	r31, 0x4F	; 79
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3b       	cpi	r26, 0xB1	; 177
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 37 27 	call	0x4e6e	; 0x4e6e <main>
      8a:	0c 94 f4 27 	jmp	0x4fe8	; 0x4fe8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 78 27 	jmp	0x4ef0	; 0x4ef0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 94 27 	jmp	0x4f28	; 0x4f28 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 84 27 	jmp	0x4f08	; 0x4f08 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a0 27 	jmp	0x4f40	; 0x4f40 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 84 27 	jmp	0x4f08	; 0x4f08 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a0 27 	jmp	0x4f40	; 0x4f40 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 78 27 	jmp	0x4ef0	; 0x4ef0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 94 27 	jmp	0x4f28	; 0x4f28 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 80 27 	jmp	0x4f00	; 0x4f00 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 9c 27 	jmp	0x4f38	; 0x4f38 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 84 27 	jmp	0x4f08	; 0x4f08 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 a0 27 	jmp	0x4f40	; 0x4f40 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 84 27 	jmp	0x4f08	; 0x4f08 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 a0 27 	jmp	0x4f40	; 0x4f40 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 84 27 	jmp	0x4f08	; 0x4f08 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 a0 27 	jmp	0x4f40	; 0x4f40 <__epilogue_restores__+0x18>

000008aa <__lesf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 84 27 	jmp	0x4f08	; 0x4f08 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__lesf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__lesf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__lesf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 a0 27 	jmp	0x4f40	; 0x4f40 <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 81 27 	jmp	0x4f02	; 0x4f02 <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 9d 27 	jmp	0x4f3a	; 0x4f3a <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 88 27 	jmp	0x4f10	; 0x4f10 <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 a4 27 	jmp	0x4f48	; 0x4f48 <__epilogue_restores__+0x20>

00000a6e <__floatunsisf>:
     a6e:	a8 e0       	ldi	r26, 0x08	; 8
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ed e3       	ldi	r30, 0x3D	; 61
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	0c 94 80 27 	jmp	0x4f00	; 0x4f00 <__prologue_saves__+0x10>
     a7a:	7b 01       	movw	r14, r22
     a7c:	8c 01       	movw	r16, r24
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	81 05       	cpc	r24, r1
     a84:	91 05       	cpc	r25, r1
     a86:	19 f4       	brne	.+6      	; 0xa8e <__floatunsisf+0x20>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	60 c0       	rjmp	.+192    	; 0xb4e <__floatunsisf+0xe0>
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	8e e1       	ldi	r24, 0x1E	; 30
     a94:	c8 2e       	mov	r12, r24
     a96:	d1 2c       	mov	r13, r1
     a98:	dc 82       	std	Y+4, r13	; 0x04
     a9a:	cb 82       	std	Y+3, r12	; 0x03
     a9c:	ed 82       	std	Y+5, r14	; 0x05
     a9e:	fe 82       	std	Y+6, r15	; 0x06
     aa0:	0f 83       	std	Y+7, r16	; 0x07
     aa2:	18 87       	std	Y+8, r17	; 0x08
     aa4:	c8 01       	movw	r24, r16
     aa6:	b7 01       	movw	r22, r14
     aa8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     aac:	fc 01       	movw	r30, r24
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f7 ff       	sbrs	r31, 7
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <__floatunsisf+0xbc>
     ab4:	22 27       	eor	r18, r18
     ab6:	33 27       	eor	r19, r19
     ab8:	2e 1b       	sub	r18, r30
     aba:	3f 0b       	sbc	r19, r31
     abc:	57 01       	movw	r10, r14
     abe:	68 01       	movw	r12, r16
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__floatunsisf+0x5e>
     ac4:	d6 94       	lsr	r13
     ac6:	c7 94       	ror	r12
     ac8:	b7 94       	ror	r11
     aca:	a7 94       	ror	r10
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__floatunsisf+0x56>
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__floatunsisf+0x7c>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	aa 1f       	adc	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	2a 95       	dec	r18
     aec:	d2 f7       	brpl	.-12     	; 0xae2 <__floatunsisf+0x74>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	a1 09       	sbc	r26, r1
     af2:	b1 09       	sbc	r27, r1
     af4:	8e 21       	and	r24, r14
     af6:	9f 21       	and	r25, r15
     af8:	a0 23       	and	r26, r16
     afa:	b1 23       	and	r27, r17
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	a1 05       	cpc	r26, r1
     b00:	b1 05       	cpc	r27, r1
     b02:	21 f0       	breq	.+8      	; 0xb0c <__floatunsisf+0x9e>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	4a 29       	or	r20, r10
     b0e:	5b 29       	or	r21, r11
     b10:	6c 29       	or	r22, r12
     b12:	7d 29       	or	r23, r13
     b14:	4d 83       	std	Y+5, r20	; 0x05
     b16:	5e 83       	std	Y+6, r21	; 0x06
     b18:	6f 83       	std	Y+7, r22	; 0x07
     b1a:	78 87       	std	Y+8, r23	; 0x08
     b1c:	8e e1       	ldi	r24, 0x1E	; 30
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	8e 1b       	sub	r24, r30
     b22:	9f 0b       	sbc	r25, r31
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <__floatunsisf+0xe0>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	81 f0       	breq	.+32     	; 0xb4e <__floatunsisf+0xe0>
     b2e:	0e 2e       	mov	r0, r30
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0xcc>
     b32:	ee 0c       	add	r14, r14
     b34:	ff 1c       	adc	r15, r15
     b36:	00 1f       	adc	r16, r16
     b38:	11 1f       	adc	r17, r17
     b3a:	0a 94       	dec	r0
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0xc4>
     b3e:	ed 82       	std	Y+5, r14	; 0x05
     b40:	fe 82       	std	Y+6, r15	; 0x06
     b42:	0f 83       	std	Y+7, r16	; 0x07
     b44:	18 87       	std	Y+8, r17	; 0x08
     b46:	ce 1a       	sub	r12, r30
     b48:	df 0a       	sbc	r13, r31
     b4a:	dc 82       	std	Y+4, r13	; 0x04
     b4c:	cb 82       	std	Y+3, r12	; 0x03
     b4e:	1a 82       	std	Y+2, r1	; 0x02
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     b58:	28 96       	adiw	r28, 0x08	; 8
     b5a:	ea e0       	ldi	r30, 0x0A	; 10
     b5c:	0c 94 9c 27 	jmp	0x4f38	; 0x4f38 <__epilogue_restores__+0x10>

00000b60 <__clzsi2>:
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	e8 16       	cp	r14, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	f8 06       	cpc	r15, r24
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	08 07       	cpc	r16, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	18 07       	cpc	r17, r24
     b7c:	88 f4       	brcc	.+34     	; 0xba0 <__clzsi2+0x40>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 16       	cp	r14, r24
     b82:	f1 04       	cpc	r15, r1
     b84:	01 05       	cpc	r16, r1
     b86:	11 05       	cpc	r17, r1
     b88:	31 f0       	breq	.+12     	; 0xb96 <__clzsi2+0x36>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <__clzsi2+0x36>
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	17 c0       	rjmp	.+46     	; 0xbc4 <__clzsi2+0x64>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__clzsi2+0x64>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	e8 16       	cp	r14, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	f8 06       	cpc	r15, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 07       	cpc	r16, r24
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	18 07       	cpc	r17, r24
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <__clzsi2+0x5c>
     bb2:	88 e1       	ldi	r24, 0x18	; 24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__clzsi2+0x64>
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	20 e2       	ldi	r18, 0x20	; 32
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	28 1b       	sub	r18, r24
     bce:	39 0b       	sbc	r19, r25
     bd0:	4a 0b       	sbc	r20, r26
     bd2:	5b 0b       	sbc	r21, r27
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__clzsi2+0x7e>
     bd6:	16 95       	lsr	r17
     bd8:	07 95       	ror	r16
     bda:	f7 94       	ror	r15
     bdc:	e7 94       	ror	r14
     bde:	8a 95       	dec	r24
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__clzsi2+0x76>
     be2:	f7 01       	movw	r30, r14
     be4:	e8 59       	subi	r30, 0x98	; 152
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	80 81       	ld	r24, Z
     bea:	28 1b       	sub	r18, r24
     bec:	31 09       	sbc	r19, r1
     bee:	41 09       	sbc	r20, r1
     bf0:	51 09       	sbc	r21, r1
     bf2:	c9 01       	movw	r24, r18
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <__pack_f>:
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	fc 01       	movw	r30, r24
     c0a:	e4 80       	ldd	r14, Z+4	; 0x04
     c0c:	f5 80       	ldd	r15, Z+5	; 0x05
     c0e:	06 81       	ldd	r16, Z+6	; 0x06
     c10:	17 81       	ldd	r17, Z+7	; 0x07
     c12:	d1 80       	ldd	r13, Z+1	; 0x01
     c14:	80 81       	ld	r24, Z
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	48 f4       	brcc	.+18     	; 0xc2c <__pack_f+0x2e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e1       	ldi	r26, 0x10	; 16
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e8 2a       	or	r14, r24
     c24:	f9 2a       	or	r15, r25
     c26:	0a 2b       	or	r16, r26
     c28:	1b 2b       	or	r17, r27
     c2a:	a5 c0       	rjmp	.+330    	; 0xd76 <__pack_f+0x178>
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__pack_f+0x34>
     c30:	9f c0       	rjmp	.+318    	; 0xd70 <__pack_f+0x172>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	21 f4       	brne	.+8      	; 0xc3e <__pack_f+0x40>
     c36:	ee 24       	eor	r14, r14
     c38:	ff 24       	eor	r15, r15
     c3a:	87 01       	movw	r16, r14
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <__pack_f+0x4a>
     c3e:	e1 14       	cp	r14, r1
     c40:	f1 04       	cpc	r15, r1
     c42:	01 05       	cpc	r16, r1
     c44:	11 05       	cpc	r17, r1
     c46:	19 f4       	brne	.+6      	; 0xc4e <__pack_f+0x50>
     c48:	e0 e0       	ldi	r30, 0x00	; 0
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	96 c0       	rjmp	.+300    	; 0xd7a <__pack_f+0x17c>
     c4e:	62 81       	ldd	r22, Z+2	; 0x02
     c50:	73 81       	ldd	r23, Z+3	; 0x03
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	62 38       	cpi	r22, 0x82	; 130
     c56:	79 07       	cpc	r23, r25
     c58:	0c f0       	brlt	.+2      	; 0xc5c <__pack_f+0x5e>
     c5a:	5b c0       	rjmp	.+182    	; 0xd12 <__pack_f+0x114>
     c5c:	22 e8       	ldi	r18, 0x82	; 130
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	26 1b       	sub	r18, r22
     c62:	37 0b       	sbc	r19, r23
     c64:	2a 31       	cpi	r18, 0x1A	; 26
     c66:	31 05       	cpc	r19, r1
     c68:	2c f0       	brlt	.+10     	; 0xc74 <__pack_f+0x76>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	2a c0       	rjmp	.+84     	; 0xcc8 <__pack_f+0xca>
     c74:	b8 01       	movw	r22, r16
     c76:	a7 01       	movw	r20, r14
     c78:	02 2e       	mov	r0, r18
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0x86>
     c7c:	76 95       	lsr	r23
     c7e:	67 95       	ror	r22
     c80:	57 95       	ror	r21
     c82:	47 95       	ror	r20
     c84:	0a 94       	dec	r0
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__pack_f+0x7e>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e0       	ldi	r26, 0x00	; 0
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__pack_f+0x9c>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	2a 95       	dec	r18
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__pack_f+0x94>
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	a1 09       	sbc	r26, r1
     ca2:	b1 09       	sbc	r27, r1
     ca4:	8e 21       	and	r24, r14
     ca6:	9f 21       	and	r25, r15
     ca8:	a0 23       	and	r26, r16
     caa:	b1 23       	and	r27, r17
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	a1 05       	cpc	r26, r1
     cb0:	b1 05       	cpc	r27, r1
     cb2:	21 f0       	breq	.+8      	; 0xcbc <__pack_f+0xbe>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	9a 01       	movw	r18, r20
     cbe:	ab 01       	movw	r20, r22
     cc0:	28 2b       	or	r18, r24
     cc2:	39 2b       	or	r19, r25
     cc4:	4a 2b       	or	r20, r26
     cc6:	5b 2b       	or	r21, r27
     cc8:	da 01       	movw	r26, r20
     cca:	c9 01       	movw	r24, r18
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	90 70       	andi	r25, 0x00	; 0
     cd0:	a0 70       	andi	r26, 0x00	; 0
     cd2:	b0 70       	andi	r27, 0x00	; 0
     cd4:	80 34       	cpi	r24, 0x40	; 64
     cd6:	91 05       	cpc	r25, r1
     cd8:	a1 05       	cpc	r26, r1
     cda:	b1 05       	cpc	r27, r1
     cdc:	39 f4       	brne	.+14     	; 0xcec <__pack_f+0xee>
     cde:	27 ff       	sbrs	r18, 7
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <__pack_f+0xf6>
     ce2:	20 5c       	subi	r18, 0xC0	; 192
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	4f 4f       	sbci	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <__pack_f+0xf6>
     cec:	21 5c       	subi	r18, 0xC1	; 193
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	4f 4f       	sbci	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	e0 e0       	ldi	r30, 0x00	; 0
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 30       	cpi	r18, 0x00	; 0
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	3a 07       	cpc	r19, r26
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	4a 07       	cpc	r20, r26
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	5a 07       	cpc	r21, r26
     d06:	10 f0       	brcs	.+4      	; 0xd0c <__pack_f+0x10e>
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	79 01       	movw	r14, r18
     d0e:	8a 01       	movw	r16, r20
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <__pack_f+0x162>
     d12:	60 38       	cpi	r22, 0x80	; 128
     d14:	71 05       	cpc	r23, r1
     d16:	64 f5       	brge	.+88     	; 0xd70 <__pack_f+0x172>
     d18:	fb 01       	movw	r30, r22
     d1a:	e1 58       	subi	r30, 0x81	; 129
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	d8 01       	movw	r26, r16
     d20:	c7 01       	movw	r24, r14
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	a0 70       	andi	r26, 0x00	; 0
     d28:	b0 70       	andi	r27, 0x00	; 0
     d2a:	80 34       	cpi	r24, 0x40	; 64
     d2c:	91 05       	cpc	r25, r1
     d2e:	a1 05       	cpc	r26, r1
     d30:	b1 05       	cpc	r27, r1
     d32:	39 f4       	brne	.+14     	; 0xd42 <__pack_f+0x144>
     d34:	e7 fe       	sbrs	r14, 7
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <__pack_f+0x154>
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <__pack_f+0x14c>
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 0e       	add	r14, r24
     d4c:	f9 1e       	adc	r15, r25
     d4e:	0a 1f       	adc	r16, r26
     d50:	1b 1f       	adc	r17, r27
     d52:	17 ff       	sbrs	r17, 7
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__pack_f+0x162>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	16 95       	lsr	r17
     d64:	07 95       	ror	r16
     d66:	f7 94       	ror	r15
     d68:	e7 94       	ror	r14
     d6a:	8a 95       	dec	r24
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <__pack_f+0x164>
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__pack_f+0x17c>
     d70:	ee 24       	eor	r14, r14
     d72:	ff 24       	eor	r15, r15
     d74:	87 01       	movw	r16, r14
     d76:	ef ef       	ldi	r30, 0xFF	; 255
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	6e 2f       	mov	r22, r30
     d7c:	67 95       	ror	r22
     d7e:	66 27       	eor	r22, r22
     d80:	67 95       	ror	r22
     d82:	90 2f       	mov	r25, r16
     d84:	9f 77       	andi	r25, 0x7F	; 127
     d86:	d7 94       	ror	r13
     d88:	dd 24       	eor	r13, r13
     d8a:	d7 94       	ror	r13
     d8c:	8e 2f       	mov	r24, r30
     d8e:	86 95       	lsr	r24
     d90:	49 2f       	mov	r20, r25
     d92:	46 2b       	or	r20, r22
     d94:	58 2f       	mov	r21, r24
     d96:	5d 29       	or	r21, r13
     d98:	b7 01       	movw	r22, r14
     d9a:	ca 01       	movw	r24, r20
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	08 95       	ret

00000da8 <__unpack_f>:
     da8:	fc 01       	movw	r30, r24
     daa:	db 01       	movw	r26, r22
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	22 81       	ldd	r18, Z+2	; 0x02
     db2:	62 2f       	mov	r22, r18
     db4:	6f 77       	andi	r22, 0x7F	; 127
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	22 1f       	adc	r18, r18
     dba:	22 27       	eor	r18, r18
     dbc:	22 1f       	adc	r18, r18
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	89 2f       	mov	r24, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	82 2b       	or	r24, r18
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	99 1f       	adc	r25, r25
     dcc:	99 27       	eor	r25, r25
     dce:	99 1f       	adc	r25, r25
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	a9 f5       	brne	.+106    	; 0xe46 <__unpack_f+0x9e>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	11 f4       	brne	.+4      	; 0xdea <__unpack_f+0x42>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	37 c0       	rjmp	.+110    	; 0xe58 <__unpack_f+0xb0>
     dea:	82 e8       	ldi	r24, 0x82	; 130
     dec:	9f ef       	ldi	r25, 0xFF	; 255
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	9a 01       	movw	r18, r20
     df8:	ab 01       	movw	r20, r22
     dfa:	67 e0       	ldi	r22, 0x07	; 7
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	44 1f       	adc	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	6a 95       	dec	r22
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__unpack_f+0x54>
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	8c 93       	st	X, r24
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <__unpack_f+0x80>
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	20 30       	cpi	r18, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	38 07       	cpc	r19, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	48 07       	cpc	r20, r24
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	58 07       	cpc	r21, r24
     e36:	58 f3       	brcs	.-42     	; 0xe0e <__unpack_f+0x66>
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	2d 93       	st	X+, r18
     e3c:	3d 93       	st	X+, r19
     e3e:	4d 93       	st	X+, r20
     e40:	5c 93       	st	X, r21
     e42:	17 97       	sbiw	r26, 0x07	; 7
     e44:	08 95       	ret
     e46:	2f 3f       	cpi	r18, 0xFF	; 255
     e48:	31 05       	cpc	r19, r1
     e4a:	79 f4       	brne	.+30     	; 0xe6a <__unpack_f+0xc2>
     e4c:	41 15       	cp	r20, r1
     e4e:	51 05       	cpc	r21, r1
     e50:	61 05       	cpc	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	19 f4       	brne	.+6      	; 0xe5c <__unpack_f+0xb4>
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	8c 93       	st	X, r24
     e5a:	08 95       	ret
     e5c:	64 ff       	sbrs	r22, 4
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <__unpack_f+0xbe>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8c 93       	st	X, r24
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <__unpack_f+0xe2>
     e66:	1c 92       	st	X, r1
     e68:	10 c0       	rjmp	.+32     	; 0xe8a <__unpack_f+0xe2>
     e6a:	2f 57       	subi	r18, 0x7F	; 127
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	3c 93       	st	X, r19
     e72:	2e 93       	st	-X, r18
     e74:	12 97       	sbiw	r26, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	8c 93       	st	X, r24
     e7a:	87 e0       	ldi	r24, 0x07	; 7
     e7c:	44 0f       	add	r20, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	66 1f       	adc	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	8a 95       	dec	r24
     e86:	d1 f7       	brne	.-12     	; 0xe7c <__unpack_f+0xd4>
     e88:	70 64       	ori	r23, 0x40	; 64
     e8a:	14 96       	adiw	r26, 0x04	; 4
     e8c:	4d 93       	st	X+, r20
     e8e:	5d 93       	st	X+, r21
     e90:	6d 93       	st	X+, r22
     e92:	7c 93       	st	X, r23
     e94:	17 97       	sbiw	r26, 0x07	; 7
     e96:	08 95       	ret

00000e98 <__fpcmp_parts_f>:
     e98:	1f 93       	push	r17
     e9a:	dc 01       	movw	r26, r24
     e9c:	fb 01       	movw	r30, r22
     e9e:	9c 91       	ld	r25, X
     ea0:	92 30       	cpi	r25, 0x02	; 2
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__fpcmp_parts_f+0xe>
     ea4:	47 c0       	rjmp	.+142    	; 0xf34 <__fpcmp_parts_f+0x9c>
     ea6:	80 81       	ld	r24, Z
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0x16>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <__fpcmp_parts_f+0x9c>
     eae:	94 30       	cpi	r25, 0x04	; 4
     eb0:	51 f4       	brne	.+20     	; 0xec6 <__fpcmp_parts_f+0x2e>
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	1c 91       	ld	r17, X
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	99 f5       	brne	.+102    	; 0xf20 <__fpcmp_parts_f+0x88>
     eba:	81 81       	ldd	r24, Z+1	; 0x01
     ebc:	68 2f       	mov	r22, r24
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	61 1b       	sub	r22, r17
     ec2:	71 09       	sbc	r23, r1
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <__fpcmp_parts_f+0xac>
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	21 f0       	breq	.+8      	; 0xed2 <__fpcmp_parts_f+0x3a>
     eca:	92 30       	cpi	r25, 0x02	; 2
     ecc:	31 f4       	brne	.+12     	; 0xeda <__fpcmp_parts_f+0x42>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	b9 f1       	breq	.+110    	; 0xf40 <__fpcmp_parts_f+0xa8>
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
     ed4:	88 23       	and	r24, r24
     ed6:	89 f1       	breq	.+98     	; 0xf3a <__fpcmp_parts_f+0xa2>
     ed8:	2d c0       	rjmp	.+90     	; 0xf34 <__fpcmp_parts_f+0x9c>
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	1c 91       	ld	r17, X
     ede:	11 97       	sbiw	r26, 0x01	; 1
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	f1 f0       	breq	.+60     	; 0xf20 <__fpcmp_parts_f+0x88>
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	18 17       	cp	r17, r24
     ee8:	d9 f4       	brne	.+54     	; 0xf20 <__fpcmp_parts_f+0x88>
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	2d 91       	ld	r18, X+
     eee:	3c 91       	ld	r19, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	94 f0       	brlt	.+36     	; 0xf20 <__fpcmp_parts_f+0x88>
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	bc f0       	brlt	.+46     	; 0xf30 <__fpcmp_parts_f+0x98>
     f02:	14 96       	adiw	r26, 0x04	; 4
     f04:	8d 91       	ld	r24, X+
     f06:	9d 91       	ld	r25, X+
     f08:	0d 90       	ld	r0, X+
     f0a:	bc 91       	ld	r27, X
     f0c:	a0 2d       	mov	r26, r0
     f0e:	24 81       	ldd	r18, Z+4	; 0x04
     f10:	35 81       	ldd	r19, Z+5	; 0x05
     f12:	46 81       	ldd	r20, Z+6	; 0x06
     f14:	57 81       	ldd	r21, Z+7	; 0x07
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	4a 07       	cpc	r20, r26
     f1c:	5b 07       	cpc	r21, r27
     f1e:	18 f4       	brcc	.+6      	; 0xf26 <__fpcmp_parts_f+0x8e>
     f20:	11 23       	and	r17, r17
     f22:	41 f0       	breq	.+16     	; 0xf34 <__fpcmp_parts_f+0x9c>
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <__fpcmp_parts_f+0xa2>
     f26:	82 17       	cp	r24, r18
     f28:	93 07       	cpc	r25, r19
     f2a:	a4 07       	cpc	r26, r20
     f2c:	b5 07       	cpc	r27, r21
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fpcmp_parts_f+0xa8>
     f30:	11 23       	and	r17, r17
     f32:	19 f0       	breq	.+6      	; 0xf3a <__fpcmp_parts_f+0xa2>
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <__fpcmp_parts_f+0xac>
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__fpcmp_parts_f+0xac>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	cb 01       	movw	r24, r22
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <MCAL_UART_UARTInit>:
 */

#include "UART.h"
//#include "avr/interrupt.h"

void MCAL_UART_UARTInit(void) {
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
	/* Set baud rate */
	UBRRH = (u8) (Baud_Rate >> Shift_8_bit);
     f52:	e0 e4       	ldi	r30, 0x40	; 64
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	10 82       	st	Z, r1
	UBRRL = (u8) Baud_Rate;
     f58:	e9 e2       	ldi	r30, 0x29	; 41
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	87 e6       	ldi	r24, 0x67	; 103
     f5e:	80 83       	st	Z, r24

	/* Enable RX and TX */
//	UCSRB = (1 << RXEN) | (1 << TXEN);
	SET_BIT(UCSRB,RXEN_PIN);
     f60:	aa e2       	ldi	r26, 0x2A	; 42
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	ea e2       	ldi	r30, 0x2A	; 42
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	80 61       	ori	r24, 0x10	; 16
     f6c:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN_PIN);
     f6e:	aa e2       	ldi	r26, 0x2A	; 42
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	ea e2       	ldi	r30, 0x2A	; 42
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	88 60       	ori	r24, 0x08	; 8
     f7a:	8c 93       	st	X, r24

	/* Set frame format: 8data, 2stop bit */
//	UCSRC = (1 << URSEL) | (1 << USBS) | (3 << UCSZ0);
	UCSRC = UCSRC_Size;
     f7c:	e0 e4       	ldi	r30, 0x40	; 64
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	8e e8       	ldi	r24, 0x8E	; 142
     f82:	80 83       	st	Z, r24
	//Logical Error
//	SET_BIT(UCSRC,URSEL_PIN);
//	SET_BIT(UCSRC,USBS_PIN);
//	SET_BIT(UCSRC,UCSZ0_PIN);
//	SET_BIT(UCSRC,UCSZ1_PIN);
}
     f84:	cf 91       	pop	r28
     f86:	df 91       	pop	r29
     f88:	08 95       	ret

00000f8a <MCAL_UART_UARTTransmit>:

void MCAL_UART_UARTTransmit(u8 Loc_u8data) {
     f8a:	df 93       	push	r29
     f8c:	cf 93       	push	r28
     f8e:	0f 92       	push	r0
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	de b7       	in	r29, 0x3e	; 62
     f94:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
//	while (!( UCSRA & (1 << UDRE_PIN)));
	while (GET_BIT(UCSRA,UDRE_PIN)==0);
     f96:	eb e2       	ldi	r30, 0x2B	; 43
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	82 95       	swap	r24
     f9e:	86 95       	lsr	r24
     fa0:	87 70       	andi	r24, 0x07	; 7
     fa2:	88 2f       	mov	r24, r24
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	81 70       	andi	r24, 0x01	; 1
     fa8:	90 70       	andi	r25, 0x00	; 0
     faa:	00 97       	sbiw	r24, 0x00	; 0
     fac:	a1 f3       	breq	.-24     	; 0xf96 <MCAL_UART_UARTTransmit+0xc>

	/* Put data into buffer, sends the data */
	UDR = Loc_u8data;
     fae:	ec e2       	ldi	r30, 0x2C	; 44
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	80 83       	st	Z, r24

	/* Wait for data to be transmitted */
	while (GET_BIT(UCSRA,TXC_PIN)==0);
     fb6:	eb e2       	ldi	r30, 0x2B	; 43
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	82 95       	swap	r24
     fbe:	86 95       	lsr	r24
     fc0:	86 95       	lsr	r24
     fc2:	83 70       	andi	r24, 0x03	; 3
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	81 70       	andi	r24, 0x01	; 1
     fca:	90 70       	andi	r25, 0x00	; 0
     fcc:	00 97       	sbiw	r24, 0x00	; 0
     fce:	99 f3       	breq	.-26     	; 0xfb6 <MCAL_UART_UARTTransmit+0x2c>
	SET_BIT(UCSRA,TXC_PIN);
     fd0:	ab e2       	ldi	r26, 0x2B	; 43
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	eb e2       	ldi	r30, 0x2B	; 43
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	80 64       	ori	r24, 0x40	; 64
     fdc:	8c 93       	st	X, r24

}
     fde:	0f 90       	pop	r0
     fe0:	cf 91       	pop	r28
     fe2:	df 91       	pop	r29
     fe4:	08 95       	ret

00000fe6 <MCAL_UART_UARTReceive>:
//		MCAL_UART_UARTTransmit(Loc_u8data[i]);
//	}
//
//}

void MCAL_UART_UARTReceive(u8* Loc_u8data) {
     fe6:	df 93       	push	r29
     fe8:	cf 93       	push	r28
     fea:	00 d0       	rcall	.+0      	; 0xfec <MCAL_UART_UARTReceive+0x6>
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
     ff0:	9a 83       	std	Y+2, r25	; 0x02
     ff2:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for data to be received */
//	while (!(UCSRA & (1 << RXC_PIN)));
	while (GET_BIT(UCSRA,RXC_PIN)==0);
     ff4:	eb e2       	ldi	r30, 0x2B	; 43
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	88 23       	and	r24, r24
     ffc:	dc f7       	brge	.-10     	; 0xff4 <MCAL_UART_UARTReceive+0xe>

	/* 	Save Received Data in Var-Loc_u8data */
	*Loc_u8data=UDR;
     ffe:	ec e2       	ldi	r30, 0x2C	; 44
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	e9 81       	ldd	r30, Y+1	; 0x01
    1006:	fa 81       	ldd	r31, Y+2	; 0x02
    1008:	80 83       	st	Z, r24
}
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	cf 91       	pop	r28
    1010:	df 91       	pop	r29
    1012:	08 95       	ret

00001014 <MCAL_T1_u8T1Init>:
 *  Created on: Oct 22, 2023
 *      Author: TOP_WORLD
 */
#include "Timer1.h"
void (*Gptr_3)(void)='\0';
u8 MCAL_T1_u8T1Init(u8 LOC_u8Timer1Mode) {
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	00 d0       	rcall	.+0      	; 0x101a <MCAL_T1_u8T1Init+0x6>
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
    101e:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_u8ReturnValue = E_NOT_OK;
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u8Timer1Mode <= FAST_PWM_OCR1A) {
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	80 31       	cpi	r24, 0x10	; 16
    1028:	08 f0       	brcs	.+2      	; 0x102c <MCAL_T1_u8T1Init+0x18>
    102a:	0f c2       	rjmp	.+1054   	; 0x144a <MCAL_T1_u8T1Init+0x436>
		if (LOC_u8Timer1Mode == NORMAL_MODE) {
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	88 23       	and	r24, r24
    1030:	f1 f4       	brne	.+60     	; 0x106e <MCAL_T1_u8T1Init+0x5a>
			CLR_BIT(TCCR1A, PIN0);
    1032:	af e4       	ldi	r26, 0x4F	; 79
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	ef e4       	ldi	r30, 0x4F	; 79
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	8e 7f       	andi	r24, 0xFE	; 254
    103e:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, PIN1);
    1040:	af e4       	ldi	r26, 0x4F	; 79
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	ef e4       	ldi	r30, 0x4F	; 79
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	8d 7f       	andi	r24, 0xFD	; 253
    104c:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN3);
    104e:	ae e4       	ldi	r26, 0x4E	; 78
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	ee e4       	ldi	r30, 0x4E	; 78
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	87 7f       	andi	r24, 0xF7	; 247
    105a:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN4);
    105c:	ae e4       	ldi	r26, 0x4E	; 78
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	ee e4       	ldi	r30, 0x4E	; 78
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	8f 7e       	andi	r24, 0xEF	; 239
    1068:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    106a:	19 82       	std	Y+1, r1	; 0x01
    106c:	ee c1       	rjmp	.+988    	; 0x144a <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == PWM_PHASE_CORRECT_8bit) {
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	81 30       	cpi	r24, 0x01	; 1
    1072:	f1 f4       	brne	.+60     	; 0x10b0 <MCAL_T1_u8T1Init+0x9c>
			SET_BIT(TCCR1A, PIN0);
    1074:	af e4       	ldi	r26, 0x4F	; 79
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	ef e4       	ldi	r30, 0x4F	; 79
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	81 60       	ori	r24, 0x01	; 1
    1080:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, PIN1);
    1082:	af e4       	ldi	r26, 0x4F	; 79
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	ef e4       	ldi	r30, 0x4F	; 79
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	8d 7f       	andi	r24, 0xFD	; 253
    108e:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN3);
    1090:	ae e4       	ldi	r26, 0x4E	; 78
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	ee e4       	ldi	r30, 0x4E	; 78
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	87 7f       	andi	r24, 0xF7	; 247
    109c:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN4);
    109e:	ae e4       	ldi	r26, 0x4E	; 78
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	ee e4       	ldi	r30, 0x4E	; 78
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	8f 7e       	andi	r24, 0xEF	; 239
    10aa:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    10ac:	19 82       	std	Y+1, r1	; 0x01
    10ae:	cd c1       	rjmp	.+922    	; 0x144a <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == PWM_PHASE_CORRECT_9bit) {
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	82 30       	cpi	r24, 0x02	; 2
    10b4:	f1 f4       	brne	.+60     	; 0x10f2 <MCAL_T1_u8T1Init+0xde>
			CLR_BIT(TCCR1A, PIN0);
    10b6:	af e4       	ldi	r26, 0x4F	; 79
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	ef e4       	ldi	r30, 0x4F	; 79
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	8e 7f       	andi	r24, 0xFE	; 254
    10c2:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, PIN1);
    10c4:	af e4       	ldi	r26, 0x4F	; 79
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	ef e4       	ldi	r30, 0x4F	; 79
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	82 60       	ori	r24, 0x02	; 2
    10d0:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN3);
    10d2:	ae e4       	ldi	r26, 0x4E	; 78
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	ee e4       	ldi	r30, 0x4E	; 78
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	87 7f       	andi	r24, 0xF7	; 247
    10de:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN4);
    10e0:	ae e4       	ldi	r26, 0x4E	; 78
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	ee e4       	ldi	r30, 0x4E	; 78
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	8f 7e       	andi	r24, 0xEF	; 239
    10ec:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    10ee:	19 82       	std	Y+1, r1	; 0x01
    10f0:	ac c1       	rjmp	.+856    	; 0x144a <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == PWM_PHASE_CORRECT_10bit) {
    10f2:	8a 81       	ldd	r24, Y+2	; 0x02
    10f4:	83 30       	cpi	r24, 0x03	; 3
    10f6:	f1 f4       	brne	.+60     	; 0x1134 <MCAL_T1_u8T1Init+0x120>
			SET_BIT(TCCR1A, PIN0);
    10f8:	af e4       	ldi	r26, 0x4F	; 79
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	ef e4       	ldi	r30, 0x4F	; 79
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	81 60       	ori	r24, 0x01	; 1
    1104:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, PIN1);
    1106:	af e4       	ldi	r26, 0x4F	; 79
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	ef e4       	ldi	r30, 0x4F	; 79
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	82 60       	ori	r24, 0x02	; 2
    1112:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN3);
    1114:	ae e4       	ldi	r26, 0x4E	; 78
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	ee e4       	ldi	r30, 0x4E	; 78
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	87 7f       	andi	r24, 0xF7	; 247
    1120:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN4);
    1122:	ae e4       	ldi	r26, 0x4E	; 78
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	ee e4       	ldi	r30, 0x4E	; 78
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	8f 7e       	andi	r24, 0xEF	; 239
    112e:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    1130:	19 82       	std	Y+1, r1	; 0x01
    1132:	8b c1       	rjmp	.+790    	; 0x144a <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == CTC_OCR1A) {
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	84 30       	cpi	r24, 0x04	; 4
    1138:	f1 f4       	brne	.+60     	; 0x1176 <MCAL_T1_u8T1Init+0x162>
			CLR_BIT(TCCR1A, PIN0);
    113a:	af e4       	ldi	r26, 0x4F	; 79
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	ef e4       	ldi	r30, 0x4F	; 79
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	8e 7f       	andi	r24, 0xFE	; 254
    1146:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, PIN1);
    1148:	af e4       	ldi	r26, 0x4F	; 79
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	ef e4       	ldi	r30, 0x4F	; 79
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	8d 7f       	andi	r24, 0xFD	; 253
    1154:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN3);
    1156:	ae e4       	ldi	r26, 0x4E	; 78
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	ee e4       	ldi	r30, 0x4E	; 78
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	88 60       	ori	r24, 0x08	; 8
    1162:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN4);
    1164:	ae e4       	ldi	r26, 0x4E	; 78
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	ee e4       	ldi	r30, 0x4E	; 78
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	8f 7e       	andi	r24, 0xEF	; 239
    1170:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    1172:	19 82       	std	Y+1, r1	; 0x01
    1174:	6a c1       	rjmp	.+724    	; 0x144a <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == FAST_PWM_8bit) {
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	85 30       	cpi	r24, 0x05	; 5
    117a:	f1 f4       	brne	.+60     	; 0x11b8 <MCAL_T1_u8T1Init+0x1a4>
			SET_BIT(TCCR1A, PIN0);
    117c:	af e4       	ldi	r26, 0x4F	; 79
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	ef e4       	ldi	r30, 0x4F	; 79
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	81 60       	ori	r24, 0x01	; 1
    1188:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, PIN1);
    118a:	af e4       	ldi	r26, 0x4F	; 79
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	ef e4       	ldi	r30, 0x4F	; 79
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	8d 7f       	andi	r24, 0xFD	; 253
    1196:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN3);
    1198:	ae e4       	ldi	r26, 0x4E	; 78
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	ee e4       	ldi	r30, 0x4E	; 78
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	88 60       	ori	r24, 0x08	; 8
    11a4:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN4);
    11a6:	ae e4       	ldi	r26, 0x4E	; 78
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	ee e4       	ldi	r30, 0x4E	; 78
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	8f 7e       	andi	r24, 0xEF	; 239
    11b2:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    11b4:	19 82       	std	Y+1, r1	; 0x01
    11b6:	49 c1       	rjmp	.+658    	; 0x144a <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == FAST_PWM_9bit) {
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	86 30       	cpi	r24, 0x06	; 6
    11bc:	f1 f4       	brne	.+60     	; 0x11fa <MCAL_T1_u8T1Init+0x1e6>
			CLR_BIT(TCCR1A, PIN0);
    11be:	af e4       	ldi	r26, 0x4F	; 79
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	ef e4       	ldi	r30, 0x4F	; 79
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	8e 7f       	andi	r24, 0xFE	; 254
    11ca:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, PIN1);
    11cc:	af e4       	ldi	r26, 0x4F	; 79
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	ef e4       	ldi	r30, 0x4F	; 79
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	82 60       	ori	r24, 0x02	; 2
    11d8:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN3);
    11da:	ae e4       	ldi	r26, 0x4E	; 78
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	ee e4       	ldi	r30, 0x4E	; 78
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	88 60       	ori	r24, 0x08	; 8
    11e6:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN4);
    11e8:	ae e4       	ldi	r26, 0x4E	; 78
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	ee e4       	ldi	r30, 0x4E	; 78
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	8f 7e       	andi	r24, 0xEF	; 239
    11f4:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    11f6:	19 82       	std	Y+1, r1	; 0x01
    11f8:	28 c1       	rjmp	.+592    	; 0x144a <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == FAST_PWM_10bit) {
    11fa:	8a 81       	ldd	r24, Y+2	; 0x02
    11fc:	87 30       	cpi	r24, 0x07	; 7
    11fe:	f1 f4       	brne	.+60     	; 0x123c <MCAL_T1_u8T1Init+0x228>
			SET_BIT(TCCR1A, PIN0);
    1200:	af e4       	ldi	r26, 0x4F	; 79
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	ef e4       	ldi	r30, 0x4F	; 79
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	81 60       	ori	r24, 0x01	; 1
    120c:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, PIN1);
    120e:	af e4       	ldi	r26, 0x4F	; 79
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	ef e4       	ldi	r30, 0x4F	; 79
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	82 60       	ori	r24, 0x02	; 2
    121a:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN3);
    121c:	ae e4       	ldi	r26, 0x4E	; 78
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	ee e4       	ldi	r30, 0x4E	; 78
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	88 60       	ori	r24, 0x08	; 8
    1228:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN4);
    122a:	ae e4       	ldi	r26, 0x4E	; 78
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	ee e4       	ldi	r30, 0x4E	; 78
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	8f 7e       	andi	r24, 0xEF	; 239
    1236:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    1238:	19 82       	std	Y+1, r1	; 0x01
    123a:	07 c1       	rjmp	.+526    	; 0x144a <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == PWM_PHASE_AND_FREQUANCY_CORRECT_ICR1) {
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	88 30       	cpi	r24, 0x08	; 8
    1240:	f1 f4       	brne	.+60     	; 0x127e <MCAL_T1_u8T1Init+0x26a>
			CLR_BIT(TCCR1A, PIN0);
    1242:	af e4       	ldi	r26, 0x4F	; 79
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	ef e4       	ldi	r30, 0x4F	; 79
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	8e 7f       	andi	r24, 0xFE	; 254
    124e:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, PIN1);
    1250:	af e4       	ldi	r26, 0x4F	; 79
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	ef e4       	ldi	r30, 0x4F	; 79
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	8d 7f       	andi	r24, 0xFD	; 253
    125c:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN3);
    125e:	ae e4       	ldi	r26, 0x4E	; 78
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	ee e4       	ldi	r30, 0x4E	; 78
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	87 7f       	andi	r24, 0xF7	; 247
    126a:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN4);
    126c:	ae e4       	ldi	r26, 0x4E	; 78
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	ee e4       	ldi	r30, 0x4E	; 78
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	80 61       	ori	r24, 0x10	; 16
    1278:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    127a:	19 82       	std	Y+1, r1	; 0x01
    127c:	e6 c0       	rjmp	.+460    	; 0x144a <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == PWM_PHASE_AND_FREQUANCY_CORRECT_OCR1A) {
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	89 30       	cpi	r24, 0x09	; 9
    1282:	f1 f4       	brne	.+60     	; 0x12c0 <MCAL_T1_u8T1Init+0x2ac>
			SET_BIT(TCCR1A, PIN0);
    1284:	af e4       	ldi	r26, 0x4F	; 79
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	ef e4       	ldi	r30, 0x4F	; 79
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	81 60       	ori	r24, 0x01	; 1
    1290:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, PIN1);
    1292:	af e4       	ldi	r26, 0x4F	; 79
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	ef e4       	ldi	r30, 0x4F	; 79
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	8d 7f       	andi	r24, 0xFD	; 253
    129e:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN3);
    12a0:	ae e4       	ldi	r26, 0x4E	; 78
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	ee e4       	ldi	r30, 0x4E	; 78
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	87 7f       	andi	r24, 0xF7	; 247
    12ac:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN4);
    12ae:	ae e4       	ldi	r26, 0x4E	; 78
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	ee e4       	ldi	r30, 0x4E	; 78
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	80 61       	ori	r24, 0x10	; 16
    12ba:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    12bc:	19 82       	std	Y+1, r1	; 0x01
    12be:	c5 c0       	rjmp	.+394    	; 0x144a <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == PWM_PHASE_CORRECT_ICR1) {
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	8a 30       	cpi	r24, 0x0A	; 10
    12c4:	f1 f4       	brne	.+60     	; 0x1302 <MCAL_T1_u8T1Init+0x2ee>
			CLR_BIT(TCCR1A, PIN0);
    12c6:	af e4       	ldi	r26, 0x4F	; 79
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	ef e4       	ldi	r30, 0x4F	; 79
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	8e 7f       	andi	r24, 0xFE	; 254
    12d2:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, PIN1);
    12d4:	af e4       	ldi	r26, 0x4F	; 79
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	ef e4       	ldi	r30, 0x4F	; 79
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	82 60       	ori	r24, 0x02	; 2
    12e0:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN3);
    12e2:	ae e4       	ldi	r26, 0x4E	; 78
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	ee e4       	ldi	r30, 0x4E	; 78
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	87 7f       	andi	r24, 0xF7	; 247
    12ee:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN4);
    12f0:	ae e4       	ldi	r26, 0x4E	; 78
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	ee e4       	ldi	r30, 0x4E	; 78
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	80 61       	ori	r24, 0x10	; 16
    12fc:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    12fe:	19 82       	std	Y+1, r1	; 0x01
    1300:	a4 c0       	rjmp	.+328    	; 0x144a <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == PWM_PHASE_CORRECT_OCR1A) {
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	8b 30       	cpi	r24, 0x0B	; 11
    1306:	f1 f4       	brne	.+60     	; 0x1344 <MCAL_T1_u8T1Init+0x330>
			SET_BIT(TCCR1A, PIN0);
    1308:	af e4       	ldi	r26, 0x4F	; 79
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	ef e4       	ldi	r30, 0x4F	; 79
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	81 60       	ori	r24, 0x01	; 1
    1314:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, PIN1);
    1316:	af e4       	ldi	r26, 0x4F	; 79
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	ef e4       	ldi	r30, 0x4F	; 79
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	82 60       	ori	r24, 0x02	; 2
    1322:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN3);
    1324:	ae e4       	ldi	r26, 0x4E	; 78
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	ee e4       	ldi	r30, 0x4E	; 78
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	87 7f       	andi	r24, 0xF7	; 247
    1330:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN4);
    1332:	ae e4       	ldi	r26, 0x4E	; 78
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	ee e4       	ldi	r30, 0x4E	; 78
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	80 61       	ori	r24, 0x10	; 16
    133e:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    1340:	19 82       	std	Y+1, r1	; 0x01
    1342:	83 c0       	rjmp	.+262    	; 0x144a <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == CTC_ICR1) {
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	8c 30       	cpi	r24, 0x0C	; 12
    1348:	f1 f4       	brne	.+60     	; 0x1386 <MCAL_T1_u8T1Init+0x372>
			CLR_BIT(TCCR1A, PIN0);
    134a:	af e4       	ldi	r26, 0x4F	; 79
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	ef e4       	ldi	r30, 0x4F	; 79
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	8e 7f       	andi	r24, 0xFE	; 254
    1356:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, PIN1);
    1358:	af e4       	ldi	r26, 0x4F	; 79
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	ef e4       	ldi	r30, 0x4F	; 79
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	8d 7f       	andi	r24, 0xFD	; 253
    1364:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN3);
    1366:	ae e4       	ldi	r26, 0x4E	; 78
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	ee e4       	ldi	r30, 0x4E	; 78
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	88 60       	ori	r24, 0x08	; 8
    1372:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN4);
    1374:	ae e4       	ldi	r26, 0x4E	; 78
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	ee e4       	ldi	r30, 0x4E	; 78
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	80 61       	ori	r24, 0x10	; 16
    1380:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    1382:	19 82       	std	Y+1, r1	; 0x01
    1384:	62 c0       	rjmp	.+196    	; 0x144a <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == REVERSED_MODE) {
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	8d 30       	cpi	r24, 0x0D	; 13
    138a:	f1 f4       	brne	.+60     	; 0x13c8 <MCAL_T1_u8T1Init+0x3b4>
			SET_BIT(TCCR1A, PIN0);
    138c:	af e4       	ldi	r26, 0x4F	; 79
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	ef e4       	ldi	r30, 0x4F	; 79
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	81 60       	ori	r24, 0x01	; 1
    1398:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, PIN1);
    139a:	af e4       	ldi	r26, 0x4F	; 79
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	ef e4       	ldi	r30, 0x4F	; 79
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	8d 7f       	andi	r24, 0xFD	; 253
    13a6:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN3);
    13a8:	ae e4       	ldi	r26, 0x4E	; 78
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	ee e4       	ldi	r30, 0x4E	; 78
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	88 60       	ori	r24, 0x08	; 8
    13b4:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN4);
    13b6:	ae e4       	ldi	r26, 0x4E	; 78
    13b8:	b0 e0       	ldi	r27, 0x00	; 0
    13ba:	ee e4       	ldi	r30, 0x4E	; 78
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	80 61       	ori	r24, 0x10	; 16
    13c2:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    13c4:	19 82       	std	Y+1, r1	; 0x01
    13c6:	41 c0       	rjmp	.+130    	; 0x144a <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == FAST_PWM_ICR1) {
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	8e 30       	cpi	r24, 0x0E	; 14
    13cc:	f1 f4       	brne	.+60     	; 0x140a <MCAL_T1_u8T1Init+0x3f6>
			CLR_BIT(TCCR1A, PIN0);
    13ce:	af e4       	ldi	r26, 0x4F	; 79
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	ef e4       	ldi	r30, 0x4F	; 79
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	8e 7f       	andi	r24, 0xFE	; 254
    13da:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, PIN1);
    13dc:	af e4       	ldi	r26, 0x4F	; 79
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	ef e4       	ldi	r30, 0x4F	; 79
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	82 60       	ori	r24, 0x02	; 2
    13e8:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN3);
    13ea:	ae e4       	ldi	r26, 0x4E	; 78
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	ee e4       	ldi	r30, 0x4E	; 78
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	88 60       	ori	r24, 0x08	; 8
    13f6:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN4);
    13f8:	ae e4       	ldi	r26, 0x4E	; 78
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	ee e4       	ldi	r30, 0x4E	; 78
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	80 61       	ori	r24, 0x10	; 16
    1404:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    1406:	19 82       	std	Y+1, r1	; 0x01
    1408:	20 c0       	rjmp	.+64     	; 0x144a <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == FAST_PWM_OCR1A) {
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	8f 30       	cpi	r24, 0x0F	; 15
    140e:	e9 f4       	brne	.+58     	; 0x144a <MCAL_T1_u8T1Init+0x436>
			SET_BIT(TCCR1A, PIN0);
    1410:	af e4       	ldi	r26, 0x4F	; 79
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	ef e4       	ldi	r30, 0x4F	; 79
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	81 60       	ori	r24, 0x01	; 1
    141c:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, PIN1);
    141e:	af e4       	ldi	r26, 0x4F	; 79
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	ef e4       	ldi	r30, 0x4F	; 79
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	82 60       	ori	r24, 0x02	; 2
    142a:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN3);
    142c:	ae e4       	ldi	r26, 0x4E	; 78
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	ee e4       	ldi	r30, 0x4E	; 78
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	88 60       	ori	r24, 0x08	; 8
    1438:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN4);
    143a:	ae e4       	ldi	r26, 0x4E	; 78
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	ee e4       	ldi	r30, 0x4E	; 78
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	80 61       	ori	r24, 0x10	; 16
    1446:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    1448:	19 82       	std	Y+1, r1	; 0x01
			//NOTHING
		}
	} else {
		//NOTHING
	}
	return LOC_u8ReturnValue;
    144a:	89 81       	ldd	r24, Y+1	; 0x01
}
    144c:	0f 90       	pop	r0
    144e:	0f 90       	pop	r0
    1450:	cf 91       	pop	r28
    1452:	df 91       	pop	r29
    1454:	08 95       	ret

00001456 <MCAL_T1_u8T1Prescaler>:
u8 MCAL_T1_u8T1Prescaler(u8 LOC_u8Clock_Selection, f32 *LOC_pfl32TickTime) {
    1456:	df 93       	push	r29
    1458:	cf 93       	push	r28
    145a:	00 d0       	rcall	.+0      	; 0x145c <MCAL_T1_u8T1Prescaler+0x6>
    145c:	00 d0       	rcall	.+0      	; 0x145e <MCAL_T1_u8T1Prescaler+0x8>
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
    1462:	8a 83       	std	Y+2, r24	; 0x02
    1464:	7c 83       	std	Y+4, r23	; 0x04
    1466:	6b 83       	std	Y+3, r22	; 0x03
	u8 LOC_u8ReturnValue = E_NOT_OK;
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u8Clock_Selection <= EXTERNAL_RISING_EDGE) {
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	88 30       	cpi	r24, 0x08	; 8
    1470:	08 f0       	brcs	.+2      	; 0x1474 <MCAL_T1_u8T1Prescaler+0x1e>
    1472:	01 c1       	rjmp	.+514    	; 0x1676 <MCAL_T1_u8T1Prescaler+0x220>
		if (LOC_u8Clock_Selection == COUNTER_STOP) {
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	88 23       	and	r24, r24
    1478:	b9 f4       	brne	.+46     	; 0x14a8 <MCAL_T1_u8T1Prescaler+0x52>
			CLR_BIT(TCCR1B, PIN0);
    147a:	ae e4       	ldi	r26, 0x4E	; 78
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	ee e4       	ldi	r30, 0x4E	; 78
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	8e 7f       	andi	r24, 0xFE	; 254
    1486:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN1);
    1488:	ae e4       	ldi	r26, 0x4E	; 78
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	ee e4       	ldi	r30, 0x4E	; 78
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	8d 7f       	andi	r24, 0xFD	; 253
    1494:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN2);
    1496:	ae e4       	ldi	r26, 0x4E	; 78
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	ee e4       	ldi	r30, 0x4E	; 78
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	8b 7f       	andi	r24, 0xFB	; 251
    14a2:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    14a4:	19 82       	std	Y+1, r1	; 0x01
    14a6:	e7 c0       	rjmp	.+462    	; 0x1676 <MCAL_T1_u8T1Prescaler+0x220>
		} else if (LOC_u8Clock_Selection == PRESCALLING_0) {
    14a8:	8a 81       	ldd	r24, Y+2	; 0x02
    14aa:	81 30       	cpi	r24, 0x01	; 1
    14ac:	09 f5       	brne	.+66     	; 0x14f0 <MCAL_T1_u8T1Prescaler+0x9a>
			SET_BIT(TCCR1B, PIN0);
    14ae:	ae e4       	ldi	r26, 0x4E	; 78
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	ee e4       	ldi	r30, 0x4E	; 78
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	81 60       	ori	r24, 0x01	; 1
    14ba:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN1);
    14bc:	ae e4       	ldi	r26, 0x4E	; 78
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	ee e4       	ldi	r30, 0x4E	; 78
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	8d 7f       	andi	r24, 0xFD	; 253
    14c8:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN2);
    14ca:	ae e4       	ldi	r26, 0x4E	; 78
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	ee e4       	ldi	r30, 0x4E	; 78
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	8b 7f       	andi	r24, 0xFB	; 251
    14d6:	8c 93       	st	X, r24
			*LOC_pfl32TickTime = PRESCALLING0 / (f32) CPU_FREQUNCY;
    14d8:	eb 81       	ldd	r30, Y+3	; 0x03
    14da:	fc 81       	ldd	r31, Y+4	; 0x04
    14dc:	8d eb       	ldi	r24, 0xBD	; 189
    14de:	97 e3       	ldi	r25, 0x37	; 55
    14e0:	a6 e0       	ldi	r26, 0x06	; 6
    14e2:	b4 e3       	ldi	r27, 0x34	; 52
    14e4:	80 83       	st	Z, r24
    14e6:	91 83       	std	Z+1, r25	; 0x01
    14e8:	a2 83       	std	Z+2, r26	; 0x02
    14ea:	b3 83       	std	Z+3, r27	; 0x03
			LOC_u8ReturnValue = E_OK;
    14ec:	19 82       	std	Y+1, r1	; 0x01
    14ee:	c3 c0       	rjmp	.+390    	; 0x1676 <MCAL_T1_u8T1Prescaler+0x220>
		} else if (LOC_u8Clock_Selection == PRESCALLING_8) {
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	82 30       	cpi	r24, 0x02	; 2
    14f4:	09 f5       	brne	.+66     	; 0x1538 <MCAL_T1_u8T1Prescaler+0xe2>
			CLR_BIT(TCCR1B, PIN0);
    14f6:	ae e4       	ldi	r26, 0x4E	; 78
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	ee e4       	ldi	r30, 0x4E	; 78
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	8e 7f       	andi	r24, 0xFE	; 254
    1502:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN1);
    1504:	ae e4       	ldi	r26, 0x4E	; 78
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	ee e4       	ldi	r30, 0x4E	; 78
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	82 60       	ori	r24, 0x02	; 2
    1510:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN2);
    1512:	ae e4       	ldi	r26, 0x4E	; 78
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	ee e4       	ldi	r30, 0x4E	; 78
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	8b 7f       	andi	r24, 0xFB	; 251
    151e:	8c 93       	st	X, r24
			*LOC_pfl32TickTime = PRESCALLING8 / (f32) CPU_FREQUNCY;
    1520:	eb 81       	ldd	r30, Y+3	; 0x03
    1522:	fc 81       	ldd	r31, Y+4	; 0x04
    1524:	8d eb       	ldi	r24, 0xBD	; 189
    1526:	97 e3       	ldi	r25, 0x37	; 55
    1528:	a6 e8       	ldi	r26, 0x86	; 134
    152a:	b5 e3       	ldi	r27, 0x35	; 53
    152c:	80 83       	st	Z, r24
    152e:	91 83       	std	Z+1, r25	; 0x01
    1530:	a2 83       	std	Z+2, r26	; 0x02
    1532:	b3 83       	std	Z+3, r27	; 0x03
			LOC_u8ReturnValue = E_OK;
    1534:	19 82       	std	Y+1, r1	; 0x01
    1536:	9f c0       	rjmp	.+318    	; 0x1676 <MCAL_T1_u8T1Prescaler+0x220>
		} else if (LOC_u8Clock_Selection == PRESCALLING_64) {
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	83 30       	cpi	r24, 0x03	; 3
    153c:	09 f5       	brne	.+66     	; 0x1580 <MCAL_T1_u8T1Prescaler+0x12a>
			SET_BIT(TCCR1B, PIN0);
    153e:	ae e4       	ldi	r26, 0x4E	; 78
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	ee e4       	ldi	r30, 0x4E	; 78
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	81 60       	ori	r24, 0x01	; 1
    154a:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN1);
    154c:	ae e4       	ldi	r26, 0x4E	; 78
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	ee e4       	ldi	r30, 0x4E	; 78
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	82 60       	ori	r24, 0x02	; 2
    1558:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN2);
    155a:	ae e4       	ldi	r26, 0x4E	; 78
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	ee e4       	ldi	r30, 0x4E	; 78
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	8b 7f       	andi	r24, 0xFB	; 251
    1566:	8c 93       	st	X, r24
			*LOC_pfl32TickTime = PRESCALLING64 / (f32) CPU_FREQUNCY;
    1568:	eb 81       	ldd	r30, Y+3	; 0x03
    156a:	fc 81       	ldd	r31, Y+4	; 0x04
    156c:	8d eb       	ldi	r24, 0xBD	; 189
    156e:	97 e3       	ldi	r25, 0x37	; 55
    1570:	a6 e0       	ldi	r26, 0x06	; 6
    1572:	b7 e3       	ldi	r27, 0x37	; 55
    1574:	80 83       	st	Z, r24
    1576:	91 83       	std	Z+1, r25	; 0x01
    1578:	a2 83       	std	Z+2, r26	; 0x02
    157a:	b3 83       	std	Z+3, r27	; 0x03
			LOC_u8ReturnValue = E_OK;
    157c:	19 82       	std	Y+1, r1	; 0x01
    157e:	7b c0       	rjmp	.+246    	; 0x1676 <MCAL_T1_u8T1Prescaler+0x220>
		} else if (LOC_u8Clock_Selection == PRESCALLING_256) {
    1580:	8a 81       	ldd	r24, Y+2	; 0x02
    1582:	84 30       	cpi	r24, 0x04	; 4
    1584:	09 f5       	brne	.+66     	; 0x15c8 <MCAL_T1_u8T1Prescaler+0x172>
			CLR_BIT(TCCR1B, PIN0);
    1586:	ae e4       	ldi	r26, 0x4E	; 78
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	ee e4       	ldi	r30, 0x4E	; 78
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	8e 7f       	andi	r24, 0xFE	; 254
    1592:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN1);
    1594:	ae e4       	ldi	r26, 0x4E	; 78
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	ee e4       	ldi	r30, 0x4E	; 78
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	8d 7f       	andi	r24, 0xFD	; 253
    15a0:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN2);
    15a2:	ae e4       	ldi	r26, 0x4E	; 78
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	ee e4       	ldi	r30, 0x4E	; 78
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	84 60       	ori	r24, 0x04	; 4
    15ae:	8c 93       	st	X, r24
			*LOC_pfl32TickTime = PRESCALLING256 / (f32) CPU_FREQUNCY;
    15b0:	eb 81       	ldd	r30, Y+3	; 0x03
    15b2:	fc 81       	ldd	r31, Y+4	; 0x04
    15b4:	8d eb       	ldi	r24, 0xBD	; 189
    15b6:	97 e3       	ldi	r25, 0x37	; 55
    15b8:	a6 e0       	ldi	r26, 0x06	; 6
    15ba:	b8 e3       	ldi	r27, 0x38	; 56
    15bc:	80 83       	st	Z, r24
    15be:	91 83       	std	Z+1, r25	; 0x01
    15c0:	a2 83       	std	Z+2, r26	; 0x02
    15c2:	b3 83       	std	Z+3, r27	; 0x03
			LOC_u8ReturnValue = E_OK;
    15c4:	19 82       	std	Y+1, r1	; 0x01
    15c6:	57 c0       	rjmp	.+174    	; 0x1676 <MCAL_T1_u8T1Prescaler+0x220>
		} else if (LOC_u8Clock_Selection == PRESCALLING_1024) {
    15c8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ca:	85 30       	cpi	r24, 0x05	; 5
    15cc:	09 f5       	brne	.+66     	; 0x1610 <MCAL_T1_u8T1Prescaler+0x1ba>
			SET_BIT(TCCR1B, PIN0);
    15ce:	ae e4       	ldi	r26, 0x4E	; 78
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	ee e4       	ldi	r30, 0x4E	; 78
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	81 60       	ori	r24, 0x01	; 1
    15da:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN1);
    15dc:	ae e4       	ldi	r26, 0x4E	; 78
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	ee e4       	ldi	r30, 0x4E	; 78
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	8d 7f       	andi	r24, 0xFD	; 253
    15e8:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN2);
    15ea:	ae e4       	ldi	r26, 0x4E	; 78
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	ee e4       	ldi	r30, 0x4E	; 78
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	84 60       	ori	r24, 0x04	; 4
    15f6:	8c 93       	st	X, r24
			*LOC_pfl32TickTime = PRESCALLING1024 / (f32) CPU_FREQUNCY;
    15f8:	eb 81       	ldd	r30, Y+3	; 0x03
    15fa:	fc 81       	ldd	r31, Y+4	; 0x04
    15fc:	8d eb       	ldi	r24, 0xBD	; 189
    15fe:	97 e3       	ldi	r25, 0x37	; 55
    1600:	a6 e0       	ldi	r26, 0x06	; 6
    1602:	b9 e3       	ldi	r27, 0x39	; 57
    1604:	80 83       	st	Z, r24
    1606:	91 83       	std	Z+1, r25	; 0x01
    1608:	a2 83       	std	Z+2, r26	; 0x02
    160a:	b3 83       	std	Z+3, r27	; 0x03
			LOC_u8ReturnValue = E_OK;
    160c:	19 82       	std	Y+1, r1	; 0x01
    160e:	33 c0       	rjmp	.+102    	; 0x1676 <MCAL_T1_u8T1Prescaler+0x220>
		} else if (LOC_u8Clock_Selection == EXTERNAL_FALLING_EDGE) {
    1610:	8a 81       	ldd	r24, Y+2	; 0x02
    1612:	86 30       	cpi	r24, 0x06	; 6
    1614:	b9 f4       	brne	.+46     	; 0x1644 <MCAL_T1_u8T1Prescaler+0x1ee>
			CLR_BIT(TCCR1B, PIN0);
    1616:	ae e4       	ldi	r26, 0x4E	; 78
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	ee e4       	ldi	r30, 0x4E	; 78
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	8e 7f       	andi	r24, 0xFE	; 254
    1622:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN1);
    1624:	ae e4       	ldi	r26, 0x4E	; 78
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	ee e4       	ldi	r30, 0x4E	; 78
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	82 60       	ori	r24, 0x02	; 2
    1630:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN2);
    1632:	ae e4       	ldi	r26, 0x4E	; 78
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	ee e4       	ldi	r30, 0x4E	; 78
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	84 60       	ori	r24, 0x04	; 4
    163e:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    1640:	19 82       	std	Y+1, r1	; 0x01
    1642:	19 c0       	rjmp	.+50     	; 0x1676 <MCAL_T1_u8T1Prescaler+0x220>
		} else if (LOC_u8Clock_Selection == EXTERNAL_RISING_EDGE) {
    1644:	8a 81       	ldd	r24, Y+2	; 0x02
    1646:	87 30       	cpi	r24, 0x07	; 7
    1648:	b1 f4       	brne	.+44     	; 0x1676 <MCAL_T1_u8T1Prescaler+0x220>
			SET_BIT(TCCR1B, PIN0);
    164a:	ae e4       	ldi	r26, 0x4E	; 78
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	ee e4       	ldi	r30, 0x4E	; 78
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	81 60       	ori	r24, 0x01	; 1
    1656:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN1);
    1658:	ae e4       	ldi	r26, 0x4E	; 78
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	ee e4       	ldi	r30, 0x4E	; 78
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	82 60       	ori	r24, 0x02	; 2
    1664:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN2);
    1666:	ae e4       	ldi	r26, 0x4E	; 78
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	ee e4       	ldi	r30, 0x4E	; 78
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	84 60       	ori	r24, 0x04	; 4
    1672:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    1674:	19 82       	std	Y+1, r1	; 0x01
			//NOTHING
		}
	} else {
		//NOTHING
	}
	return LOC_u8ReturnValue;
    1676:	89 81       	ldd	r24, Y+1	; 0x01
}
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	cf 91       	pop	r28
    1682:	df 91       	pop	r29
    1684:	08 95       	ret

00001686 <MCAL_T1_u8T1CompareOutputMode>:
//Fast MODE PWM & PHASE CORRECT
u8 MCAL_T1_u8T1CompareOutputMode(u8 LOC_u8OutputMode, u8 LOC_u8Channel) {
    1686:	df 93       	push	r29
    1688:	cf 93       	push	r28
    168a:	00 d0       	rcall	.+0      	; 0x168c <MCAL_T1_u8T1CompareOutputMode+0x6>
    168c:	0f 92       	push	r0
    168e:	cd b7       	in	r28, 0x3d	; 61
    1690:	de b7       	in	r29, 0x3e	; 62
    1692:	8a 83       	std	Y+2, r24	; 0x02
    1694:	6b 83       	std	Y+3, r22	; 0x03
	u8 LOC_u8ReturnValue = E_NOT_OK;
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u8OutputMode <= INVERTING_MODE && LOC_u8Channel <= CHENNEL_B) {
    169a:	8a 81       	ldd	r24, Y+2	; 0x02
    169c:	82 30       	cpi	r24, 0x02	; 2
    169e:	08 f0       	brcs	.+2      	; 0x16a2 <MCAL_T1_u8T1CompareOutputMode+0x1c>
    16a0:	72 c0       	rjmp	.+228    	; 0x1786 <MCAL_T1_u8T1CompareOutputMode+0x100>
    16a2:	8b 81       	ldd	r24, Y+3	; 0x03
    16a4:	82 30       	cpi	r24, 0x02	; 2
    16a6:	08 f0       	brcs	.+2      	; 0x16aa <MCAL_T1_u8T1CompareOutputMode+0x24>
    16a8:	6e c0       	rjmp	.+220    	; 0x1786 <MCAL_T1_u8T1CompareOutputMode+0x100>
		if (LOC_u8Channel == CHENNEL_A) {
    16aa:	8b 81       	ldd	r24, Y+3	; 0x03
    16ac:	88 23       	and	r24, r24
    16ae:	a9 f5       	brne	.+106    	; 0x171a <MCAL_T1_u8T1CompareOutputMode+0x94>
			if (LOC_u8OutputMode == NON_INVERTING_MODE) {
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
    16b2:	88 23       	and	r24, r24
    16b4:	b9 f4       	brne	.+46     	; 0x16e4 <MCAL_T1_u8T1CompareOutputMode+0x5e>
				CLR_BIT(TCCR1A, PIN6);
    16b6:	af e4       	ldi	r26, 0x4F	; 79
    16b8:	b0 e0       	ldi	r27, 0x00	; 0
    16ba:	ef e4       	ldi	r30, 0x4F	; 79
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	8f 7b       	andi	r24, 0xBF	; 191
    16c2:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, PIN7);
    16c4:	af e4       	ldi	r26, 0x4F	; 79
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	ef e4       	ldi	r30, 0x4F	; 79
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	80 68       	ori	r24, 0x80	; 128
    16d0:	8c 93       	st	X, r24
				SET_BIT(DDRD, PIN5);
    16d2:	a1 e3       	ldi	r26, 0x31	; 49
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e1 e3       	ldi	r30, 0x31	; 49
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	80 62       	ori	r24, 0x20	; 32
    16de:	8c 93       	st	X, r24
				LOC_u8ReturnValue = E_OK;
    16e0:	19 82       	std	Y+1, r1	; 0x01
    16e2:	51 c0       	rjmp	.+162    	; 0x1786 <MCAL_T1_u8T1CompareOutputMode+0x100>
			} else if (LOC_u8OutputMode == INVERTING_MODE) {
    16e4:	8a 81       	ldd	r24, Y+2	; 0x02
    16e6:	81 30       	cpi	r24, 0x01	; 1
    16e8:	09 f0       	breq	.+2      	; 0x16ec <MCAL_T1_u8T1CompareOutputMode+0x66>
    16ea:	4d c0       	rjmp	.+154    	; 0x1786 <MCAL_T1_u8T1CompareOutputMode+0x100>
				SET_BIT(TCCR1A, PIN6);
    16ec:	af e4       	ldi	r26, 0x4F	; 79
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	ef e4       	ldi	r30, 0x4F	; 79
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	80 64       	ori	r24, 0x40	; 64
    16f8:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, PIN7);
    16fa:	af e4       	ldi	r26, 0x4F	; 79
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	ef e4       	ldi	r30, 0x4F	; 79
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	80 68       	ori	r24, 0x80	; 128
    1706:	8c 93       	st	X, r24
				SET_BIT(DDRD, PIN5);
    1708:	a1 e3       	ldi	r26, 0x31	; 49
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	e1 e3       	ldi	r30, 0x31	; 49
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	80 62       	ori	r24, 0x20	; 32
    1714:	8c 93       	st	X, r24
				LOC_u8ReturnValue = E_OK;
    1716:	19 82       	std	Y+1, r1	; 0x01
    1718:	36 c0       	rjmp	.+108    	; 0x1786 <MCAL_T1_u8T1CompareOutputMode+0x100>
			} else {
				//NOTHING
			}
		} else if (LOC_u8Channel == CHENNEL_B) {
    171a:	8b 81       	ldd	r24, Y+3	; 0x03
    171c:	81 30       	cpi	r24, 0x01	; 1
    171e:	99 f5       	brne	.+102    	; 0x1786 <MCAL_T1_u8T1CompareOutputMode+0x100>
			if (LOC_u8OutputMode == NON_INVERTING_MODE) {
    1720:	8a 81       	ldd	r24, Y+2	; 0x02
    1722:	88 23       	and	r24, r24
    1724:	b9 f4       	brne	.+46     	; 0x1754 <MCAL_T1_u8T1CompareOutputMode+0xce>
				CLR_BIT(TCCR1A, PIN4);
    1726:	af e4       	ldi	r26, 0x4F	; 79
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	ef e4       	ldi	r30, 0x4F	; 79
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	8f 7e       	andi	r24, 0xEF	; 239
    1732:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, PIN5);
    1734:	af e4       	ldi	r26, 0x4F	; 79
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	ef e4       	ldi	r30, 0x4F	; 79
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	80 62       	ori	r24, 0x20	; 32
    1740:	8c 93       	st	X, r24
				SET_BIT(DDRD, PIN4);
    1742:	a1 e3       	ldi	r26, 0x31	; 49
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	e1 e3       	ldi	r30, 0x31	; 49
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	80 61       	ori	r24, 0x10	; 16
    174e:	8c 93       	st	X, r24
				LOC_u8ReturnValue = E_OK;
    1750:	19 82       	std	Y+1, r1	; 0x01
    1752:	19 c0       	rjmp	.+50     	; 0x1786 <MCAL_T1_u8T1CompareOutputMode+0x100>
			} else if (LOC_u8OutputMode == INVERTING_MODE) {
    1754:	8a 81       	ldd	r24, Y+2	; 0x02
    1756:	81 30       	cpi	r24, 0x01	; 1
    1758:	b1 f4       	brne	.+44     	; 0x1786 <MCAL_T1_u8T1CompareOutputMode+0x100>
				SET_BIT(TCCR1A, PIN4);
    175a:	af e4       	ldi	r26, 0x4F	; 79
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	ef e4       	ldi	r30, 0x4F	; 79
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	80 61       	ori	r24, 0x10	; 16
    1766:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, PIN5);
    1768:	af e4       	ldi	r26, 0x4F	; 79
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	ef e4       	ldi	r30, 0x4F	; 79
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	80 62       	ori	r24, 0x20	; 32
    1774:	8c 93       	st	X, r24
				SET_BIT(DDRD, PIN4);
    1776:	a1 e3       	ldi	r26, 0x31	; 49
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	e1 e3       	ldi	r30, 0x31	; 49
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	80 61       	ori	r24, 0x10	; 16
    1782:	8c 93       	st	X, r24
				LOC_u8ReturnValue = E_OK;
    1784:	19 82       	std	Y+1, r1	; 0x01
			//NOTHING
		}
	} else {
		//NOTHING
	}
	return LOC_u8ReturnValue;
    1786:	89 81       	ldd	r24, Y+1	; 0x01
}
    1788:	0f 90       	pop	r0
    178a:	0f 90       	pop	r0
    178c:	0f 90       	pop	r0
    178e:	cf 91       	pop	r28
    1790:	df 91       	pop	r29
    1792:	08 95       	ret

00001794 <MCAL_T1_voidNoiseCancller>:
//NOISE CANCLLER
void MCAL_T1_voidNoiseCancller(void) {
    1794:	df 93       	push	r29
    1796:	cf 93       	push	r28
    1798:	cd b7       	in	r28, 0x3d	; 61
    179a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B, PIN7);
    179c:	ae e4       	ldi	r26, 0x4E	; 78
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	ee e4       	ldi	r30, 0x4E	; 78
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	80 68       	ori	r24, 0x80	; 128
    17a8:	8c 93       	st	X, r24
}
    17aa:	cf 91       	pop	r28
    17ac:	df 91       	pop	r29
    17ae:	08 95       	ret

000017b0 <MCAL_T1_voidSetTCNT1Value>:
//Set TCNT1 Value
void MCAL_T1_voidSetTCNT1Value(u16 LOC_u16Value) {
    17b0:	df 93       	push	r29
    17b2:	cf 93       	push	r28
    17b4:	00 d0       	rcall	.+0      	; 0x17b6 <MCAL_T1_voidSetTCNT1Value+0x6>
    17b6:	cd b7       	in	r28, 0x3d	; 61
    17b8:	de b7       	in	r29, 0x3e	; 62
    17ba:	9a 83       	std	Y+2, r25	; 0x02
    17bc:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u16Value <= SIXTEEN_BIT_MAX_VALUE) {
		TCNT1 = LOC_u16Value;
    17be:	ec e4       	ldi	r30, 0x4C	; 76
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
    17c4:	9a 81       	ldd	r25, Y+2	; 0x02
    17c6:	91 83       	std	Z+1, r25	; 0x01
    17c8:	80 83       	st	Z, r24
	} else {
		//NOTHING
	}
}
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	cf 91       	pop	r28
    17d0:	df 91       	pop	r29
    17d2:	08 95       	ret

000017d4 <MCAL_T1_voidGetTCNT1Value>:
//GIT TCNT1
void MCAL_T1_voidGetTCNT1Value(u16 *LOC_pu16Value) {
    17d4:	df 93       	push	r29
    17d6:	cf 93       	push	r28
    17d8:	00 d0       	rcall	.+0      	; 0x17da <MCAL_T1_voidGetTCNT1Value+0x6>
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62
    17de:	9a 83       	std	Y+2, r25	; 0x02
    17e0:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_pu16Value) {
    17e2:	89 81       	ldd	r24, Y+1	; 0x01
    17e4:	9a 81       	ldd	r25, Y+2	; 0x02
    17e6:	00 97       	sbiw	r24, 0x00	; 0
    17e8:	41 f0       	breq	.+16     	; 0x17fa <MCAL_T1_voidGetTCNT1Value+0x26>
		*LOC_pu16Value = TCNT1;
    17ea:	ec e4       	ldi	r30, 0x4C	; 76
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	91 81       	ldd	r25, Z+1	; 0x01
    17f2:	e9 81       	ldd	r30, Y+1	; 0x01
    17f4:	fa 81       	ldd	r31, Y+2	; 0x02
    17f6:	91 83       	std	Z+1, r25	; 0x01
    17f8:	80 83       	st	Z, r24
	}
}
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	cf 91       	pop	r28
    1800:	df 91       	pop	r29
    1802:	08 95       	ret

00001804 <MCAL_T1_voidSetOCR1AValue>:
//Set OCR1A
void MCAL_T1_voidSetOCR1AValue(u16 LOC_u16Value) {
    1804:	df 93       	push	r29
    1806:	cf 93       	push	r28
    1808:	00 d0       	rcall	.+0      	; 0x180a <MCAL_T1_voidSetOCR1AValue+0x6>
    180a:	cd b7       	in	r28, 0x3d	; 61
    180c:	de b7       	in	r29, 0x3e	; 62
    180e:	9a 83       	std	Y+2, r25	; 0x02
    1810:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u16Value <= SIXTEEN_BIT_MAX_VALUE) {
		OCR1A = LOC_u16Value;
    1812:	ea e4       	ldi	r30, 0x4A	; 74
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	89 81       	ldd	r24, Y+1	; 0x01
    1818:	9a 81       	ldd	r25, Y+2	; 0x02
    181a:	91 83       	std	Z+1, r25	; 0x01
    181c:	80 83       	st	Z, r24
	} else {
		//NOTHING
	}
}
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	cf 91       	pop	r28
    1824:	df 91       	pop	r29
    1826:	08 95       	ret

00001828 <MCAL_T1_voidSetOCR1BValue>:
//SET OCR1B
void MCAL_T1_voidSetOCR1BValue(u16 LOC_u16Value) {
    1828:	df 93       	push	r29
    182a:	cf 93       	push	r28
    182c:	00 d0       	rcall	.+0      	; 0x182e <MCAL_T1_voidSetOCR1BValue+0x6>
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
    1832:	9a 83       	std	Y+2, r25	; 0x02
    1834:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u16Value <= SIXTEEN_BIT_MAX_VALUE) {
		OCR1B = LOC_u16Value;
    1836:	e8 e4       	ldi	r30, 0x48	; 72
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	89 81       	ldd	r24, Y+1	; 0x01
    183c:	9a 81       	ldd	r25, Y+2	; 0x02
    183e:	91 83       	std	Z+1, r25	; 0x01
    1840:	80 83       	st	Z, r24
	} else {
		//NOTHING
	}
}
    1842:	0f 90       	pop	r0
    1844:	0f 90       	pop	r0
    1846:	cf 91       	pop	r28
    1848:	df 91       	pop	r29
    184a:	08 95       	ret

0000184c <MCAL_T1_voidSetICR1Value>:
//SET ICR1
void MCAL_T1_voidSetICR1Value(u16 LOC_u16Value) {
    184c:	df 93       	push	r29
    184e:	cf 93       	push	r28
    1850:	00 d0       	rcall	.+0      	; 0x1852 <MCAL_T1_voidSetICR1Value+0x6>
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
    1856:	9a 83       	std	Y+2, r25	; 0x02
    1858:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u16Value <= SIXTEEN_BIT_MAX_VALUE) {
		ICR1 = LOC_u16Value;
    185a:	e6 e4       	ldi	r30, 0x46	; 70
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	89 81       	ldd	r24, Y+1	; 0x01
    1860:	9a 81       	ldd	r25, Y+2	; 0x02
    1862:	91 83       	std	Z+1, r25	; 0x01
    1864:	80 83       	st	Z, r24
	} else {
		//NOTHING
	}
}
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	cf 91       	pop	r28
    186c:	df 91       	pop	r29
    186e:	08 95       	ret

00001870 <MCAL_T1_voidGetICR1Value>:
//Get ICR1
void MCAL_T1_voidGetICR1Value(u16 *LOC_pu16Value) {
    1870:	df 93       	push	r29
    1872:	cf 93       	push	r28
    1874:	00 d0       	rcall	.+0      	; 0x1876 <MCAL_T1_voidGetICR1Value+0x6>
    1876:	cd b7       	in	r28, 0x3d	; 61
    1878:	de b7       	in	r29, 0x3e	; 62
    187a:	9a 83       	std	Y+2, r25	; 0x02
    187c:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_pu16Value) {
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	9a 81       	ldd	r25, Y+2	; 0x02
    1882:	00 97       	sbiw	r24, 0x00	; 0
    1884:	41 f0       	breq	.+16     	; 0x1896 <MCAL_T1_voidGetICR1Value+0x26>
		*LOC_pu16Value =ICR1;
    1886:	e6 e4       	ldi	r30, 0x46	; 70
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	91 81       	ldd	r25, Z+1	; 0x01
    188e:	e9 81       	ldd	r30, Y+1	; 0x01
    1890:	fa 81       	ldd	r31, Y+2	; 0x02
    1892:	91 83       	std	Z+1, r25	; 0x01
    1894:	80 83       	st	Z, r24
	}
}
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	cf 91       	pop	r28
    189c:	df 91       	pop	r29
    189e:	08 95       	ret

000018a0 <MCAL_T1_voidTCNT1_GIEEnable>:
//TCNT1 PIE
void MCAL_T1_voidTCNT1_GIEEnable(void) {
    18a0:	df 93       	push	r29
    18a2:	cf 93       	push	r28
    18a4:	cd b7       	in	r28, 0x3d	; 61
    18a6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, PIN7);
    18a8:	af e5       	ldi	r26, 0x5F	; 95
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	ef e5       	ldi	r30, 0x5F	; 95
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	80 68       	ori	r24, 0x80	; 128
    18b4:	8c 93       	st	X, r24
	SET_BIT(TIMSK, PIN2);
    18b6:	a9 e5       	ldi	r26, 0x59	; 89
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	e9 e5       	ldi	r30, 0x59	; 89
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	84 60       	ori	r24, 0x04	; 4
    18c2:	8c 93       	st	X, r24
}
    18c4:	cf 91       	pop	r28
    18c6:	df 91       	pop	r29
    18c8:	08 95       	ret

000018ca <MCAL_T1_voidTCNT1_GIEDisable>:
void MCAL_T1_voidTCNT1_GIEDisable(void) {
    18ca:	df 93       	push	r29
    18cc:	cf 93       	push	r28
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, PIN2);
    18d2:	a9 e5       	ldi	r26, 0x59	; 89
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	e9 e5       	ldi	r30, 0x59	; 89
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	8b 7f       	andi	r24, 0xFB	; 251
    18de:	8c 93       	st	X, r24
}
    18e0:	cf 91       	pop	r28
    18e2:	df 91       	pop	r29
    18e4:	08 95       	ret

000018e6 <MCAL_T1_voidOCR1B_GIEEnable>:
//OCR1B PIE
void MCAL_T1_voidOCR1B_GIEEnable(void) {
    18e6:	df 93       	push	r29
    18e8:	cf 93       	push	r28
    18ea:	cd b7       	in	r28, 0x3d	; 61
    18ec:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, PIN7);
    18ee:	af e5       	ldi	r26, 0x5F	; 95
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	ef e5       	ldi	r30, 0x5F	; 95
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	80 68       	ori	r24, 0x80	; 128
    18fa:	8c 93       	st	X, r24
	SET_BIT(TIMSK, PIN3);
    18fc:	a9 e5       	ldi	r26, 0x59	; 89
    18fe:	b0 e0       	ldi	r27, 0x00	; 0
    1900:	e9 e5       	ldi	r30, 0x59	; 89
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	88 60       	ori	r24, 0x08	; 8
    1908:	8c 93       	st	X, r24
}
    190a:	cf 91       	pop	r28
    190c:	df 91       	pop	r29
    190e:	08 95       	ret

00001910 <MCAL_T1_voidOCR1B_GIEDisable>:
void MCAL_T1_voidOCR1B_GIEDisable(void) {
    1910:	df 93       	push	r29
    1912:	cf 93       	push	r28
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, PIN3);
    1918:	a9 e5       	ldi	r26, 0x59	; 89
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	e9 e5       	ldi	r30, 0x59	; 89
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	87 7f       	andi	r24, 0xF7	; 247
    1924:	8c 93       	st	X, r24
}
    1926:	cf 91       	pop	r28
    1928:	df 91       	pop	r29
    192a:	08 95       	ret

0000192c <MCAL_T1_voidOCR1A_GIEEnable>:
//OCR1A PIE
void MCAL_T1_voidOCR1A_GIEEnable(void) {
    192c:	df 93       	push	r29
    192e:	cf 93       	push	r28
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, PIN7);
    1934:	af e5       	ldi	r26, 0x5F	; 95
    1936:	b0 e0       	ldi	r27, 0x00	; 0
    1938:	ef e5       	ldi	r30, 0x5F	; 95
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	80 68       	ori	r24, 0x80	; 128
    1940:	8c 93       	st	X, r24
	SET_BIT(TIMSK, PIN4);
    1942:	a9 e5       	ldi	r26, 0x59	; 89
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	e9 e5       	ldi	r30, 0x59	; 89
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	80 61       	ori	r24, 0x10	; 16
    194e:	8c 93       	st	X, r24
}
    1950:	cf 91       	pop	r28
    1952:	df 91       	pop	r29
    1954:	08 95       	ret

00001956 <MCAL_T1_voidOCR1A_GIEDisable>:
void MCAL_T1_voidOCR1A_GIEDisable(void) {
    1956:	df 93       	push	r29
    1958:	cf 93       	push	r28
    195a:	cd b7       	in	r28, 0x3d	; 61
    195c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, PIN4);
    195e:	a9 e5       	ldi	r26, 0x59	; 89
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	e9 e5       	ldi	r30, 0x59	; 89
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	8f 7e       	andi	r24, 0xEF	; 239
    196a:	8c 93       	st	X, r24
}
    196c:	cf 91       	pop	r28
    196e:	df 91       	pop	r29
    1970:	08 95       	ret

00001972 <MCAL_T1_voidICR1_GIEEnable>:
//ICR1 PIE
void MCAL_T1_voidICR1_GIEEnable(void) {
    1972:	df 93       	push	r29
    1974:	cf 93       	push	r28
    1976:	cd b7       	in	r28, 0x3d	; 61
    1978:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, PIN7);
    197a:	af e5       	ldi	r26, 0x5F	; 95
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	ef e5       	ldi	r30, 0x5F	; 95
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	80 68       	ori	r24, 0x80	; 128
    1986:	8c 93       	st	X, r24
	SET_BIT(TIMSK, PIN5);
    1988:	a9 e5       	ldi	r26, 0x59	; 89
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	e9 e5       	ldi	r30, 0x59	; 89
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	80 62       	ori	r24, 0x20	; 32
    1994:	8c 93       	st	X, r24
}
    1996:	cf 91       	pop	r28
    1998:	df 91       	pop	r29
    199a:	08 95       	ret

0000199c <MCAL_T1_voidICR1_GIEDisable>:
void MCAL_T1_voidICR1_GIEDisable(void) {
    199c:	df 93       	push	r29
    199e:	cf 93       	push	r28
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, PIN5);
    19a4:	a9 e5       	ldi	r26, 0x59	; 89
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	e9 e5       	ldi	r30, 0x59	; 89
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	8f 7d       	andi	r24, 0xDF	; 223
    19b0:	8c 93       	st	X, r24
}
    19b2:	cf 91       	pop	r28
    19b4:	df 91       	pop	r29
    19b6:	08 95       	ret

000019b8 <MCAL_T1_u8T1DelayNormalMode>:

u8 MCAL_T1_u8T1DelayNormalMode(u8 LOC_u8Clock_Selection,
		f32 LOC_f32NumOFSecond, u16 *LOC_pu8StartValue, u16 *LOC_pu16Counter) {
    19b8:	0f 93       	push	r16
    19ba:	1f 93       	push	r17
    19bc:	df 93       	push	r29
    19be:	cf 93       	push	r28
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
    19c4:	66 97       	sbiw	r28, 0x16	; 22
    19c6:	0f b6       	in	r0, 0x3f	; 63
    19c8:	f8 94       	cli
    19ca:	de bf       	out	0x3e, r29	; 62
    19cc:	0f be       	out	0x3f, r0	; 63
    19ce:	cd bf       	out	0x3d, r28	; 61
    19d0:	8e 87       	std	Y+14, r24	; 0x0e
    19d2:	4f 87       	std	Y+15, r20	; 0x0f
    19d4:	58 8b       	std	Y+16, r21	; 0x10
    19d6:	69 8b       	std	Y+17, r22	; 0x11
    19d8:	7a 8b       	std	Y+18, r23	; 0x12
    19da:	3c 8b       	std	Y+20, r19	; 0x14
    19dc:	2b 8b       	std	Y+19, r18	; 0x13
    19de:	1e 8b       	std	Y+22, r17	; 0x16
    19e0:	0d 8b       	std	Y+21, r16	; 0x15
	u8 LOC_u8ReturnValue = E_NOT_OK;
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	89 87       	std	Y+9, r24	; 0x09
	f32 TickTime = NUMBER_0;
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	a0 e0       	ldi	r26, 0x00	; 0
    19ec:	b0 e0       	ldi	r27, 0x00	; 0
    19ee:	8a 87       	std	Y+10, r24	; 0x0a
    19f0:	9b 87       	std	Y+11, r25	; 0x0b
    19f2:	ac 87       	std	Y+12, r26	; 0x0c
    19f4:	bd 87       	std	Y+13, r27	; 0x0d
	u32 N = NUMBER_0;
    19f6:	1d 82       	std	Y+5, r1	; 0x05
    19f8:	1e 82       	std	Y+6, r1	; 0x06
    19fa:	1f 82       	std	Y+7, r1	; 0x07
    19fc:	18 86       	std	Y+8, r1	; 0x08
	u16 counter = NUMBER_0;
    19fe:	1c 82       	std	Y+4, r1	; 0x04
    1a00:	1b 82       	std	Y+3, r1	; 0x03
	u16 Reminder = NUMBER_0;
    1a02:	1a 82       	std	Y+2, r1	; 0x02
    1a04:	19 82       	std	Y+1, r1	; 0x01
	MCAL_T1_u8T1Prescaler(LOC_u8Clock_Selection, &TickTime);
    1a06:	9e 01       	movw	r18, r28
    1a08:	26 5f       	subi	r18, 0xF6	; 246
    1a0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a0c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a0e:	b9 01       	movw	r22, r18
    1a10:	0e 94 2b 0a 	call	0x1456	; 0x1456 <MCAL_T1_u8T1Prescaler>
	if (LOC_f32NumOFSecond <= 0 || LOC_f32NumOFSecond > 0) {
    1a14:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a16:	78 89       	ldd	r23, Y+16	; 0x10
    1a18:	89 89       	ldd	r24, Y+17	; 0x11
    1a1a:	9a 89       	ldd	r25, Y+18	; 0x12
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	40 e0       	ldi	r20, 0x00	; 0
    1a22:	50 e0       	ldi	r21, 0x00	; 0
    1a24:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    1a28:	18 16       	cp	r1, r24
    1a2a:	6c f4       	brge	.+26     	; 0x1a46 <MCAL_T1_u8T1DelayNormalMode+0x8e>
    1a2c:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a2e:	78 89       	ldd	r23, Y+16	; 0x10
    1a30:	89 89       	ldd	r24, Y+17	; 0x11
    1a32:	9a 89       	ldd	r25, Y+18	; 0x12
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	40 e0       	ldi	r20, 0x00	; 0
    1a3a:	50 e0       	ldi	r21, 0x00	; 0
    1a3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a40:	18 16       	cp	r1, r24
    1a42:	0c f0       	brlt	.+2      	; 0x1a46 <MCAL_T1_u8T1DelayNormalMode+0x8e>
    1a44:	6b c0       	rjmp	.+214    	; 0x1b1c <MCAL_T1_u8T1DelayNormalMode+0x164>
		N = LOC_f32NumOFSecond / (f32) TickTime;
    1a46:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a48:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a4a:	4c 85       	ldd	r20, Y+12	; 0x0c
    1a4c:	5d 85       	ldd	r21, Y+13	; 0x0d
    1a4e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a50:	78 89       	ldd	r23, Y+16	; 0x10
    1a52:	89 89       	ldd	r24, Y+17	; 0x11
    1a54:	9a 89       	ldd	r25, Y+18	; 0x12
    1a56:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	bc 01       	movw	r22, r24
    1a60:	cd 01       	movw	r24, r26
    1a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	8d 83       	std	Y+5, r24	; 0x05
    1a6c:	9e 83       	std	Y+6, r25	; 0x06
    1a6e:	af 83       	std	Y+7, r26	; 0x07
    1a70:	b8 87       	std	Y+8, r27	; 0x08
		Reminder = N % OVER_FLOW_COUNT;
    1a72:	8d 81       	ldd	r24, Y+5	; 0x05
    1a74:	9e 81       	ldd	r25, Y+6	; 0x06
    1a76:	af 81       	ldd	r26, Y+7	; 0x07
    1a78:	b8 85       	ldd	r27, Y+8	; 0x08
    1a7a:	2f ef       	ldi	r18, 0xFF	; 255
    1a7c:	3f ef       	ldi	r19, 0xFF	; 255
    1a7e:	40 e0       	ldi	r20, 0x00	; 0
    1a80:	50 e0       	ldi	r21, 0x00	; 0
    1a82:	bc 01       	movw	r22, r24
    1a84:	cd 01       	movw	r24, r26
    1a86:	0e 94 56 27 	call	0x4eac	; 0x4eac <__udivmodsi4>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	9a 83       	std	Y+2, r25	; 0x02
    1a90:	89 83       	std	Y+1, r24	; 0x01
		*LOC_pu8StartValue = Reminder;
    1a92:	eb 89       	ldd	r30, Y+19	; 0x13
    1a94:	fc 89       	ldd	r31, Y+20	; 0x14
    1a96:	89 81       	ldd	r24, Y+1	; 0x01
    1a98:	9a 81       	ldd	r25, Y+2	; 0x02
    1a9a:	91 83       	std	Z+1, r25	; 0x01
    1a9c:	80 83       	st	Z, r24
		if (Reminder == NUMBER_0) {
    1a9e:	89 81       	ldd	r24, Y+1	; 0x01
    1aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa2:	00 97       	sbiw	r24, 0x00	; 0
    1aa4:	d9 f4       	brne	.+54     	; 0x1adc <MCAL_T1_u8T1DelayNormalMode+0x124>
			MCAL_T1_voidSetTCNT1Value(Reminder);
    1aa6:	89 81       	ldd	r24, Y+1	; 0x01
    1aa8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aaa:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <MCAL_T1_voidSetTCNT1Value>
			counter = N / OVER_FLOW_COUNT;
    1aae:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab2:	af 81       	ldd	r26, Y+7	; 0x07
    1ab4:	b8 85       	ldd	r27, Y+8	; 0x08
    1ab6:	2f ef       	ldi	r18, 0xFF	; 255
    1ab8:	3f ef       	ldi	r19, 0xFF	; 255
    1aba:	40 e0       	ldi	r20, 0x00	; 0
    1abc:	50 e0       	ldi	r21, 0x00	; 0
    1abe:	bc 01       	movw	r22, r24
    1ac0:	cd 01       	movw	r24, r26
    1ac2:	0e 94 56 27 	call	0x4eac	; 0x4eac <__udivmodsi4>
    1ac6:	da 01       	movw	r26, r20
    1ac8:	c9 01       	movw	r24, r18
    1aca:	9c 83       	std	Y+4, r25	; 0x04
    1acc:	8b 83       	std	Y+3, r24	; 0x03
			*LOC_pu16Counter = counter;
    1ace:	ed 89       	ldd	r30, Y+21	; 0x15
    1ad0:	fe 89       	ldd	r31, Y+22	; 0x16
    1ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad6:	91 83       	std	Z+1, r25	; 0x01
    1ad8:	80 83       	st	Z, r24
    1ada:	1f c0       	rjmp	.+62     	; 0x1b1a <MCAL_T1_u8T1DelayNormalMode+0x162>
		} else if (Reminder != NUMBER_0) {
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae0:	00 97       	sbiw	r24, 0x00	; 0
    1ae2:	d9 f0       	breq	.+54     	; 0x1b1a <MCAL_T1_u8T1DelayNormalMode+0x162>
			MCAL_T1_voidSetTCNT1Value(Reminder);
    1ae4:	89 81       	ldd	r24, Y+1	; 0x01
    1ae6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae8:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <MCAL_T1_voidSetTCNT1Value>
			counter = ((N / OVER_FLOW_COUNT) + NUMBER_1);
    1aec:	8d 81       	ldd	r24, Y+5	; 0x05
    1aee:	9e 81       	ldd	r25, Y+6	; 0x06
    1af0:	af 81       	ldd	r26, Y+7	; 0x07
    1af2:	b8 85       	ldd	r27, Y+8	; 0x08
    1af4:	2f ef       	ldi	r18, 0xFF	; 255
    1af6:	3f ef       	ldi	r19, 0xFF	; 255
    1af8:	40 e0       	ldi	r20, 0x00	; 0
    1afa:	50 e0       	ldi	r21, 0x00	; 0
    1afc:	bc 01       	movw	r22, r24
    1afe:	cd 01       	movw	r24, r26
    1b00:	0e 94 56 27 	call	0x4eac	; 0x4eac <__udivmodsi4>
    1b04:	da 01       	movw	r26, r20
    1b06:	c9 01       	movw	r24, r18
    1b08:	01 96       	adiw	r24, 0x01	; 1
    1b0a:	9c 83       	std	Y+4, r25	; 0x04
    1b0c:	8b 83       	std	Y+3, r24	; 0x03
			*LOC_pu16Counter = counter;
    1b0e:	ed 89       	ldd	r30, Y+21	; 0x15
    1b10:	fe 89       	ldd	r31, Y+22	; 0x16
    1b12:	8b 81       	ldd	r24, Y+3	; 0x03
    1b14:	9c 81       	ldd	r25, Y+4	; 0x04
    1b16:	91 83       	std	Z+1, r25	; 0x01
    1b18:	80 83       	st	Z, r24
		} else {
			//NOTHING
		}
		LOC_u8ReturnValue = E_OK;
    1b1a:	19 86       	std	Y+9, r1	; 0x09
	}
	return LOC_u8ReturnValue;
    1b1c:	89 85       	ldd	r24, Y+9	; 0x09

}
    1b1e:	66 96       	adiw	r28, 0x16	; 22
    1b20:	0f b6       	in	r0, 0x3f	; 63
    1b22:	f8 94       	cli
    1b24:	de bf       	out	0x3e, r29	; 62
    1b26:	0f be       	out	0x3f, r0	; 63
    1b28:	cd bf       	out	0x3d, r28	; 61
    1b2a:	cf 91       	pop	r28
    1b2c:	df 91       	pop	r29
    1b2e:	1f 91       	pop	r17
    1b30:	0f 91       	pop	r16
    1b32:	08 95       	ret

00001b34 <MCAL_T1_voidDelayCTCMode>:

void MCAL_T1_voidDelayCTCMode(u8 LOC_u8Clock_Selection,
		f32 LOC_fl32NumOFSecond, u16 *LOC_pu16Counter) {
    1b34:	df 93       	push	r29
    1b36:	cf 93       	push	r28
    1b38:	cd b7       	in	r28, 0x3d	; 61
    1b3a:	de b7       	in	r29, 0x3e	; 62
    1b3c:	61 97       	sbiw	r28, 0x11	; 17
    1b3e:	0f b6       	in	r0, 0x3f	; 63
    1b40:	f8 94       	cli
    1b42:	de bf       	out	0x3e, r29	; 62
    1b44:	0f be       	out	0x3f, r0	; 63
    1b46:	cd bf       	out	0x3d, r28	; 61
    1b48:	8b 87       	std	Y+11, r24	; 0x0b
    1b4a:	4c 87       	std	Y+12, r20	; 0x0c
    1b4c:	5d 87       	std	Y+13, r21	; 0x0d
    1b4e:	6e 87       	std	Y+14, r22	; 0x0e
    1b50:	7f 87       	std	Y+15, r23	; 0x0f
    1b52:	39 8b       	std	Y+17, r19	; 0x11
    1b54:	28 8b       	std	Y+16, r18	; 0x10
	f32 TickTime = NUMBER_0;
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	a0 e0       	ldi	r26, 0x00	; 0
    1b5c:	b0 e0       	ldi	r27, 0x00	; 0
    1b5e:	8f 83       	std	Y+7, r24	; 0x07
    1b60:	98 87       	std	Y+8, r25	; 0x08
    1b62:	a9 87       	std	Y+9, r26	; 0x09
    1b64:	ba 87       	std	Y+10, r27	; 0x0a
	f32 N = NUMBER_0;
    1b66:	80 e0       	ldi	r24, 0x00	; 0
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	a0 e0       	ldi	r26, 0x00	; 0
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	8b 83       	std	Y+3, r24	; 0x03
    1b70:	9c 83       	std	Y+4, r25	; 0x04
    1b72:	ad 83       	std	Y+5, r26	; 0x05
    1b74:	be 83       	std	Y+6, r27	; 0x06
	u16 counter = NUMBER_0;
    1b76:	1a 82       	std	Y+2, r1	; 0x02
    1b78:	19 82       	std	Y+1, r1	; 0x01
	MCAL_T1_u8T1Prescaler(LOC_u8Clock_Selection, &TickTime);
    1b7a:	9e 01       	movw	r18, r28
    1b7c:	29 5f       	subi	r18, 0xF9	; 249
    1b7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b80:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b82:	b9 01       	movw	r22, r18
    1b84:	0e 94 2b 0a 	call	0x1456	; 0x1456 <MCAL_T1_u8T1Prescaler>
	MCAL_T1_voidSetOCR1AValue(CTC_DELAY_CONST);
    1b88:	87 ec       	ldi	r24, 0xC7	; 199
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	0e 94 02 0c 	call	0x1804	; 0x1804 <MCAL_T1_voidSetOCR1AValue>
	if (LOC_fl32NumOFSecond <= 0 || LOC_fl32NumOFSecond > 0) {
    1b90:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b92:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b94:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b96:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	40 e0       	ldi	r20, 0x00	; 0
    1b9e:	50 e0       	ldi	r21, 0x00	; 0
    1ba0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    1ba4:	18 16       	cp	r1, r24
    1ba6:	64 f4       	brge	.+24     	; 0x1bc0 <MCAL_T1_voidDelayCTCMode+0x8c>
    1ba8:	6c 85       	ldd	r22, Y+12	; 0x0c
    1baa:	7d 85       	ldd	r23, Y+13	; 0x0d
    1bac:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bae:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	40 e0       	ldi	r20, 0x00	; 0
    1bb6:	50 e0       	ldi	r21, 0x00	; 0
    1bb8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bbc:	18 16       	cp	r1, r24
    1bbe:	64 f5       	brge	.+88     	; 0x1c18 <MCAL_T1_voidDelayCTCMode+0xe4>
		N = ((CTC_DELAY_CONST + NUMBER_1) * TickTime);
    1bc0:	8f 81       	ldd	r24, Y+7	; 0x07
    1bc2:	98 85       	ldd	r25, Y+8	; 0x08
    1bc4:	a9 85       	ldd	r26, Y+9	; 0x09
    1bc6:	ba 85       	ldd	r27, Y+10	; 0x0a
    1bc8:	bc 01       	movw	r22, r24
    1bca:	cd 01       	movw	r24, r26
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	48 e4       	ldi	r20, 0x48	; 72
    1bd2:	53 e4       	ldi	r21, 0x43	; 67
    1bd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	8b 83       	std	Y+3, r24	; 0x03
    1bde:	9c 83       	std	Y+4, r25	; 0x04
    1be0:	ad 83       	std	Y+5, r26	; 0x05
    1be2:	be 83       	std	Y+6, r27	; 0x06
		counter = (LOC_fl32NumOFSecond / N);
    1be4:	6c 85       	ldd	r22, Y+12	; 0x0c
    1be6:	7d 85       	ldd	r23, Y+13	; 0x0d
    1be8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bea:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bec:	2b 81       	ldd	r18, Y+3	; 0x03
    1bee:	3c 81       	ldd	r19, Y+4	; 0x04
    1bf0:	4d 81       	ldd	r20, Y+5	; 0x05
    1bf2:	5e 81       	ldd	r21, Y+6	; 0x06
    1bf4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	bc 01       	movw	r22, r24
    1bfe:	cd 01       	movw	r24, r26
    1c00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	9a 83       	std	Y+2, r25	; 0x02
    1c0a:	89 83       	std	Y+1, r24	; 0x01
		*LOC_pu16Counter = counter;
    1c0c:	e8 89       	ldd	r30, Y+16	; 0x10
    1c0e:	f9 89       	ldd	r31, Y+17	; 0x11
    1c10:	89 81       	ldd	r24, Y+1	; 0x01
    1c12:	9a 81       	ldd	r25, Y+2	; 0x02
    1c14:	91 83       	std	Z+1, r25	; 0x01
    1c16:	80 83       	st	Z, r24
	} else {
		//NOTING
	}
}
    1c18:	61 96       	adiw	r28, 0x11	; 17
    1c1a:	0f b6       	in	r0, 0x3f	; 63
    1c1c:	f8 94       	cli
    1c1e:	de bf       	out	0x3e, r29	; 62
    1c20:	0f be       	out	0x3f, r0	; 63
    1c22:	cd bf       	out	0x3d, r28	; 61
    1c24:	cf 91       	pop	r28
    1c26:	df 91       	pop	r29
    1c28:	08 95       	ret

00001c2a <MCAL_T1_voidSetTriggerEdge>:
//ICU EDGE
void MCAL_T1_voidSetTriggerEdge(u8 LOC_u8TriggerEdge) {
    1c2a:	df 93       	push	r29
    1c2c:	cf 93       	push	r28
    1c2e:	0f 92       	push	r0
    1c30:	cd b7       	in	r28, 0x3d	; 61
    1c32:	de b7       	in	r29, 0x3e	; 62
    1c34:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u8TriggerEdge <= RISING_EDGE) {
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
    1c38:	82 30       	cpi	r24, 0x02	; 2
    1c3a:	a8 f4       	brcc	.+42     	; 0x1c66 <MCAL_T1_voidSetTriggerEdge+0x3c>
		if (LOC_u8TriggerEdge == RISING_EDGE) {
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	81 30       	cpi	r24, 0x01	; 1
    1c40:	41 f4       	brne	.+16     	; 0x1c52 <MCAL_T1_voidSetTriggerEdge+0x28>
			SET_BIT(TCCR1B, PIN6);
    1c42:	ae e4       	ldi	r26, 0x4E	; 78
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	ee e4       	ldi	r30, 0x4E	; 78
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	80 64       	ori	r24, 0x40	; 64
    1c4e:	8c 93       	st	X, r24
    1c50:	0a c0       	rjmp	.+20     	; 0x1c66 <MCAL_T1_voidSetTriggerEdge+0x3c>
		} else if (LOC_u8TriggerEdge == FALLING_EDGE) {
    1c52:	89 81       	ldd	r24, Y+1	; 0x01
    1c54:	88 23       	and	r24, r24
    1c56:	39 f4       	brne	.+14     	; 0x1c66 <MCAL_T1_voidSetTriggerEdge+0x3c>
			CLR_BIT(TCCR1B, PIN6);
    1c58:	ae e4       	ldi	r26, 0x4E	; 78
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	ee e4       	ldi	r30, 0x4E	; 78
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	8f 7b       	andi	r24, 0xBF	; 191
    1c64:	8c 93       	st	X, r24
			//NOTHING
		}
	} else {
		//NOTHING
	}
}
    1c66:	0f 90       	pop	r0
    1c68:	cf 91       	pop	r28
    1c6a:	df 91       	pop	r29
    1c6c:	08 95       	ret

00001c6e <MCAL_T1_u8T1_Callback>:
u8 MCAL_T1_u8T1_Callback(void (*ptr)(void)) {
    1c6e:	df 93       	push	r29
    1c70:	cf 93       	push	r28
    1c72:	00 d0       	rcall	.+0      	; 0x1c74 <MCAL_T1_u8T1_Callback+0x6>
    1c74:	0f 92       	push	r0
    1c76:	cd b7       	in	r28, 0x3d	; 61
    1c78:	de b7       	in	r29, 0x3e	; 62
    1c7a:	9b 83       	std	Y+3, r25	; 0x03
    1c7c:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_u8ReturnValue = E_NOT_OK;
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	89 83       	std	Y+1, r24	; 0x01
	if (ptr != '\0') {
    1c82:	8a 81       	ldd	r24, Y+2	; 0x02
    1c84:	9b 81       	ldd	r25, Y+3	; 0x03
    1c86:	00 97       	sbiw	r24, 0x00	; 0
    1c88:	39 f0       	breq	.+14     	; 0x1c98 <MCAL_T1_u8T1_Callback+0x2a>
		Gptr_3 = ptr;
    1c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c8e:	90 93 7b 01 	sts	0x017B, r25
    1c92:	80 93 7a 01 	sts	0x017A, r24
		LOC_u8ReturnValue = E_OK;
    1c96:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_u8ReturnValue;
    1c98:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c9a:	0f 90       	pop	r0
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	cf 91       	pop	r28
    1ca2:	df 91       	pop	r29
    1ca4:	08 95       	ret

00001ca6 <__vector_9>:

ISR(TIMER1_OVF_vect) {
    1ca6:	1f 92       	push	r1
    1ca8:	0f 92       	push	r0
    1caa:	0f b6       	in	r0, 0x3f	; 63
    1cac:	0f 92       	push	r0
    1cae:	11 24       	eor	r1, r1
    1cb0:	2f 93       	push	r18
    1cb2:	3f 93       	push	r19
    1cb4:	4f 93       	push	r20
    1cb6:	5f 93       	push	r21
    1cb8:	6f 93       	push	r22
    1cba:	7f 93       	push	r23
    1cbc:	8f 93       	push	r24
    1cbe:	9f 93       	push	r25
    1cc0:	af 93       	push	r26
    1cc2:	bf 93       	push	r27
    1cc4:	ef 93       	push	r30
    1cc6:	ff 93       	push	r31
    1cc8:	df 93       	push	r29
    1cca:	cf 93       	push	r28
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
	if (Gptr_3 != '\0') {
    1cd0:	80 91 7a 01 	lds	r24, 0x017A
    1cd4:	90 91 7b 01 	lds	r25, 0x017B
    1cd8:	00 97       	sbiw	r24, 0x00	; 0
    1cda:	29 f0       	breq	.+10     	; 0x1ce6 <__vector_9+0x40>
		Gptr_3();
    1cdc:	e0 91 7a 01 	lds	r30, 0x017A
    1ce0:	f0 91 7b 01 	lds	r31, 0x017B
    1ce4:	09 95       	icall
	}
}
    1ce6:	cf 91       	pop	r28
    1ce8:	df 91       	pop	r29
    1cea:	ff 91       	pop	r31
    1cec:	ef 91       	pop	r30
    1cee:	bf 91       	pop	r27
    1cf0:	af 91       	pop	r26
    1cf2:	9f 91       	pop	r25
    1cf4:	8f 91       	pop	r24
    1cf6:	7f 91       	pop	r23
    1cf8:	6f 91       	pop	r22
    1cfa:	5f 91       	pop	r21
    1cfc:	4f 91       	pop	r20
    1cfe:	3f 91       	pop	r19
    1d00:	2f 91       	pop	r18
    1d02:	0f 90       	pop	r0
    1d04:	0f be       	out	0x3f, r0	; 63
    1d06:	0f 90       	pop	r0
    1d08:	1f 90       	pop	r1
    1d0a:	18 95       	reti

00001d0c <TIMER1_COMPA_vect>:
ISR(TIMER1_COMPA_vect) {
    1d0c:	1f 92       	push	r1
    1d0e:	0f 92       	push	r0
    1d10:	0f b6       	in	r0, 0x3f	; 63
    1d12:	0f 92       	push	r0
    1d14:	11 24       	eor	r1, r1
    1d16:	2f 93       	push	r18
    1d18:	3f 93       	push	r19
    1d1a:	4f 93       	push	r20
    1d1c:	5f 93       	push	r21
    1d1e:	6f 93       	push	r22
    1d20:	7f 93       	push	r23
    1d22:	8f 93       	push	r24
    1d24:	9f 93       	push	r25
    1d26:	af 93       	push	r26
    1d28:	bf 93       	push	r27
    1d2a:	ef 93       	push	r30
    1d2c:	ff 93       	push	r31
    1d2e:	df 93       	push	r29
    1d30:	cf 93       	push	r28
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
	if (Gptr_3 != '\0') {
    1d36:	80 91 7a 01 	lds	r24, 0x017A
    1d3a:	90 91 7b 01 	lds	r25, 0x017B
    1d3e:	00 97       	sbiw	r24, 0x00	; 0
    1d40:	29 f0       	breq	.+10     	; 0x1d4c <TIMER1_COMPA_vect+0x40>
		Gptr_3();
    1d42:	e0 91 7a 01 	lds	r30, 0x017A
    1d46:	f0 91 7b 01 	lds	r31, 0x017B
    1d4a:	09 95       	icall
	}
}
    1d4c:	cf 91       	pop	r28
    1d4e:	df 91       	pop	r29
    1d50:	ff 91       	pop	r31
    1d52:	ef 91       	pop	r30
    1d54:	bf 91       	pop	r27
    1d56:	af 91       	pop	r26
    1d58:	9f 91       	pop	r25
    1d5a:	8f 91       	pop	r24
    1d5c:	7f 91       	pop	r23
    1d5e:	6f 91       	pop	r22
    1d60:	5f 91       	pop	r21
    1d62:	4f 91       	pop	r20
    1d64:	3f 91       	pop	r19
    1d66:	2f 91       	pop	r18
    1d68:	0f 90       	pop	r0
    1d6a:	0f be       	out	0x3f, r0	; 63
    1d6c:	0f 90       	pop	r0
    1d6e:	1f 90       	pop	r1
    1d70:	18 95       	reti

00001d72 <__vector_8>:
ISR(TIMER1_COMPB_vect) {
    1d72:	1f 92       	push	r1
    1d74:	0f 92       	push	r0
    1d76:	0f b6       	in	r0, 0x3f	; 63
    1d78:	0f 92       	push	r0
    1d7a:	11 24       	eor	r1, r1
    1d7c:	2f 93       	push	r18
    1d7e:	3f 93       	push	r19
    1d80:	4f 93       	push	r20
    1d82:	5f 93       	push	r21
    1d84:	6f 93       	push	r22
    1d86:	7f 93       	push	r23
    1d88:	8f 93       	push	r24
    1d8a:	9f 93       	push	r25
    1d8c:	af 93       	push	r26
    1d8e:	bf 93       	push	r27
    1d90:	ef 93       	push	r30
    1d92:	ff 93       	push	r31
    1d94:	df 93       	push	r29
    1d96:	cf 93       	push	r28
    1d98:	cd b7       	in	r28, 0x3d	; 61
    1d9a:	de b7       	in	r29, 0x3e	; 62
	if (Gptr_3 != '\0') {
    1d9c:	80 91 7a 01 	lds	r24, 0x017A
    1da0:	90 91 7b 01 	lds	r25, 0x017B
    1da4:	00 97       	sbiw	r24, 0x00	; 0
    1da6:	29 f0       	breq	.+10     	; 0x1db2 <__vector_8+0x40>
		Gptr_3();
    1da8:	e0 91 7a 01 	lds	r30, 0x017A
    1dac:	f0 91 7b 01 	lds	r31, 0x017B
    1db0:	09 95       	icall
	}
}
    1db2:	cf 91       	pop	r28
    1db4:	df 91       	pop	r29
    1db6:	ff 91       	pop	r31
    1db8:	ef 91       	pop	r30
    1dba:	bf 91       	pop	r27
    1dbc:	af 91       	pop	r26
    1dbe:	9f 91       	pop	r25
    1dc0:	8f 91       	pop	r24
    1dc2:	7f 91       	pop	r23
    1dc4:	6f 91       	pop	r22
    1dc6:	5f 91       	pop	r21
    1dc8:	4f 91       	pop	r20
    1dca:	3f 91       	pop	r19
    1dcc:	2f 91       	pop	r18
    1dce:	0f 90       	pop	r0
    1dd0:	0f be       	out	0x3f, r0	; 63
    1dd2:	0f 90       	pop	r0
    1dd4:	1f 90       	pop	r1
    1dd6:	18 95       	reti

00001dd8 <__vector_6>:
ISR(TIMER1_CAPT_vect) {
    1dd8:	1f 92       	push	r1
    1dda:	0f 92       	push	r0
    1ddc:	0f b6       	in	r0, 0x3f	; 63
    1dde:	0f 92       	push	r0
    1de0:	11 24       	eor	r1, r1
    1de2:	2f 93       	push	r18
    1de4:	3f 93       	push	r19
    1de6:	4f 93       	push	r20
    1de8:	5f 93       	push	r21
    1dea:	6f 93       	push	r22
    1dec:	7f 93       	push	r23
    1dee:	8f 93       	push	r24
    1df0:	9f 93       	push	r25
    1df2:	af 93       	push	r26
    1df4:	bf 93       	push	r27
    1df6:	ef 93       	push	r30
    1df8:	ff 93       	push	r31
    1dfa:	df 93       	push	r29
    1dfc:	cf 93       	push	r28
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
	if (Gptr_3 != '\0') {
    1e02:	80 91 7a 01 	lds	r24, 0x017A
    1e06:	90 91 7b 01 	lds	r25, 0x017B
    1e0a:	00 97       	sbiw	r24, 0x00	; 0
    1e0c:	29 f0       	breq	.+10     	; 0x1e18 <__vector_6+0x40>
		Gptr_3();
    1e0e:	e0 91 7a 01 	lds	r30, 0x017A
    1e12:	f0 91 7b 01 	lds	r31, 0x017B
    1e16:	09 95       	icall
	}
}
    1e18:	cf 91       	pop	r28
    1e1a:	df 91       	pop	r29
    1e1c:	ff 91       	pop	r31
    1e1e:	ef 91       	pop	r30
    1e20:	bf 91       	pop	r27
    1e22:	af 91       	pop	r26
    1e24:	9f 91       	pop	r25
    1e26:	8f 91       	pop	r24
    1e28:	7f 91       	pop	r23
    1e2a:	6f 91       	pop	r22
    1e2c:	5f 91       	pop	r21
    1e2e:	4f 91       	pop	r20
    1e30:	3f 91       	pop	r19
    1e32:	2f 91       	pop	r18
    1e34:	0f 90       	pop	r0
    1e36:	0f be       	out	0x3f, r0	; 63
    1e38:	0f 90       	pop	r0
    1e3a:	1f 90       	pop	r1
    1e3c:	18 95       	reti

00001e3e <MCAL_T1_FPWM_10bitRES>:

void MCAL_T1_FPWM_10bitRES(u8 copy_u8Channel, u8 copy_u8Duty) {
    1e3e:	0f 93       	push	r16
    1e40:	1f 93       	push	r17
    1e42:	df 93       	push	r29
    1e44:	cf 93       	push	r28
    1e46:	00 d0       	rcall	.+0      	; 0x1e48 <MCAL_T1_FPWM_10bitRES+0xa>
    1e48:	00 d0       	rcall	.+0      	; 0x1e4a <MCAL_T1_FPWM_10bitRES+0xc>
    1e4a:	00 d0       	rcall	.+0      	; 0x1e4c <MCAL_T1_FPWM_10bitRES+0xe>
    1e4c:	cd b7       	in	r28, 0x3d	; 61
    1e4e:	de b7       	in	r29, 0x3e	; 62
    1e50:	8d 83       	std	Y+5, r24	; 0x05
    1e52:	6e 83       	std	Y+6, r22	; 0x06
	f32 LOC_fl32tickTime = 0;
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	a0 e0       	ldi	r26, 0x00	; 0
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	89 83       	std	Y+1, r24	; 0x01
    1e5e:	9a 83       	std	Y+2, r25	; 0x02
    1e60:	ab 83       	std	Y+3, r26	; 0x03
    1e62:	bc 83       	std	Y+4, r27	; 0x04
	//Set Mode
	MCAL_T1_u8T1Init(PWM_PHASE_CORRECT_10bit);
    1e64:	83 e0       	ldi	r24, 0x03	; 3
    1e66:	0e 94 0a 08 	call	0x1014	; 0x1014 <MCAL_T1_u8T1Init>
	//Select Prescaler
	MCAL_T1_u8T1Prescaler(PRESCALLING_64, &LOC_fl32tickTime);
    1e6a:	83 e0       	ldi	r24, 0x03	; 3
    1e6c:	9e 01       	movw	r18, r28
    1e6e:	2f 5f       	subi	r18, 0xFF	; 255
    1e70:	3f 4f       	sbci	r19, 0xFF	; 255
    1e72:	b9 01       	movw	r22, r18
    1e74:	0e 94 2b 0a 	call	0x1456	; 0x1456 <MCAL_T1_u8T1Prescaler>
	MCAL_T1_u8T1CompareOutputMode(NON_INVERTING_MODE, copy_u8Channel);
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	6d 81       	ldd	r22, Y+5	; 0x05
    1e7c:	0e 94 43 0b 	call	0x1686	; 0x1686 <MCAL_T1_u8T1CompareOutputMode>
	if (copy_u8Channel == CHENNEL_A) {
    1e80:	8d 81       	ldd	r24, Y+5	; 0x05
    1e82:	88 23       	and	r24, r24
    1e84:	19 f5       	brne	.+70     	; 0x1ecc <MCAL_T1_FPWM_10bitRES+0x8e>
		OCR1A = copy_u8Duty * 10.23;
    1e86:	0a e4       	ldi	r16, 0x4A	; 74
    1e88:	10 e0       	ldi	r17, 0x00	; 0
    1e8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e8c:	88 2f       	mov	r24, r24
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	aa 27       	eor	r26, r26
    1e92:	97 fd       	sbrc	r25, 7
    1e94:	a0 95       	com	r26
    1e96:	ba 2f       	mov	r27, r26
    1e98:	bc 01       	movw	r22, r24
    1e9a:	cd 01       	movw	r24, r26
    1e9c:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	bc 01       	movw	r22, r24
    1ea6:	cd 01       	movw	r24, r26
    1ea8:	24 e1       	ldi	r18, 0x14	; 20
    1eaa:	3e ea       	ldi	r19, 0xAE	; 174
    1eac:	43 e2       	ldi	r20, 0x23	; 35
    1eae:	51 e4       	ldi	r21, 0x41	; 65
    1eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	bc 01       	movw	r22, r24
    1eba:	cd 01       	movw	r24, r26
    1ebc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	cb 01       	movw	r24, r22
    1ec4:	f8 01       	movw	r30, r16
    1ec6:	91 83       	std	Z+1, r25	; 0x01
    1ec8:	80 83       	st	Z, r24
    1eca:	25 c0       	rjmp	.+74     	; 0x1f16 <MCAL_T1_FPWM_10bitRES+0xd8>
	} else if (copy_u8Channel == CHENNEL_B) {
    1ecc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ece:	81 30       	cpi	r24, 0x01	; 1
    1ed0:	11 f5       	brne	.+68     	; 0x1f16 <MCAL_T1_FPWM_10bitRES+0xd8>
		OCR1B = copy_u8Duty * 10.23;
    1ed2:	08 e4       	ldi	r16, 0x48	; 72
    1ed4:	10 e0       	ldi	r17, 0x00	; 0
    1ed6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ed8:	88 2f       	mov	r24, r24
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	aa 27       	eor	r26, r26
    1ede:	97 fd       	sbrc	r25, 7
    1ee0:	a0 95       	com	r26
    1ee2:	ba 2f       	mov	r27, r26
    1ee4:	bc 01       	movw	r22, r24
    1ee6:	cd 01       	movw	r24, r26
    1ee8:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	bc 01       	movw	r22, r24
    1ef2:	cd 01       	movw	r24, r26
    1ef4:	24 e1       	ldi	r18, 0x14	; 20
    1ef6:	3e ea       	ldi	r19, 0xAE	; 174
    1ef8:	43 e2       	ldi	r20, 0x23	; 35
    1efa:	51 e4       	ldi	r21, 0x41	; 65
    1efc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f00:	dc 01       	movw	r26, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	bc 01       	movw	r22, r24
    1f06:	cd 01       	movw	r24, r26
    1f08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	cb 01       	movw	r24, r22
    1f10:	f8 01       	movw	r30, r16
    1f12:	91 83       	std	Z+1, r25	; 0x01
    1f14:	80 83       	st	Z, r24

	} else {
		//NOTHING
	}
}
    1f16:	26 96       	adiw	r28, 0x06	; 6
    1f18:	0f b6       	in	r0, 0x3f	; 63
    1f1a:	f8 94       	cli
    1f1c:	de bf       	out	0x3e, r29	; 62
    1f1e:	0f be       	out	0x3f, r0	; 63
    1f20:	cd bf       	out	0x3d, r28	; 61
    1f22:	cf 91       	pop	r28
    1f24:	df 91       	pop	r29
    1f26:	1f 91       	pop	r17
    1f28:	0f 91       	pop	r16
    1f2a:	08 95       	ret

00001f2c <MCAL_Timer0_Init>:
void (*Gptr3)(void)= '\0' ;
f32 Glob_TickTime;
u16 Start = 0;
u16 Counter = 0;

void MCAL_Timer0_Init(u8 Loc_u8Mode, u8 Loc_u8Prescaller,u8 Loc_u8OC0Mode) {
    1f2c:	df 93       	push	r29
    1f2e:	cf 93       	push	r28
    1f30:	00 d0       	rcall	.+0      	; 0x1f32 <MCAL_Timer0_Init+0x6>
    1f32:	00 d0       	rcall	.+0      	; 0x1f34 <MCAL_Timer0_Init+0x8>
    1f34:	cd b7       	in	r28, 0x3d	; 61
    1f36:	de b7       	in	r29, 0x3e	; 62
    1f38:	8a 83       	std	Y+2, r24	; 0x02
    1f3a:	6b 83       	std	Y+3, r22	; 0x03
    1f3c:	4c 83       	std	Y+4, r20	; 0x04
	u8 LOC_u8ReturnValue = E_NOT_OK;
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(SREG, 7);
    1f42:	af e5       	ldi	r26, 0x5F	; 95
    1f44:	b0 e0       	ldi	r27, 0x00	; 0
    1f46:	ef e5       	ldi	r30, 0x5F	; 95
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	80 81       	ld	r24, Z
    1f4c:	80 68       	ori	r24, 0x80	; 128
    1f4e:	8c 93       	st	X, r24
	if (Loc_u8Mode == Normal_Mode) {
    1f50:	8a 81       	ldd	r24, Y+2	; 0x02
    1f52:	88 23       	and	r24, r24
    1f54:	b1 f4       	brne	.+44     	; 0x1f82 <MCAL_Timer0_Init+0x56>
		CLR_BIT(TCCR0, 3);
    1f56:	a3 e5       	ldi	r26, 0x53	; 83
    1f58:	b0 e0       	ldi	r27, 0x00	; 0
    1f5a:	e3 e5       	ldi	r30, 0x53	; 83
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	80 81       	ld	r24, Z
    1f60:	87 7f       	andi	r24, 0xF7	; 247
    1f62:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 6);
    1f64:	a3 e5       	ldi	r26, 0x53	; 83
    1f66:	b0 e0       	ldi	r27, 0x00	; 0
    1f68:	e3 e5       	ldi	r30, 0x53	; 83
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	8f 7b       	andi	r24, 0xBF	; 191
    1f70:	8c 93       	st	X, r24
		SET_BIT(TIMSK, 0);
    1f72:	a9 e5       	ldi	r26, 0x59	; 89
    1f74:	b0 e0       	ldi	r27, 0x00	; 0
    1f76:	e9 e5       	ldi	r30, 0x59	; 89
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	80 81       	ld	r24, Z
    1f7c:	81 60       	ori	r24, 0x01	; 1
    1f7e:	8c 93       	st	X, r24
    1f80:	35 c0       	rjmp	.+106    	; 0x1fec <MCAL_Timer0_Init+0xc0>
	} else if (Loc_u8Mode == CTC_Mode) {
    1f82:	8a 81       	ldd	r24, Y+2	; 0x02
    1f84:	81 30       	cpi	r24, 0x01	; 1
    1f86:	b1 f4       	brne	.+44     	; 0x1fb4 <MCAL_Timer0_Init+0x88>
		SET_BIT(TCCR0, 3);
    1f88:	a3 e5       	ldi	r26, 0x53	; 83
    1f8a:	b0 e0       	ldi	r27, 0x00	; 0
    1f8c:	e3 e5       	ldi	r30, 0x53	; 83
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	80 81       	ld	r24, Z
    1f92:	88 60       	ori	r24, 0x08	; 8
    1f94:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 6);
    1f96:	a3 e5       	ldi	r26, 0x53	; 83
    1f98:	b0 e0       	ldi	r27, 0x00	; 0
    1f9a:	e3 e5       	ldi	r30, 0x53	; 83
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	80 81       	ld	r24, Z
    1fa0:	8f 7b       	andi	r24, 0xBF	; 191
    1fa2:	8c 93       	st	X, r24
		SET_BIT(TIMSK, 1);
    1fa4:	a9 e5       	ldi	r26, 0x59	; 89
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	e9 e5       	ldi	r30, 0x59	; 89
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	82 60       	ori	r24, 0x02	; 2
    1fb0:	8c 93       	st	X, r24
    1fb2:	1c c0       	rjmp	.+56     	; 0x1fec <MCAL_Timer0_Init+0xc0>
	} else if (Loc_u8Mode == PWM_Mode) {
    1fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb6:	82 30       	cpi	r24, 0x02	; 2
    1fb8:	79 f4       	brne	.+30     	; 0x1fd8 <MCAL_Timer0_Init+0xac>
		CLR_BIT(TCCR0, 3);
    1fba:	a3 e5       	ldi	r26, 0x53	; 83
    1fbc:	b0 e0       	ldi	r27, 0x00	; 0
    1fbe:	e3 e5       	ldi	r30, 0x53	; 83
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	80 81       	ld	r24, Z
    1fc4:	87 7f       	andi	r24, 0xF7	; 247
    1fc6:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 6);
    1fc8:	a3 e5       	ldi	r26, 0x53	; 83
    1fca:	b0 e0       	ldi	r27, 0x00	; 0
    1fcc:	e3 e5       	ldi	r30, 0x53	; 83
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	80 81       	ld	r24, Z
    1fd2:	80 64       	ori	r24, 0x40	; 64
    1fd4:	8c 93       	st	X, r24
    1fd6:	0a c0       	rjmp	.+20     	; 0x1fec <MCAL_Timer0_Init+0xc0>
	} else if (Loc_u8Mode == FastPWM_Mode) {
    1fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fda:	83 30       	cpi	r24, 0x03	; 3
    1fdc:	39 f4       	brne	.+14     	; 0x1fec <MCAL_Timer0_Init+0xc0>
//		SET_BIT(TCCR0, 3);
//		SET_BIT(TCCR0, 6);
		SET_BIT(TIMSK, 1);
    1fde:	a9 e5       	ldi	r26, 0x59	; 89
    1fe0:	b0 e0       	ldi	r27, 0x00	; 0
    1fe2:	e9 e5       	ldi	r30, 0x59	; 89
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	80 81       	ld	r24, Z
    1fe8:	82 60       	ori	r24, 0x02	; 2
    1fea:	8c 93       	st	X, r24
	}
	if (Loc_u8Prescaller == NoPrescaller) {
    1fec:	8b 81       	ldd	r24, Y+3	; 0x03
    1fee:	88 23       	and	r24, r24
    1ff0:	b9 f4       	brne	.+46     	; 0x2020 <MCAL_Timer0_Init+0xf4>
		CLR_BIT(TCCR0, 0);
    1ff2:	a3 e5       	ldi	r26, 0x53	; 83
    1ff4:	b0 e0       	ldi	r27, 0x00	; 0
    1ff6:	e3 e5       	ldi	r30, 0x53	; 83
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	80 81       	ld	r24, Z
    1ffc:	8e 7f       	andi	r24, 0xFE	; 254
    1ffe:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 1);
    2000:	a3 e5       	ldi	r26, 0x53	; 83
    2002:	b0 e0       	ldi	r27, 0x00	; 0
    2004:	e3 e5       	ldi	r30, 0x53	; 83
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
    200a:	8d 7f       	andi	r24, 0xFD	; 253
    200c:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 2);
    200e:	a3 e5       	ldi	r26, 0x53	; 83
    2010:	b0 e0       	ldi	r27, 0x00	; 0
    2012:	e3 e5       	ldi	r30, 0x53	; 83
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	80 81       	ld	r24, Z
    2018:	8b 7f       	andi	r24, 0xFB	; 251
    201a:	8c 93       	st	X, r24
		LOC_u8ReturnValue = E_OK;
    201c:	19 82       	std	Y+1, r1	; 0x01
    201e:	f1 c0       	rjmp	.+482    	; 0x2202 <MCAL_Timer0_Init+0x2d6>
	} else if (Loc_u8Prescaller == Prescaller_1) {
    2020:	8b 81       	ldd	r24, Y+3	; 0x03
    2022:	81 30       	cpi	r24, 0x01	; 1
    2024:	19 f5       	brne	.+70     	; 0x206c <MCAL_Timer0_Init+0x140>
		SET_BIT(TCCR0, 0);
    2026:	a3 e5       	ldi	r26, 0x53	; 83
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	e3 e5       	ldi	r30, 0x53	; 83
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	81 60       	ori	r24, 0x01	; 1
    2032:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 1);
    2034:	a3 e5       	ldi	r26, 0x53	; 83
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	e3 e5       	ldi	r30, 0x53	; 83
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	8d 7f       	andi	r24, 0xFD	; 253
    2040:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 2);
    2042:	a3 e5       	ldi	r26, 0x53	; 83
    2044:	b0 e0       	ldi	r27, 0x00	; 0
    2046:	e3 e5       	ldi	r30, 0x53	; 83
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	80 81       	ld	r24, Z
    204c:	8b 7f       	andi	r24, 0xFB	; 251
    204e:	8c 93       	st	X, r24
		Glob_TickTime = Prescaller1_Value / (f32) CPU_Frequancy;
    2050:	8d eb       	ldi	r24, 0xBD	; 189
    2052:	97 e3       	ldi	r25, 0x37	; 55
    2054:	a6 e0       	ldi	r26, 0x06	; 6
    2056:	b4 e3       	ldi	r27, 0x34	; 52
    2058:	80 93 99 01 	sts	0x0199, r24
    205c:	90 93 9a 01 	sts	0x019A, r25
    2060:	a0 93 9b 01 	sts	0x019B, r26
    2064:	b0 93 9c 01 	sts	0x019C, r27
		LOC_u8ReturnValue = E_OK;
    2068:	19 82       	std	Y+1, r1	; 0x01
    206a:	cb c0       	rjmp	.+406    	; 0x2202 <MCAL_Timer0_Init+0x2d6>
	} else if (Loc_u8Prescaller == Prescaller_8) {
    206c:	8b 81       	ldd	r24, Y+3	; 0x03
    206e:	82 30       	cpi	r24, 0x02	; 2
    2070:	19 f5       	brne	.+70     	; 0x20b8 <MCAL_Timer0_Init+0x18c>
		CLR_BIT(TCCR0, 0);
    2072:	a3 e5       	ldi	r26, 0x53	; 83
    2074:	b0 e0       	ldi	r27, 0x00	; 0
    2076:	e3 e5       	ldi	r30, 0x53	; 83
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	80 81       	ld	r24, Z
    207c:	8e 7f       	andi	r24, 0xFE	; 254
    207e:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 1);
    2080:	a3 e5       	ldi	r26, 0x53	; 83
    2082:	b0 e0       	ldi	r27, 0x00	; 0
    2084:	e3 e5       	ldi	r30, 0x53	; 83
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	80 81       	ld	r24, Z
    208a:	82 60       	ori	r24, 0x02	; 2
    208c:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 2);
    208e:	a3 e5       	ldi	r26, 0x53	; 83
    2090:	b0 e0       	ldi	r27, 0x00	; 0
    2092:	e3 e5       	ldi	r30, 0x53	; 83
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	80 81       	ld	r24, Z
    2098:	8b 7f       	andi	r24, 0xFB	; 251
    209a:	8c 93       	st	X, r24
		Glob_TickTime = Prescaller8_Value / (f32) CPU_Frequancy;
    209c:	8d eb       	ldi	r24, 0xBD	; 189
    209e:	97 e3       	ldi	r25, 0x37	; 55
    20a0:	a6 e8       	ldi	r26, 0x86	; 134
    20a2:	b5 e3       	ldi	r27, 0x35	; 53
    20a4:	80 93 99 01 	sts	0x0199, r24
    20a8:	90 93 9a 01 	sts	0x019A, r25
    20ac:	a0 93 9b 01 	sts	0x019B, r26
    20b0:	b0 93 9c 01 	sts	0x019C, r27
		LOC_u8ReturnValue = E_OK;
    20b4:	19 82       	std	Y+1, r1	; 0x01
    20b6:	a5 c0       	rjmp	.+330    	; 0x2202 <MCAL_Timer0_Init+0x2d6>
	} else if (Loc_u8Prescaller == Prescaller_64) {
    20b8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ba:	83 30       	cpi	r24, 0x03	; 3
    20bc:	19 f5       	brne	.+70     	; 0x2104 <MCAL_Timer0_Init+0x1d8>
		SET_BIT(TCCR0, 0);
    20be:	a3 e5       	ldi	r26, 0x53	; 83
    20c0:	b0 e0       	ldi	r27, 0x00	; 0
    20c2:	e3 e5       	ldi	r30, 0x53	; 83
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	80 81       	ld	r24, Z
    20c8:	81 60       	ori	r24, 0x01	; 1
    20ca:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 1);
    20cc:	a3 e5       	ldi	r26, 0x53	; 83
    20ce:	b0 e0       	ldi	r27, 0x00	; 0
    20d0:	e3 e5       	ldi	r30, 0x53	; 83
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	80 81       	ld	r24, Z
    20d6:	82 60       	ori	r24, 0x02	; 2
    20d8:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 2);
    20da:	a3 e5       	ldi	r26, 0x53	; 83
    20dc:	b0 e0       	ldi	r27, 0x00	; 0
    20de:	e3 e5       	ldi	r30, 0x53	; 83
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	80 81       	ld	r24, Z
    20e4:	8b 7f       	andi	r24, 0xFB	; 251
    20e6:	8c 93       	st	X, r24
		Glob_TickTime = Prescaller64_Value / (f32) CPU_Frequancy;
    20e8:	8d eb       	ldi	r24, 0xBD	; 189
    20ea:	97 e3       	ldi	r25, 0x37	; 55
    20ec:	a6 e0       	ldi	r26, 0x06	; 6
    20ee:	b7 e3       	ldi	r27, 0x37	; 55
    20f0:	80 93 99 01 	sts	0x0199, r24
    20f4:	90 93 9a 01 	sts	0x019A, r25
    20f8:	a0 93 9b 01 	sts	0x019B, r26
    20fc:	b0 93 9c 01 	sts	0x019C, r27
		LOC_u8ReturnValue = E_OK;
    2100:	19 82       	std	Y+1, r1	; 0x01
    2102:	7f c0       	rjmp	.+254    	; 0x2202 <MCAL_Timer0_Init+0x2d6>
	} else if (Loc_u8Prescaller == Prescaller_256) {
    2104:	8b 81       	ldd	r24, Y+3	; 0x03
    2106:	84 30       	cpi	r24, 0x04	; 4
    2108:	19 f5       	brne	.+70     	; 0x2150 <MCAL_Timer0_Init+0x224>
		CLR_BIT(TCCR0, 0);
    210a:	a3 e5       	ldi	r26, 0x53	; 83
    210c:	b0 e0       	ldi	r27, 0x00	; 0
    210e:	e3 e5       	ldi	r30, 0x53	; 83
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	80 81       	ld	r24, Z
    2114:	8e 7f       	andi	r24, 0xFE	; 254
    2116:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 1);
    2118:	a3 e5       	ldi	r26, 0x53	; 83
    211a:	b0 e0       	ldi	r27, 0x00	; 0
    211c:	e3 e5       	ldi	r30, 0x53	; 83
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	8d 7f       	andi	r24, 0xFD	; 253
    2124:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 2);
    2126:	a3 e5       	ldi	r26, 0x53	; 83
    2128:	b0 e0       	ldi	r27, 0x00	; 0
    212a:	e3 e5       	ldi	r30, 0x53	; 83
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	80 81       	ld	r24, Z
    2130:	84 60       	ori	r24, 0x04	; 4
    2132:	8c 93       	st	X, r24
		Glob_TickTime = Prescaller256_Value / (f32) CPU_Frequancy;
    2134:	8d eb       	ldi	r24, 0xBD	; 189
    2136:	97 e3       	ldi	r25, 0x37	; 55
    2138:	a6 e0       	ldi	r26, 0x06	; 6
    213a:	b8 e3       	ldi	r27, 0x38	; 56
    213c:	80 93 99 01 	sts	0x0199, r24
    2140:	90 93 9a 01 	sts	0x019A, r25
    2144:	a0 93 9b 01 	sts	0x019B, r26
    2148:	b0 93 9c 01 	sts	0x019C, r27
		LOC_u8ReturnValue = E_OK;
    214c:	19 82       	std	Y+1, r1	; 0x01
    214e:	59 c0       	rjmp	.+178    	; 0x2202 <MCAL_Timer0_Init+0x2d6>
	} else if (Loc_u8Prescaller == Prescaller_1024) {
    2150:	8b 81       	ldd	r24, Y+3	; 0x03
    2152:	85 30       	cpi	r24, 0x05	; 5
    2154:	19 f5       	brne	.+70     	; 0x219c <MCAL_Timer0_Init+0x270>
		SET_BIT(TCCR0, 0);
    2156:	a3 e5       	ldi	r26, 0x53	; 83
    2158:	b0 e0       	ldi	r27, 0x00	; 0
    215a:	e3 e5       	ldi	r30, 0x53	; 83
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	80 81       	ld	r24, Z
    2160:	81 60       	ori	r24, 0x01	; 1
    2162:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 1);
    2164:	a3 e5       	ldi	r26, 0x53	; 83
    2166:	b0 e0       	ldi	r27, 0x00	; 0
    2168:	e3 e5       	ldi	r30, 0x53	; 83
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	80 81       	ld	r24, Z
    216e:	8d 7f       	andi	r24, 0xFD	; 253
    2170:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 2);
    2172:	a3 e5       	ldi	r26, 0x53	; 83
    2174:	b0 e0       	ldi	r27, 0x00	; 0
    2176:	e3 e5       	ldi	r30, 0x53	; 83
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	80 81       	ld	r24, Z
    217c:	84 60       	ori	r24, 0x04	; 4
    217e:	8c 93       	st	X, r24
		Glob_TickTime = Prescaller1024_Value / (f32) CPU_Frequancy;
    2180:	8d eb       	ldi	r24, 0xBD	; 189
    2182:	97 e3       	ldi	r25, 0x37	; 55
    2184:	a6 e0       	ldi	r26, 0x06	; 6
    2186:	b9 e3       	ldi	r27, 0x39	; 57
    2188:	80 93 99 01 	sts	0x0199, r24
    218c:	90 93 9a 01 	sts	0x019A, r25
    2190:	a0 93 9b 01 	sts	0x019B, r26
    2194:	b0 93 9c 01 	sts	0x019C, r27
		LOC_u8ReturnValue = E_OK;
    2198:	19 82       	std	Y+1, r1	; 0x01
    219a:	33 c0       	rjmp	.+102    	; 0x2202 <MCAL_Timer0_Init+0x2d6>
	} else if (Loc_u8Prescaller == Clock_on_falling_edge) {
    219c:	8b 81       	ldd	r24, Y+3	; 0x03
    219e:	86 30       	cpi	r24, 0x06	; 6
    21a0:	b9 f4       	brne	.+46     	; 0x21d0 <MCAL_Timer0_Init+0x2a4>
		CLR_BIT(TCCR0, 0);
    21a2:	a3 e5       	ldi	r26, 0x53	; 83
    21a4:	b0 e0       	ldi	r27, 0x00	; 0
    21a6:	e3 e5       	ldi	r30, 0x53	; 83
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	80 81       	ld	r24, Z
    21ac:	8e 7f       	andi	r24, 0xFE	; 254
    21ae:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 1);
    21b0:	a3 e5       	ldi	r26, 0x53	; 83
    21b2:	b0 e0       	ldi	r27, 0x00	; 0
    21b4:	e3 e5       	ldi	r30, 0x53	; 83
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	80 81       	ld	r24, Z
    21ba:	82 60       	ori	r24, 0x02	; 2
    21bc:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 2);
    21be:	a3 e5       	ldi	r26, 0x53	; 83
    21c0:	b0 e0       	ldi	r27, 0x00	; 0
    21c2:	e3 e5       	ldi	r30, 0x53	; 83
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	80 81       	ld	r24, Z
    21c8:	84 60       	ori	r24, 0x04	; 4
    21ca:	8c 93       	st	X, r24
		LOC_u8ReturnValue = E_OK;
    21cc:	19 82       	std	Y+1, r1	; 0x01
    21ce:	19 c0       	rjmp	.+50     	; 0x2202 <MCAL_Timer0_Init+0x2d6>
	} else if (Loc_u8Prescaller == Clock_on_rising_edge) {
    21d0:	8b 81       	ldd	r24, Y+3	; 0x03
    21d2:	87 30       	cpi	r24, 0x07	; 7
    21d4:	b1 f4       	brne	.+44     	; 0x2202 <MCAL_Timer0_Init+0x2d6>
		SET_BIT(TCCR0, 0);
    21d6:	a3 e5       	ldi	r26, 0x53	; 83
    21d8:	b0 e0       	ldi	r27, 0x00	; 0
    21da:	e3 e5       	ldi	r30, 0x53	; 83
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	80 81       	ld	r24, Z
    21e0:	81 60       	ori	r24, 0x01	; 1
    21e2:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 1);
    21e4:	a3 e5       	ldi	r26, 0x53	; 83
    21e6:	b0 e0       	ldi	r27, 0x00	; 0
    21e8:	e3 e5       	ldi	r30, 0x53	; 83
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	80 81       	ld	r24, Z
    21ee:	82 60       	ori	r24, 0x02	; 2
    21f0:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 2);
    21f2:	a3 e5       	ldi	r26, 0x53	; 83
    21f4:	b0 e0       	ldi	r27, 0x00	; 0
    21f6:	e3 e5       	ldi	r30, 0x53	; 83
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	80 81       	ld	r24, Z
    21fc:	84 60       	ori	r24, 0x04	; 4
    21fe:	8c 93       	st	X, r24
		LOC_u8ReturnValue = E_OK;
    2200:	19 82       	std	Y+1, r1	; 0x01
	} else {
		//NOTHING
	}
	if (Loc_u8OC0Mode == Disconnected) {
    2202:	8c 81       	ldd	r24, Y+4	; 0x04
    2204:	88 23       	and	r24, r24
    2206:	79 f4       	brne	.+30     	; 0x2226 <MCAL_Timer0_Init+0x2fa>
			CLR_BIT(TCCR0, 4);
    2208:	a3 e5       	ldi	r26, 0x53	; 83
    220a:	b0 e0       	ldi	r27, 0x00	; 0
    220c:	e3 e5       	ldi	r30, 0x53	; 83
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	80 81       	ld	r24, Z
    2212:	8f 7e       	andi	r24, 0xEF	; 239
    2214:	8c 93       	st	X, r24
			CLR_BIT(TCCR0, 5);
    2216:	a3 e5       	ldi	r26, 0x53	; 83
    2218:	b0 e0       	ldi	r27, 0x00	; 0
    221a:	e3 e5       	ldi	r30, 0x53	; 83
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	80 81       	ld	r24, Z
    2220:	8f 7d       	andi	r24, 0xDF	; 223
    2222:	8c 93       	st	X, r24
    2224:	43 c0       	rjmp	.+134    	; 0x22ac <MCAL_Timer0_Init+0x380>
		} else if (Loc_u8OC0Mode == Reserved) {
    2226:	8c 81       	ldd	r24, Y+4	; 0x04
    2228:	81 30       	cpi	r24, 0x01	; 1
    222a:	79 f4       	brne	.+30     	; 0x224a <MCAL_Timer0_Init+0x31e>
			SET_BIT(TCCR0, 4);
    222c:	a3 e5       	ldi	r26, 0x53	; 83
    222e:	b0 e0       	ldi	r27, 0x00	; 0
    2230:	e3 e5       	ldi	r30, 0x53	; 83
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 81       	ld	r24, Z
    2236:	80 61       	ori	r24, 0x10	; 16
    2238:	8c 93       	st	X, r24
			CLR_BIT(TCCR0, 5);
    223a:	a3 e5       	ldi	r26, 0x53	; 83
    223c:	b0 e0       	ldi	r27, 0x00	; 0
    223e:	e3 e5       	ldi	r30, 0x53	; 83
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	80 81       	ld	r24, Z
    2244:	8f 7d       	andi	r24, 0xDF	; 223
    2246:	8c 93       	st	X, r24
    2248:	31 c0       	rjmp	.+98     	; 0x22ac <MCAL_Timer0_Init+0x380>
			//PWM, Fast PWM
		} else if (Loc_u8OC0Mode == Non_Inverted) {
    224a:	8c 81       	ldd	r24, Y+4	; 0x04
    224c:	82 30       	cpi	r24, 0x02	; 2
    224e:	b1 f4       	brne	.+44     	; 0x227c <MCAL_Timer0_Init+0x350>
			SET_BIT(TCCR0, 5);
    2250:	a3 e5       	ldi	r26, 0x53	; 83
    2252:	b0 e0       	ldi	r27, 0x00	; 0
    2254:	e3 e5       	ldi	r30, 0x53	; 83
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	80 62       	ori	r24, 0x20	; 32
    225c:	8c 93       	st	X, r24
			CLR_BIT(TCCR0, 4);
    225e:	a3 e5       	ldi	r26, 0x53	; 83
    2260:	b0 e0       	ldi	r27, 0x00	; 0
    2262:	e3 e5       	ldi	r30, 0x53	; 83
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	80 81       	ld	r24, Z
    2268:	8f 7e       	andi	r24, 0xEF	; 239
    226a:	8c 93       	st	X, r24
			// OC0
			SET_BIT(DDRB, 3);
    226c:	a7 e3       	ldi	r26, 0x37	; 55
    226e:	b0 e0       	ldi	r27, 0x00	; 0
    2270:	e7 e3       	ldi	r30, 0x37	; 55
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	80 81       	ld	r24, Z
    2276:	88 60       	ori	r24, 0x08	; 8
    2278:	8c 93       	st	X, r24
    227a:	18 c0       	rjmp	.+48     	; 0x22ac <MCAL_Timer0_Init+0x380>
			//PWM, Fast PWM
		} else if (Loc_u8OC0Mode == Inverted) {
    227c:	8c 81       	ldd	r24, Y+4	; 0x04
    227e:	83 30       	cpi	r24, 0x03	; 3
    2280:	a9 f4       	brne	.+42     	; 0x22ac <MCAL_Timer0_Init+0x380>
			SET_BIT(TCCR0, 4);
    2282:	a3 e5       	ldi	r26, 0x53	; 83
    2284:	b0 e0       	ldi	r27, 0x00	; 0
    2286:	e3 e5       	ldi	r30, 0x53	; 83
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	80 81       	ld	r24, Z
    228c:	80 61       	ori	r24, 0x10	; 16
    228e:	8c 93       	st	X, r24
			SET_BIT(TCCR0, 5);
    2290:	a3 e5       	ldi	r26, 0x53	; 83
    2292:	b0 e0       	ldi	r27, 0x00	; 0
    2294:	e3 e5       	ldi	r30, 0x53	; 83
    2296:	f0 e0       	ldi	r31, 0x00	; 0
    2298:	80 81       	ld	r24, Z
    229a:	80 62       	ori	r24, 0x20	; 32
    229c:	8c 93       	st	X, r24
			// OC0
			SET_BIT(DDRB, 3);
    229e:	a7 e3       	ldi	r26, 0x37	; 55
    22a0:	b0 e0       	ldi	r27, 0x00	; 0
    22a2:	e7 e3       	ldi	r30, 0x37	; 55
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	80 81       	ld	r24, Z
    22a8:	88 60       	ori	r24, 0x08	; 8
    22aa:	8c 93       	st	X, r24
		}
}
    22ac:	0f 90       	pop	r0
    22ae:	0f 90       	pop	r0
    22b0:	0f 90       	pop	r0
    22b2:	0f 90       	pop	r0
    22b4:	cf 91       	pop	r28
    22b6:	df 91       	pop	r29
    22b8:	08 95       	ret

000022ba <MCAL_Timer0_SetPreloadValue>:
void MCAL_Timer0_SetPreloadValue(u8 Loc_u8Value) {
    22ba:	df 93       	push	r29
    22bc:	cf 93       	push	r28
    22be:	0f 92       	push	r0
    22c0:	cd b7       	in	r28, 0x3d	; 61
    22c2:	de b7       	in	r29, 0x3e	; 62
    22c4:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Loc_u8Value;
    22c6:	e2 e5       	ldi	r30, 0x52	; 82
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	89 81       	ldd	r24, Y+1	; 0x01
    22cc:	80 83       	st	Z, r24
}
    22ce:	0f 90       	pop	r0
    22d0:	cf 91       	pop	r28
    22d2:	df 91       	pop	r29
    22d4:	08 95       	ret

000022d6 <MCAL_Timer0_SetCompareValue>:
void MCAL_Timer0_SetCompareValue(u8 Loc_u8Value) {
    22d6:	df 93       	push	r29
    22d8:	cf 93       	push	r28
    22da:	0f 92       	push	r0
    22dc:	cd b7       	in	r28, 0x3d	; 61
    22de:	de b7       	in	r29, 0x3e	; 62
    22e0:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Loc_u8Value;
    22e2:	ec e5       	ldi	r30, 0x5C	; 92
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	89 81       	ldd	r24, Y+1	; 0x01
    22e8:	80 83       	st	Z, r24
}
    22ea:	0f 90       	pop	r0
    22ec:	cf 91       	pop	r28
    22ee:	df 91       	pop	r29
    22f0:	08 95       	ret

000022f2 <MCAL_Timer0_EnableNormalMode>:
void MCAL_Timer0_EnableNormalMode() {
    22f2:	df 93       	push	r29
    22f4:	cf 93       	push	r28
    22f6:	cd b7       	in	r28, 0x3d	; 61
    22f8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, 0);
    22fa:	a9 e5       	ldi	r26, 0x59	; 89
    22fc:	b0 e0       	ldi	r27, 0x00	; 0
    22fe:	e9 e5       	ldi	r30, 0x59	; 89
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	80 81       	ld	r24, Z
    2304:	81 60       	ori	r24, 0x01	; 1
    2306:	8c 93       	st	X, r24
}
    2308:	cf 91       	pop	r28
    230a:	df 91       	pop	r29
    230c:	08 95       	ret

0000230e <MCAL_Timer0_DisableNormalMode>:
void MCAL_Timer0_DisableNormalMode() {
    230e:	df 93       	push	r29
    2310:	cf 93       	push	r28
    2312:	cd b7       	in	r28, 0x3d	; 61
    2314:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, 0);
    2316:	a9 e5       	ldi	r26, 0x59	; 89
    2318:	b0 e0       	ldi	r27, 0x00	; 0
    231a:	e9 e5       	ldi	r30, 0x59	; 89
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	80 81       	ld	r24, Z
    2320:	8e 7f       	andi	r24, 0xFE	; 254
    2322:	8c 93       	st	X, r24
}
    2324:	cf 91       	pop	r28
    2326:	df 91       	pop	r29
    2328:	08 95       	ret

0000232a <MCAL_Timer0_EnableCTCMode>:
void MCAL_Timer0_EnableCTCMode() {
    232a:	df 93       	push	r29
    232c:	cf 93       	push	r28
    232e:	cd b7       	in	r28, 0x3d	; 61
    2330:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, 1);
    2332:	a9 e5       	ldi	r26, 0x59	; 89
    2334:	b0 e0       	ldi	r27, 0x00	; 0
    2336:	e9 e5       	ldi	r30, 0x59	; 89
    2338:	f0 e0       	ldi	r31, 0x00	; 0
    233a:	80 81       	ld	r24, Z
    233c:	82 60       	ori	r24, 0x02	; 2
    233e:	8c 93       	st	X, r24
}
    2340:	cf 91       	pop	r28
    2342:	df 91       	pop	r29
    2344:	08 95       	ret

00002346 <MCAL_Timer0_DisableCTCMode>:
void MCAL_Timer0_DisableCTCMode() {
    2346:	df 93       	push	r29
    2348:	cf 93       	push	r28
    234a:	cd b7       	in	r28, 0x3d	; 61
    234c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, 1);
    234e:	a9 e5       	ldi	r26, 0x59	; 89
    2350:	b0 e0       	ldi	r27, 0x00	; 0
    2352:	e9 e5       	ldi	r30, 0x59	; 89
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	80 81       	ld	r24, Z
    2358:	8d 7f       	andi	r24, 0xFD	; 253
    235a:	8c 93       	st	X, r24
}
    235c:	cf 91       	pop	r28
    235e:	df 91       	pop	r29
    2360:	08 95       	ret

00002362 <MCAL_Timer0_Delayms_NormalMode>:

void MCAL_Timer0_Delayms_NormalMode(u32 Loc_u32MilliSeconds) {
    2362:	df 93       	push	r29
    2364:	cf 93       	push	r28
    2366:	cd b7       	in	r28, 0x3d	; 61
    2368:	de b7       	in	r29, 0x3e	; 62
    236a:	28 97       	sbiw	r28, 0x08	; 8
    236c:	0f b6       	in	r0, 0x3f	; 63
    236e:	f8 94       	cli
    2370:	de bf       	out	0x3e, r29	; 62
    2372:	0f be       	out	0x3f, r0	; 63
    2374:	cd bf       	out	0x3d, r28	; 61
    2376:	6d 83       	std	Y+5, r22	; 0x05
    2378:	7e 83       	std	Y+6, r23	; 0x06
    237a:	8f 83       	std	Y+7, r24	; 0x07
    237c:	98 87       	std	Y+8, r25	; 0x08
	u32 N = 0;
    237e:	19 82       	std	Y+1, r1	; 0x01
    2380:	1a 82       	std	Y+2, r1	; 0x02
    2382:	1b 82       	std	Y+3, r1	; 0x03
    2384:	1c 82       	std	Y+4, r1	; 0x04
	N = (Loc_u32MilliSeconds / 1000.0) / (f32) Glob_TickTime;
    2386:	6d 81       	ldd	r22, Y+5	; 0x05
    2388:	7e 81       	ldd	r23, Y+6	; 0x06
    238a:	8f 81       	ldd	r24, Y+7	; 0x07
    238c:	98 85       	ldd	r25, Y+8	; 0x08
    238e:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	bc 01       	movw	r22, r24
    2398:	cd 01       	movw	r24, r26
    239a:	20 e0       	ldi	r18, 0x00	; 0
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	4a e7       	ldi	r20, 0x7A	; 122
    23a0:	54 e4       	ldi	r21, 0x44	; 68
    23a2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	20 91 99 01 	lds	r18, 0x0199
    23ae:	30 91 9a 01 	lds	r19, 0x019A
    23b2:	40 91 9b 01 	lds	r20, 0x019B
    23b6:	50 91 9c 01 	lds	r21, 0x019C
    23ba:	bc 01       	movw	r22, r24
    23bc:	cd 01       	movw	r24, r26
    23be:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	bc 01       	movw	r22, r24
    23c8:	cd 01       	movw	r24, r26
    23ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	89 83       	std	Y+1, r24	; 0x01
    23d4:	9a 83       	std	Y+2, r25	; 0x02
    23d6:	ab 83       	std	Y+3, r26	; 0x03
    23d8:	bc 83       	std	Y+4, r27	; 0x04
	Start = N % 256;
    23da:	89 81       	ldd	r24, Y+1	; 0x01
    23dc:	9a 81       	ldd	r25, Y+2	; 0x02
    23de:	90 70       	andi	r25, 0x00	; 0
    23e0:	90 93 81 01 	sts	0x0181, r25
    23e4:	80 93 80 01 	sts	0x0180, r24
	if (Start == 0) {
    23e8:	80 91 80 01 	lds	r24, 0x0180
    23ec:	90 91 81 01 	lds	r25, 0x0181
    23f0:	00 97       	sbiw	r24, 0x00	; 0
    23f2:	99 f4       	brne	.+38     	; 0x241a <MCAL_Timer0_Delayms_NormalMode+0xb8>
		MCAL_Timer0_SetPreloadValue(Start);
    23f4:	80 91 80 01 	lds	r24, 0x0180
    23f8:	90 91 81 01 	lds	r25, 0x0181
    23fc:	0e 94 5d 11 	call	0x22ba	; 0x22ba <MCAL_Timer0_SetPreloadValue>
		Counter = N / 256;
    2400:	89 81       	ldd	r24, Y+1	; 0x01
    2402:	9a 81       	ldd	r25, Y+2	; 0x02
    2404:	ab 81       	ldd	r26, Y+3	; 0x03
    2406:	bc 81       	ldd	r27, Y+4	; 0x04
    2408:	89 2f       	mov	r24, r25
    240a:	9a 2f       	mov	r25, r26
    240c:	ab 2f       	mov	r26, r27
    240e:	bb 27       	eor	r27, r27
    2410:	90 93 83 01 	sts	0x0183, r25
    2414:	80 93 82 01 	sts	0x0182, r24
    2418:	19 c0       	rjmp	.+50     	; 0x244c <MCAL_Timer0_Delayms_NormalMode+0xea>
	} else if (Start != 0) {
    241a:	80 91 80 01 	lds	r24, 0x0180
    241e:	90 91 81 01 	lds	r25, 0x0181
    2422:	00 97       	sbiw	r24, 0x00	; 0
    2424:	99 f0       	breq	.+38     	; 0x244c <MCAL_Timer0_Delayms_NormalMode+0xea>
		MCAL_Timer0_SetPreloadValue(Start);
    2426:	80 91 80 01 	lds	r24, 0x0180
    242a:	90 91 81 01 	lds	r25, 0x0181
    242e:	0e 94 5d 11 	call	0x22ba	; 0x22ba <MCAL_Timer0_SetPreloadValue>
		Counter = ((N / 256) + 1);
    2432:	89 81       	ldd	r24, Y+1	; 0x01
    2434:	9a 81       	ldd	r25, Y+2	; 0x02
    2436:	ab 81       	ldd	r26, Y+3	; 0x03
    2438:	bc 81       	ldd	r27, Y+4	; 0x04
    243a:	89 2f       	mov	r24, r25
    243c:	9a 2f       	mov	r25, r26
    243e:	ab 2f       	mov	r26, r27
    2440:	bb 27       	eor	r27, r27
    2442:	01 96       	adiw	r24, 0x01	; 1
    2444:	90 93 83 01 	sts	0x0183, r25
    2448:	80 93 82 01 	sts	0x0182, r24
	} else {
		//NOTHING
	}
}
    244c:	28 96       	adiw	r28, 0x08	; 8
    244e:	0f b6       	in	r0, 0x3f	; 63
    2450:	f8 94       	cli
    2452:	de bf       	out	0x3e, r29	; 62
    2454:	0f be       	out	0x3f, r0	; 63
    2456:	cd bf       	out	0x3d, r28	; 61
    2458:	cf 91       	pop	r28
    245a:	df 91       	pop	r29
    245c:	08 95       	ret

0000245e <MCAL_Timer0_Delayms_CTCMode>:
void MCAL_Timer0_Delayms_CTCMode(u32 Loc_u32MilliSeconds) {
    245e:	df 93       	push	r29
    2460:	cf 93       	push	r28
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
    2466:	29 97       	sbiw	r28, 0x09	; 9
    2468:	0f b6       	in	r0, 0x3f	; 63
    246a:	f8 94       	cli
    246c:	de bf       	out	0x3e, r29	; 62
    246e:	0f be       	out	0x3f, r0	; 63
    2470:	cd bf       	out	0x3d, r28	; 61
    2472:	6e 83       	std	Y+6, r22	; 0x06
    2474:	7f 83       	std	Y+7, r23	; 0x07
    2476:	88 87       	std	Y+8, r24	; 0x08
    2478:	99 87       	std	Y+9, r25	; 0x09
	u8 LOC_u8ReturnValue = E_NOT_OK;
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	8d 83       	std	Y+5, r24	; 0x05
	f32 N = 0;
    247e:	80 e0       	ldi	r24, 0x00	; 0
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	a0 e0       	ldi	r26, 0x00	; 0
    2484:	b0 e0       	ldi	r27, 0x00	; 0
    2486:	89 83       	std	Y+1, r24	; 0x01
    2488:	9a 83       	std	Y+2, r25	; 0x02
    248a:	ab 83       	std	Y+3, r26	; 0x03
    248c:	bc 83       	std	Y+4, r27	; 0x04
	MCAL_Timer0_SetCompareValue(CompareStartValue);
    248e:	87 ec       	ldi	r24, 0xC7	; 199
    2490:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <MCAL_Timer0_SetCompareValue>
	N = ((CompareStartValue + 1) * Glob_TickTime);
    2494:	80 91 99 01 	lds	r24, 0x0199
    2498:	90 91 9a 01 	lds	r25, 0x019A
    249c:	a0 91 9b 01 	lds	r26, 0x019B
    24a0:	b0 91 9c 01 	lds	r27, 0x019C
    24a4:	bc 01       	movw	r22, r24
    24a6:	cd 01       	movw	r24, r26
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	48 e4       	ldi	r20, 0x48	; 72
    24ae:	53 e4       	ldi	r21, 0x43	; 67
    24b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	89 83       	std	Y+1, r24	; 0x01
    24ba:	9a 83       	std	Y+2, r25	; 0x02
    24bc:	ab 83       	std	Y+3, r26	; 0x03
    24be:	bc 83       	std	Y+4, r27	; 0x04
	Counter = ((Loc_u32MilliSeconds/1000.0) / N);
    24c0:	6e 81       	ldd	r22, Y+6	; 0x06
    24c2:	7f 81       	ldd	r23, Y+7	; 0x07
    24c4:	88 85       	ldd	r24, Y+8	; 0x08
    24c6:	99 85       	ldd	r25, Y+9	; 0x09
    24c8:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	bc 01       	movw	r22, r24
    24d2:	cd 01       	movw	r24, r26
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	4a e7       	ldi	r20, 0x7A	; 122
    24da:	54 e4       	ldi	r21, 0x44	; 68
    24dc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    24e0:	dc 01       	movw	r26, r24
    24e2:	cb 01       	movw	r24, r22
    24e4:	bc 01       	movw	r22, r24
    24e6:	cd 01       	movw	r24, r26
    24e8:	29 81       	ldd	r18, Y+1	; 0x01
    24ea:	3a 81       	ldd	r19, Y+2	; 0x02
    24ec:	4b 81       	ldd	r20, Y+3	; 0x03
    24ee:	5c 81       	ldd	r21, Y+4	; 0x04
    24f0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    24f4:	dc 01       	movw	r26, r24
    24f6:	cb 01       	movw	r24, r22
    24f8:	bc 01       	movw	r22, r24
    24fa:	cd 01       	movw	r24, r26
    24fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	90 93 83 01 	sts	0x0183, r25
    2508:	80 93 82 01 	sts	0x0182, r24

	LOC_u8ReturnValue = E_OK;
    250c:	1d 82       	std	Y+5, r1	; 0x05
}
    250e:	29 96       	adiw	r28, 0x09	; 9
    2510:	0f b6       	in	r0, 0x3f	; 63
    2512:	f8 94       	cli
    2514:	de bf       	out	0x3e, r29	; 62
    2516:	0f be       	out	0x3f, r0	; 63
    2518:	cd bf       	out	0x3d, r28	; 61
    251a:	cf 91       	pop	r28
    251c:	df 91       	pop	r29
    251e:	08 95       	ret

00002520 <MCAL_Timer0_CallBack>:

void MCAL_Timer0_CallBack(void (*ptr)(void)) {
    2520:	df 93       	push	r29
    2522:	cf 93       	push	r28
    2524:	00 d0       	rcall	.+0      	; 0x2526 <MCAL_Timer0_CallBack+0x6>
    2526:	cd b7       	in	r28, 0x3d	; 61
    2528:	de b7       	in	r29, 0x3e	; 62
    252a:	9a 83       	std	Y+2, r25	; 0x02
    252c:	89 83       	std	Y+1, r24	; 0x01
	if (ptr != '\0')
    252e:	89 81       	ldd	r24, Y+1	; 0x01
    2530:	9a 81       	ldd	r25, Y+2	; 0x02
    2532:	00 97       	sbiw	r24, 0x00	; 0
    2534:	31 f0       	breq	.+12     	; 0x2542 <MCAL_Timer0_CallBack+0x22>
		Gptr3 = ptr;
    2536:	89 81       	ldd	r24, Y+1	; 0x01
    2538:	9a 81       	ldd	r25, Y+2	; 0x02
    253a:	90 93 7f 01 	sts	0x017F, r25
    253e:	80 93 7e 01 	sts	0x017E, r24
}
    2542:	0f 90       	pop	r0
    2544:	0f 90       	pop	r0
    2546:	cf 91       	pop	r28
    2548:	df 91       	pop	r29
    254a:	08 95       	ret

0000254c <__vector_11>:

ISR(TIMER0_OVF_vect) {
    254c:	1f 92       	push	r1
    254e:	0f 92       	push	r0
    2550:	0f b6       	in	r0, 0x3f	; 63
    2552:	0f 92       	push	r0
    2554:	11 24       	eor	r1, r1
    2556:	2f 93       	push	r18
    2558:	3f 93       	push	r19
    255a:	4f 93       	push	r20
    255c:	5f 93       	push	r21
    255e:	6f 93       	push	r22
    2560:	7f 93       	push	r23
    2562:	8f 93       	push	r24
    2564:	9f 93       	push	r25
    2566:	af 93       	push	r26
    2568:	bf 93       	push	r27
    256a:	ef 93       	push	r30
    256c:	ff 93       	push	r31
    256e:	df 93       	push	r29
    2570:	cf 93       	push	r28
    2572:	cd b7       	in	r28, 0x3d	; 61
    2574:	de b7       	in	r29, 0x3e	; 62
	if (Gptr3 != '\0')
    2576:	80 91 7e 01 	lds	r24, 0x017E
    257a:	90 91 7f 01 	lds	r25, 0x017F
    257e:	00 97       	sbiw	r24, 0x00	; 0
    2580:	29 f0       	breq	.+10     	; 0x258c <__vector_11+0x40>
		Gptr3();
    2582:	e0 91 7e 01 	lds	r30, 0x017E
    2586:	f0 91 7f 01 	lds	r31, 0x017F
    258a:	09 95       	icall
	Glob_u16OvfCounter++;
    258c:	80 91 7c 01 	lds	r24, 0x017C
    2590:	90 91 7d 01 	lds	r25, 0x017D
    2594:	01 96       	adiw	r24, 0x01	; 1
    2596:	90 93 7d 01 	sts	0x017D, r25
    259a:	80 93 7c 01 	sts	0x017C, r24
}
    259e:	cf 91       	pop	r28
    25a0:	df 91       	pop	r29
    25a2:	ff 91       	pop	r31
    25a4:	ef 91       	pop	r30
    25a6:	bf 91       	pop	r27
    25a8:	af 91       	pop	r26
    25aa:	9f 91       	pop	r25
    25ac:	8f 91       	pop	r24
    25ae:	7f 91       	pop	r23
    25b0:	6f 91       	pop	r22
    25b2:	5f 91       	pop	r21
    25b4:	4f 91       	pop	r20
    25b6:	3f 91       	pop	r19
    25b8:	2f 91       	pop	r18
    25ba:	0f 90       	pop	r0
    25bc:	0f be       	out	0x3f, r0	; 63
    25be:	0f 90       	pop	r0
    25c0:	1f 90       	pop	r1
    25c2:	18 95       	reti

000025c4 <__vector_10>:
ISR(TIMER0_COMP_vect) {
    25c4:	1f 92       	push	r1
    25c6:	0f 92       	push	r0
    25c8:	0f b6       	in	r0, 0x3f	; 63
    25ca:	0f 92       	push	r0
    25cc:	11 24       	eor	r1, r1
    25ce:	2f 93       	push	r18
    25d0:	3f 93       	push	r19
    25d2:	4f 93       	push	r20
    25d4:	5f 93       	push	r21
    25d6:	6f 93       	push	r22
    25d8:	7f 93       	push	r23
    25da:	8f 93       	push	r24
    25dc:	9f 93       	push	r25
    25de:	af 93       	push	r26
    25e0:	bf 93       	push	r27
    25e2:	ef 93       	push	r30
    25e4:	ff 93       	push	r31
    25e6:	df 93       	push	r29
    25e8:	cf 93       	push	r28
    25ea:	cd b7       	in	r28, 0x3d	; 61
    25ec:	de b7       	in	r29, 0x3e	; 62
	if (Gptr3 != '\0')
    25ee:	80 91 7e 01 	lds	r24, 0x017E
    25f2:	90 91 7f 01 	lds	r25, 0x017F
    25f6:	00 97       	sbiw	r24, 0x00	; 0
    25f8:	29 f0       	breq	.+10     	; 0x2604 <__vector_10+0x40>
		Gptr3();
    25fa:	e0 91 7e 01 	lds	r30, 0x017E
    25fe:	f0 91 7f 01 	lds	r31, 0x017F
    2602:	09 95       	icall
}
    2604:	cf 91       	pop	r28
    2606:	df 91       	pop	r29
    2608:	ff 91       	pop	r31
    260a:	ef 91       	pop	r30
    260c:	bf 91       	pop	r27
    260e:	af 91       	pop	r26
    2610:	9f 91       	pop	r25
    2612:	8f 91       	pop	r24
    2614:	7f 91       	pop	r23
    2616:	6f 91       	pop	r22
    2618:	5f 91       	pop	r21
    261a:	4f 91       	pop	r20
    261c:	3f 91       	pop	r19
    261e:	2f 91       	pop	r18
    2620:	0f 90       	pop	r0
    2622:	0f be       	out	0x3f, r0	; 63
    2624:	0f 90       	pop	r0
    2626:	1f 90       	pop	r1
    2628:	18 95       	reti

0000262a <MCAL_Interrupt_u8SetRegister>:

void (*Gptr0)(void)= '\0' ;
void (*Gptr1)(void)= '\0' ;
void (*Gptr2)(void)= '\0' ;

void MCAL_Interrupt_u8SetRegister(u8 Loc_u8PortID, u8 Loc_u8PortValue) {
    262a:	df 93       	push	r29
    262c:	cf 93       	push	r28
    262e:	00 d0       	rcall	.+0      	; 0x2630 <MCAL_Interrupt_u8SetRegister+0x6>
    2630:	cd b7       	in	r28, 0x3d	; 61
    2632:	de b7       	in	r29, 0x3e	; 62
    2634:	89 83       	std	Y+1, r24	; 0x01
    2636:	6a 83       	std	Y+2, r22	; 0x02
	if (Loc_u8PortValue == PORT_OUTPUT) {
    2638:	8a 81       	ldd	r24, Y+2	; 0x02
    263a:	8f 3f       	cpi	r24, 0xFF	; 255
    263c:	09 f5       	brne	.+66     	; 0x2680 <MCAL_Interrupt_u8SetRegister+0x56>
		if (Loc_u8PortID == Sreg) {
    263e:	89 81       	ldd	r24, Y+1	; 0x01
    2640:	88 23       	and	r24, r24
    2642:	29 f4       	brne	.+10     	; 0x264e <MCAL_Interrupt_u8SetRegister+0x24>
			SREG = PORT_OUTPUT;
    2644:	ef e5       	ldi	r30, 0x5F	; 95
    2646:	f0 e0       	ldi	r31, 0x00	; 0
    2648:	8f ef       	ldi	r24, 0xFF	; 255
    264a:	80 83       	st	Z, r24
    264c:	57 c0       	rjmp	.+174    	; 0x26fc <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Gicr) {
    264e:	89 81       	ldd	r24, Y+1	; 0x01
    2650:	81 30       	cpi	r24, 0x01	; 1
    2652:	29 f4       	brne	.+10     	; 0x265e <MCAL_Interrupt_u8SetRegister+0x34>
			GICR = PORT_OUTPUT;
    2654:	eb e5       	ldi	r30, 0x5B	; 91
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	8f ef       	ldi	r24, 0xFF	; 255
    265a:	80 83       	st	Z, r24
    265c:	4f c0       	rjmp	.+158    	; 0x26fc <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Mcucr) {
    265e:	89 81       	ldd	r24, Y+1	; 0x01
    2660:	82 30       	cpi	r24, 0x02	; 2
    2662:	29 f4       	brne	.+10     	; 0x266e <MCAL_Interrupt_u8SetRegister+0x44>
			MCUCR = PORT_OUTPUT;
    2664:	e5 e5       	ldi	r30, 0x55	; 85
    2666:	f0 e0       	ldi	r31, 0x00	; 0
    2668:	8f ef       	ldi	r24, 0xFF	; 255
    266a:	80 83       	st	Z, r24
    266c:	47 c0       	rjmp	.+142    	; 0x26fc <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Mcucsr) {
    266e:	89 81       	ldd	r24, Y+1	; 0x01
    2670:	83 30       	cpi	r24, 0x03	; 3
    2672:	09 f0       	breq	.+2      	; 0x2676 <MCAL_Interrupt_u8SetRegister+0x4c>
    2674:	43 c0       	rjmp	.+134    	; 0x26fc <MCAL_Interrupt_u8SetRegister+0xd2>
			MCUCSR = PORT_OUTPUT;
    2676:	e4 e5       	ldi	r30, 0x54	; 84
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	8f ef       	ldi	r24, 0xFF	; 255
    267c:	80 83       	st	Z, r24
    267e:	3e c0       	rjmp	.+124    	; 0x26fc <MCAL_Interrupt_u8SetRegister+0xd2>
		} else {
			//Do Nothing
		}
	} else if (Loc_u8PortValue == PORT_INPUT) {
    2680:	8a 81       	ldd	r24, Y+2	; 0x02
    2682:	88 23       	and	r24, r24
    2684:	e1 f4       	brne	.+56     	; 0x26be <MCAL_Interrupt_u8SetRegister+0x94>
		if (Loc_u8PortID == Sreg) {
    2686:	89 81       	ldd	r24, Y+1	; 0x01
    2688:	88 23       	and	r24, r24
    268a:	21 f4       	brne	.+8      	; 0x2694 <MCAL_Interrupt_u8SetRegister+0x6a>
			SREG = PORT_INPUT;
    268c:	ef e5       	ldi	r30, 0x5F	; 95
    268e:	f0 e0       	ldi	r31, 0x00	; 0
    2690:	10 82       	st	Z, r1
    2692:	34 c0       	rjmp	.+104    	; 0x26fc <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Gicr) {
    2694:	89 81       	ldd	r24, Y+1	; 0x01
    2696:	81 30       	cpi	r24, 0x01	; 1
    2698:	21 f4       	brne	.+8      	; 0x26a2 <MCAL_Interrupt_u8SetRegister+0x78>
			GICR = PORT_INPUT;
    269a:	eb e5       	ldi	r30, 0x5B	; 91
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	10 82       	st	Z, r1
    26a0:	2d c0       	rjmp	.+90     	; 0x26fc <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Mcucr) {
    26a2:	89 81       	ldd	r24, Y+1	; 0x01
    26a4:	82 30       	cpi	r24, 0x02	; 2
    26a6:	21 f4       	brne	.+8      	; 0x26b0 <MCAL_Interrupt_u8SetRegister+0x86>
			MCUCR = PORT_INPUT;
    26a8:	e5 e5       	ldi	r30, 0x55	; 85
    26aa:	f0 e0       	ldi	r31, 0x00	; 0
    26ac:	10 82       	st	Z, r1
    26ae:	26 c0       	rjmp	.+76     	; 0x26fc <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Mcucsr) {
    26b0:	89 81       	ldd	r24, Y+1	; 0x01
    26b2:	83 30       	cpi	r24, 0x03	; 3
    26b4:	19 f5       	brne	.+70     	; 0x26fc <MCAL_Interrupt_u8SetRegister+0xd2>
			MCUCSR = PORT_INPUT;
    26b6:	e4 e5       	ldi	r30, 0x54	; 84
    26b8:	f0 e0       	ldi	r31, 0x00	; 0
    26ba:	10 82       	st	Z, r1
    26bc:	1f c0       	rjmp	.+62     	; 0x26fc <MCAL_Interrupt_u8SetRegister+0xd2>
		} else {
			//Do Nothing
		}
	} else {
		if (Loc_u8PortID == Sreg) {
    26be:	89 81       	ldd	r24, Y+1	; 0x01
    26c0:	88 23       	and	r24, r24
    26c2:	29 f4       	brne	.+10     	; 0x26ce <MCAL_Interrupt_u8SetRegister+0xa4>
			SREG = Loc_u8PortValue;
    26c4:	ef e5       	ldi	r30, 0x5F	; 95
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ca:	80 83       	st	Z, r24
    26cc:	17 c0       	rjmp	.+46     	; 0x26fc <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Gicr) {
    26ce:	89 81       	ldd	r24, Y+1	; 0x01
    26d0:	81 30       	cpi	r24, 0x01	; 1
    26d2:	29 f4       	brne	.+10     	; 0x26de <MCAL_Interrupt_u8SetRegister+0xb4>
			GICR = Loc_u8PortValue;
    26d4:	eb e5       	ldi	r30, 0x5B	; 91
    26d6:	f0 e0       	ldi	r31, 0x00	; 0
    26d8:	8a 81       	ldd	r24, Y+2	; 0x02
    26da:	80 83       	st	Z, r24
    26dc:	0f c0       	rjmp	.+30     	; 0x26fc <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Mcucr) {
    26de:	89 81       	ldd	r24, Y+1	; 0x01
    26e0:	82 30       	cpi	r24, 0x02	; 2
    26e2:	29 f4       	brne	.+10     	; 0x26ee <MCAL_Interrupt_u8SetRegister+0xc4>
			MCUCR = Loc_u8PortValue;
    26e4:	e5 e5       	ldi	r30, 0x55	; 85
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ea:	80 83       	st	Z, r24
    26ec:	07 c0       	rjmp	.+14     	; 0x26fc <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Mcucsr) {
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
    26f0:	83 30       	cpi	r24, 0x03	; 3
    26f2:	21 f4       	brne	.+8      	; 0x26fc <MCAL_Interrupt_u8SetRegister+0xd2>
			MCUCSR = Loc_u8PortValue;
    26f4:	e4 e5       	ldi	r30, 0x54	; 84
    26f6:	f0 e0       	ldi	r31, 0x00	; 0
    26f8:	8a 81       	ldd	r24, Y+2	; 0x02
    26fa:	80 83       	st	Z, r24
		}
	}
}
    26fc:	0f 90       	pop	r0
    26fe:	0f 90       	pop	r0
    2700:	cf 91       	pop	r28
    2702:	df 91       	pop	r29
    2704:	08 95       	ret

00002706 <MCAL_Interrupt_u8SetRegisterPin>:

void MCAL_Interrupt_u8SetRegisterPin(u8 Loc_u8PortID, u8 Loc_u8PinID,
		u8 Loc_u8PinValue) {
    2706:	df 93       	push	r29
    2708:	cf 93       	push	r28
    270a:	00 d0       	rcall	.+0      	; 0x270c <MCAL_Interrupt_u8SetRegisterPin+0x6>
    270c:	0f 92       	push	r0
    270e:	cd b7       	in	r28, 0x3d	; 61
    2710:	de b7       	in	r29, 0x3e	; 62
    2712:	89 83       	std	Y+1, r24	; 0x01
    2714:	6a 83       	std	Y+2, r22	; 0x02
    2716:	4b 83       	std	Y+3, r20	; 0x03
	if (Loc_u8PinValue == Pin_High) {
    2718:	8b 81       	ldd	r24, Y+3	; 0x03
    271a:	81 30       	cpi	r24, 0x01	; 1
    271c:	09 f0       	breq	.+2      	; 0x2720 <MCAL_Interrupt_u8SetRegisterPin+0x1a>
    271e:	5d c0       	rjmp	.+186    	; 0x27da <MCAL_Interrupt_u8SetRegisterPin+0xd4>
		if (Loc_u8PortID == Sreg) {
    2720:	89 81       	ldd	r24, Y+1	; 0x01
    2722:	88 23       	and	r24, r24
    2724:	a1 f4       	brne	.+40     	; 0x274e <MCAL_Interrupt_u8SetRegisterPin+0x48>
			SET_BIT(SREG, Loc_u8PinID);
    2726:	af e5       	ldi	r26, 0x5F	; 95
    2728:	b0 e0       	ldi	r27, 0x00	; 0
    272a:	ef e5       	ldi	r30, 0x5F	; 95
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	80 81       	ld	r24, Z
    2730:	48 2f       	mov	r20, r24
    2732:	8a 81       	ldd	r24, Y+2	; 0x02
    2734:	28 2f       	mov	r18, r24
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	02 2e       	mov	r0, r18
    273e:	02 c0       	rjmp	.+4      	; 0x2744 <MCAL_Interrupt_u8SetRegisterPin+0x3e>
    2740:	88 0f       	add	r24, r24
    2742:	99 1f       	adc	r25, r25
    2744:	0a 94       	dec	r0
    2746:	e2 f7       	brpl	.-8      	; 0x2740 <MCAL_Interrupt_u8SetRegisterPin+0x3a>
    2748:	84 2b       	or	r24, r20
    274a:	8c 93       	st	X, r24
    274c:	a9 c0       	rjmp	.+338    	; 0x28a0 <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		} else if (Loc_u8PortID == Gicr) {
    274e:	89 81       	ldd	r24, Y+1	; 0x01
    2750:	81 30       	cpi	r24, 0x01	; 1
    2752:	a1 f4       	brne	.+40     	; 0x277c <MCAL_Interrupt_u8SetRegisterPin+0x76>
			SET_BIT(GICR, Loc_u8PinID);
    2754:	ab e5       	ldi	r26, 0x5B	; 91
    2756:	b0 e0       	ldi	r27, 0x00	; 0
    2758:	eb e5       	ldi	r30, 0x5B	; 91
    275a:	f0 e0       	ldi	r31, 0x00	; 0
    275c:	80 81       	ld	r24, Z
    275e:	48 2f       	mov	r20, r24
    2760:	8a 81       	ldd	r24, Y+2	; 0x02
    2762:	28 2f       	mov	r18, r24
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	81 e0       	ldi	r24, 0x01	; 1
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	02 2e       	mov	r0, r18
    276c:	02 c0       	rjmp	.+4      	; 0x2772 <MCAL_Interrupt_u8SetRegisterPin+0x6c>
    276e:	88 0f       	add	r24, r24
    2770:	99 1f       	adc	r25, r25
    2772:	0a 94       	dec	r0
    2774:	e2 f7       	brpl	.-8      	; 0x276e <MCAL_Interrupt_u8SetRegisterPin+0x68>
    2776:	84 2b       	or	r24, r20
    2778:	8c 93       	st	X, r24
    277a:	92 c0       	rjmp	.+292    	; 0x28a0 <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		} else if (Loc_u8PortID == Mcucr) {
    277c:	89 81       	ldd	r24, Y+1	; 0x01
    277e:	82 30       	cpi	r24, 0x02	; 2
    2780:	a1 f4       	brne	.+40     	; 0x27aa <MCAL_Interrupt_u8SetRegisterPin+0xa4>
			SET_BIT(MCUCR, Loc_u8PinID);
    2782:	a5 e5       	ldi	r26, 0x55	; 85
    2784:	b0 e0       	ldi	r27, 0x00	; 0
    2786:	e5 e5       	ldi	r30, 0x55	; 85
    2788:	f0 e0       	ldi	r31, 0x00	; 0
    278a:	80 81       	ld	r24, Z
    278c:	48 2f       	mov	r20, r24
    278e:	8a 81       	ldd	r24, Y+2	; 0x02
    2790:	28 2f       	mov	r18, r24
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	81 e0       	ldi	r24, 0x01	; 1
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	02 2e       	mov	r0, r18
    279a:	02 c0       	rjmp	.+4      	; 0x27a0 <MCAL_Interrupt_u8SetRegisterPin+0x9a>
    279c:	88 0f       	add	r24, r24
    279e:	99 1f       	adc	r25, r25
    27a0:	0a 94       	dec	r0
    27a2:	e2 f7       	brpl	.-8      	; 0x279c <MCAL_Interrupt_u8SetRegisterPin+0x96>
    27a4:	84 2b       	or	r24, r20
    27a6:	8c 93       	st	X, r24
    27a8:	7b c0       	rjmp	.+246    	; 0x28a0 <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		} else if (Loc_u8PortID == Mcucsr) {
    27aa:	89 81       	ldd	r24, Y+1	; 0x01
    27ac:	83 30       	cpi	r24, 0x03	; 3
    27ae:	09 f0       	breq	.+2      	; 0x27b2 <MCAL_Interrupt_u8SetRegisterPin+0xac>
    27b0:	77 c0       	rjmp	.+238    	; 0x28a0 <MCAL_Interrupt_u8SetRegisterPin+0x19a>
			SET_BIT(MCUCSR, Loc_u8PinID);
    27b2:	a4 e5       	ldi	r26, 0x54	; 84
    27b4:	b0 e0       	ldi	r27, 0x00	; 0
    27b6:	e4 e5       	ldi	r30, 0x54	; 84
    27b8:	f0 e0       	ldi	r31, 0x00	; 0
    27ba:	80 81       	ld	r24, Z
    27bc:	48 2f       	mov	r20, r24
    27be:	8a 81       	ldd	r24, Y+2	; 0x02
    27c0:	28 2f       	mov	r18, r24
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	02 2e       	mov	r0, r18
    27ca:	02 c0       	rjmp	.+4      	; 0x27d0 <MCAL_Interrupt_u8SetRegisterPin+0xca>
    27cc:	88 0f       	add	r24, r24
    27ce:	99 1f       	adc	r25, r25
    27d0:	0a 94       	dec	r0
    27d2:	e2 f7       	brpl	.-8      	; 0x27cc <MCAL_Interrupt_u8SetRegisterPin+0xc6>
    27d4:	84 2b       	or	r24, r20
    27d6:	8c 93       	st	X, r24
    27d8:	63 c0       	rjmp	.+198    	; 0x28a0 <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		} else {
			//Do Nothing
		}
	} else if (Loc_u8PinValue == Pin_Low) {
    27da:	8b 81       	ldd	r24, Y+3	; 0x03
    27dc:	88 23       	and	r24, r24
    27de:	09 f0       	breq	.+2      	; 0x27e2 <MCAL_Interrupt_u8SetRegisterPin+0xdc>
    27e0:	5f c0       	rjmp	.+190    	; 0x28a0 <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		if (Loc_u8PortID == Sreg) {
    27e2:	89 81       	ldd	r24, Y+1	; 0x01
    27e4:	88 23       	and	r24, r24
    27e6:	a9 f4       	brne	.+42     	; 0x2812 <MCAL_Interrupt_u8SetRegisterPin+0x10c>
			CLR_BIT(SREG, Loc_u8PinID);
    27e8:	af e5       	ldi	r26, 0x5F	; 95
    27ea:	b0 e0       	ldi	r27, 0x00	; 0
    27ec:	ef e5       	ldi	r30, 0x5F	; 95
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	80 81       	ld	r24, Z
    27f2:	48 2f       	mov	r20, r24
    27f4:	8a 81       	ldd	r24, Y+2	; 0x02
    27f6:	28 2f       	mov	r18, r24
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	81 e0       	ldi	r24, 0x01	; 1
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	02 2e       	mov	r0, r18
    2800:	02 c0       	rjmp	.+4      	; 0x2806 <MCAL_Interrupt_u8SetRegisterPin+0x100>
    2802:	88 0f       	add	r24, r24
    2804:	99 1f       	adc	r25, r25
    2806:	0a 94       	dec	r0
    2808:	e2 f7       	brpl	.-8      	; 0x2802 <MCAL_Interrupt_u8SetRegisterPin+0xfc>
    280a:	80 95       	com	r24
    280c:	84 23       	and	r24, r20
    280e:	8c 93       	st	X, r24
    2810:	47 c0       	rjmp	.+142    	; 0x28a0 <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		} else if (Loc_u8PortID == Gicr) {
    2812:	89 81       	ldd	r24, Y+1	; 0x01
    2814:	81 30       	cpi	r24, 0x01	; 1
    2816:	a9 f4       	brne	.+42     	; 0x2842 <MCAL_Interrupt_u8SetRegisterPin+0x13c>
			CLR_BIT(GICR, Loc_u8PinID);
    2818:	ab e5       	ldi	r26, 0x5B	; 91
    281a:	b0 e0       	ldi	r27, 0x00	; 0
    281c:	eb e5       	ldi	r30, 0x5B	; 91
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	80 81       	ld	r24, Z
    2822:	48 2f       	mov	r20, r24
    2824:	8a 81       	ldd	r24, Y+2	; 0x02
    2826:	28 2f       	mov	r18, r24
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	02 2e       	mov	r0, r18
    2830:	02 c0       	rjmp	.+4      	; 0x2836 <MCAL_Interrupt_u8SetRegisterPin+0x130>
    2832:	88 0f       	add	r24, r24
    2834:	99 1f       	adc	r25, r25
    2836:	0a 94       	dec	r0
    2838:	e2 f7       	brpl	.-8      	; 0x2832 <MCAL_Interrupt_u8SetRegisterPin+0x12c>
    283a:	80 95       	com	r24
    283c:	84 23       	and	r24, r20
    283e:	8c 93       	st	X, r24
    2840:	2f c0       	rjmp	.+94     	; 0x28a0 <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		} else if (Loc_u8PortID == Mcucr) {
    2842:	89 81       	ldd	r24, Y+1	; 0x01
    2844:	82 30       	cpi	r24, 0x02	; 2
    2846:	a9 f4       	brne	.+42     	; 0x2872 <MCAL_Interrupt_u8SetRegisterPin+0x16c>
			CLR_BIT(MCUCR, Loc_u8PinID);
    2848:	a5 e5       	ldi	r26, 0x55	; 85
    284a:	b0 e0       	ldi	r27, 0x00	; 0
    284c:	e5 e5       	ldi	r30, 0x55	; 85
    284e:	f0 e0       	ldi	r31, 0x00	; 0
    2850:	80 81       	ld	r24, Z
    2852:	48 2f       	mov	r20, r24
    2854:	8a 81       	ldd	r24, Y+2	; 0x02
    2856:	28 2f       	mov	r18, r24
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	02 2e       	mov	r0, r18
    2860:	02 c0       	rjmp	.+4      	; 0x2866 <MCAL_Interrupt_u8SetRegisterPin+0x160>
    2862:	88 0f       	add	r24, r24
    2864:	99 1f       	adc	r25, r25
    2866:	0a 94       	dec	r0
    2868:	e2 f7       	brpl	.-8      	; 0x2862 <MCAL_Interrupt_u8SetRegisterPin+0x15c>
    286a:	80 95       	com	r24
    286c:	84 23       	and	r24, r20
    286e:	8c 93       	st	X, r24
    2870:	17 c0       	rjmp	.+46     	; 0x28a0 <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		} else if (Loc_u8PortID == Mcucsr) {
    2872:	89 81       	ldd	r24, Y+1	; 0x01
    2874:	83 30       	cpi	r24, 0x03	; 3
    2876:	a1 f4       	brne	.+40     	; 0x28a0 <MCAL_Interrupt_u8SetRegisterPin+0x19a>
			CLR_BIT(MCUCSR, Loc_u8PinID);
    2878:	a4 e5       	ldi	r26, 0x54	; 84
    287a:	b0 e0       	ldi	r27, 0x00	; 0
    287c:	e4 e5       	ldi	r30, 0x54	; 84
    287e:	f0 e0       	ldi	r31, 0x00	; 0
    2880:	80 81       	ld	r24, Z
    2882:	48 2f       	mov	r20, r24
    2884:	8a 81       	ldd	r24, Y+2	; 0x02
    2886:	28 2f       	mov	r18, r24
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	81 e0       	ldi	r24, 0x01	; 1
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	02 2e       	mov	r0, r18
    2890:	02 c0       	rjmp	.+4      	; 0x2896 <MCAL_Interrupt_u8SetRegisterPin+0x190>
    2892:	88 0f       	add	r24, r24
    2894:	99 1f       	adc	r25, r25
    2896:	0a 94       	dec	r0
    2898:	e2 f7       	brpl	.-8      	; 0x2892 <MCAL_Interrupt_u8SetRegisterPin+0x18c>
    289a:	80 95       	com	r24
    289c:	84 23       	and	r24, r20
    289e:	8c 93       	st	X, r24
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
}
    28a0:	0f 90       	pop	r0
    28a2:	0f 90       	pop	r0
    28a4:	0f 90       	pop	r0
    28a6:	cf 91       	pop	r28
    28a8:	df 91       	pop	r29
    28aa:	08 95       	ret

000028ac <MCAL_Interrupt_EXIT_CallBack_0>:

void MCAL_Interrupt_EXIT_CallBack_0(void (*ptr)(void)) {
    28ac:	df 93       	push	r29
    28ae:	cf 93       	push	r28
    28b0:	00 d0       	rcall	.+0      	; 0x28b2 <MCAL_Interrupt_EXIT_CallBack_0+0x6>
    28b2:	cd b7       	in	r28, 0x3d	; 61
    28b4:	de b7       	in	r29, 0x3e	; 62
    28b6:	9a 83       	std	Y+2, r25	; 0x02
    28b8:	89 83       	std	Y+1, r24	; 0x01
	if (ptr != '\0')
    28ba:	89 81       	ldd	r24, Y+1	; 0x01
    28bc:	9a 81       	ldd	r25, Y+2	; 0x02
    28be:	00 97       	sbiw	r24, 0x00	; 0
    28c0:	31 f0       	breq	.+12     	; 0x28ce <MCAL_Interrupt_EXIT_CallBack_0+0x22>
		Gptr0 = ptr;
    28c2:	89 81       	ldd	r24, Y+1	; 0x01
    28c4:	9a 81       	ldd	r25, Y+2	; 0x02
    28c6:	90 93 85 01 	sts	0x0185, r25
    28ca:	80 93 84 01 	sts	0x0184, r24
}
    28ce:	0f 90       	pop	r0
    28d0:	0f 90       	pop	r0
    28d2:	cf 91       	pop	r28
    28d4:	df 91       	pop	r29
    28d6:	08 95       	ret

000028d8 <MCAL_Interrupt_EXIT_CallBack_1>:
void MCAL_Interrupt_EXIT_CallBack_1(void (*ptr)(void)) {
    28d8:	df 93       	push	r29
    28da:	cf 93       	push	r28
    28dc:	00 d0       	rcall	.+0      	; 0x28de <MCAL_Interrupt_EXIT_CallBack_1+0x6>
    28de:	cd b7       	in	r28, 0x3d	; 61
    28e0:	de b7       	in	r29, 0x3e	; 62
    28e2:	9a 83       	std	Y+2, r25	; 0x02
    28e4:	89 83       	std	Y+1, r24	; 0x01
	if (ptr != '\0')
    28e6:	89 81       	ldd	r24, Y+1	; 0x01
    28e8:	9a 81       	ldd	r25, Y+2	; 0x02
    28ea:	00 97       	sbiw	r24, 0x00	; 0
    28ec:	31 f0       	breq	.+12     	; 0x28fa <MCAL_Interrupt_EXIT_CallBack_1+0x22>
		Gptr1 = ptr;
    28ee:	89 81       	ldd	r24, Y+1	; 0x01
    28f0:	9a 81       	ldd	r25, Y+2	; 0x02
    28f2:	90 93 87 01 	sts	0x0187, r25
    28f6:	80 93 86 01 	sts	0x0186, r24
}
    28fa:	0f 90       	pop	r0
    28fc:	0f 90       	pop	r0
    28fe:	cf 91       	pop	r28
    2900:	df 91       	pop	r29
    2902:	08 95       	ret

00002904 <MCAL_Interrupt_EXIT_CallBack_2>:
void MCAL_Interrupt_EXIT_CallBack_2(void (*ptr)(void)) {
    2904:	df 93       	push	r29
    2906:	cf 93       	push	r28
    2908:	00 d0       	rcall	.+0      	; 0x290a <MCAL_Interrupt_EXIT_CallBack_2+0x6>
    290a:	cd b7       	in	r28, 0x3d	; 61
    290c:	de b7       	in	r29, 0x3e	; 62
    290e:	9a 83       	std	Y+2, r25	; 0x02
    2910:	89 83       	std	Y+1, r24	; 0x01
	if (ptr != '\0')
    2912:	89 81       	ldd	r24, Y+1	; 0x01
    2914:	9a 81       	ldd	r25, Y+2	; 0x02
    2916:	00 97       	sbiw	r24, 0x00	; 0
    2918:	31 f0       	breq	.+12     	; 0x2926 <MCAL_Interrupt_EXIT_CallBack_2+0x22>
		Gptr2 = ptr;
    291a:	89 81       	ldd	r24, Y+1	; 0x01
    291c:	9a 81       	ldd	r25, Y+2	; 0x02
    291e:	90 93 89 01 	sts	0x0189, r25
    2922:	80 93 88 01 	sts	0x0188, r24
}
    2926:	0f 90       	pop	r0
    2928:	0f 90       	pop	r0
    292a:	cf 91       	pop	r28
    292c:	df 91       	pop	r29
    292e:	08 95       	ret

00002930 <MCAL_Interrupt_EnableGIE>:

void MCAL_Interrupt_EnableGIE(u8 Loc_u8value) {
    2930:	df 93       	push	r29
    2932:	cf 93       	push	r28
    2934:	0f 92       	push	r0
    2936:	cd b7       	in	r28, 0x3d	; 61
    2938:	de b7       	in	r29, 0x3e	; 62
    293a:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8value == Enable) {
    293c:	89 81       	ldd	r24, Y+1	; 0x01
    293e:	81 30       	cpi	r24, 0x01	; 1
    2940:	31 f4       	brne	.+12     	; 0x294e <MCAL_Interrupt_EnableGIE+0x1e>
		MCAL_Interrupt_u8SetRegisterPin(Sreg, SREG_Pin, Pin_High);
    2942:	80 e0       	ldi	r24, 0x00	; 0
    2944:	67 e0       	ldi	r22, 0x07	; 7
    2946:	41 e0       	ldi	r20, 0x01	; 1
    2948:	0e 94 83 13 	call	0x2706	; 0x2706 <MCAL_Interrupt_u8SetRegisterPin>
    294c:	08 c0       	rjmp	.+16     	; 0x295e <MCAL_Interrupt_EnableGIE+0x2e>
	} else if (Loc_u8value == Disable) {
    294e:	89 81       	ldd	r24, Y+1	; 0x01
    2950:	88 23       	and	r24, r24
    2952:	29 f4       	brne	.+10     	; 0x295e <MCAL_Interrupt_EnableGIE+0x2e>
		MCAL_Interrupt_u8SetRegisterPin(Sreg, SREG_Pin, Pin_Low);
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	67 e0       	ldi	r22, 0x07	; 7
    2958:	40 e0       	ldi	r20, 0x00	; 0
    295a:	0e 94 83 13 	call	0x2706	; 0x2706 <MCAL_Interrupt_u8SetRegisterPin>
	}
}
    295e:	0f 90       	pop	r0
    2960:	cf 91       	pop	r28
    2962:	df 91       	pop	r29
    2964:	08 95       	ret

00002966 <MCAL_Interrupt_InterruptRisingInit>:

void MCAL_Interrupt_InterruptRisingInit() {
    2966:	df 93       	push	r29
    2968:	cf 93       	push	r28
    296a:	cd b7       	in	r28, 0x3d	; 61
    296c:	de b7       	in	r29, 0x3e	; 62
	MCAL_Interrupt_u8SetRegisterPin(Gicr, GICR_Pin6, Pin_High);
    296e:	81 e0       	ldi	r24, 0x01	; 1
    2970:	66 e0       	ldi	r22, 0x06	; 6
    2972:	41 e0       	ldi	r20, 0x01	; 1
    2974:	0e 94 83 13 	call	0x2706	; 0x2706 <MCAL_Interrupt_u8SetRegisterPin>
	MCAL_Interrupt_u8SetRegisterPin(Mcucr,MCUCR_Pin0 , Pin_High);
    2978:	82 e0       	ldi	r24, 0x02	; 2
    297a:	60 e0       	ldi	r22, 0x00	; 0
    297c:	41 e0       	ldi	r20, 0x01	; 1
    297e:	0e 94 83 13 	call	0x2706	; 0x2706 <MCAL_Interrupt_u8SetRegisterPin>
	MCAL_Interrupt_u8SetRegisterPin(Mcucr,MCUCR_Pin1 , Pin_High);
    2982:	82 e0       	ldi	r24, 0x02	; 2
    2984:	61 e0       	ldi	r22, 0x01	; 1
    2986:	41 e0       	ldi	r20, 0x01	; 1
    2988:	0e 94 83 13 	call	0x2706	; 0x2706 <MCAL_Interrupt_u8SetRegisterPin>
}
    298c:	cf 91       	pop	r28
    298e:	df 91       	pop	r29
    2990:	08 95       	ret

00002992 <MCAL_Interrupt_InterruptFallingInit>:
void MCAL_Interrupt_InterruptFallingInit() {
    2992:	df 93       	push	r29
    2994:	cf 93       	push	r28
    2996:	cd b7       	in	r28, 0x3d	; 61
    2998:	de b7       	in	r29, 0x3e	; 62
	MCAL_Interrupt_u8SetRegisterPin(Gicr, GICR_Pin6, Pin_High);
    299a:	81 e0       	ldi	r24, 0x01	; 1
    299c:	66 e0       	ldi	r22, 0x06	; 6
    299e:	41 e0       	ldi	r20, 0x01	; 1
    29a0:	0e 94 83 13 	call	0x2706	; 0x2706 <MCAL_Interrupt_u8SetRegisterPin>
	MCAL_Interrupt_u8SetRegisterPin(Mcucr,MCUCR_Pin0 , Pin_Low);
    29a4:	82 e0       	ldi	r24, 0x02	; 2
    29a6:	60 e0       	ldi	r22, 0x00	; 0
    29a8:	40 e0       	ldi	r20, 0x00	; 0
    29aa:	0e 94 83 13 	call	0x2706	; 0x2706 <MCAL_Interrupt_u8SetRegisterPin>
	MCAL_Interrupt_u8SetRegisterPin(Mcucr,MCUCR_Pin1 , Pin_High);
    29ae:	82 e0       	ldi	r24, 0x02	; 2
    29b0:	61 e0       	ldi	r22, 0x01	; 1
    29b2:	41 e0       	ldi	r20, 0x01	; 1
    29b4:	0e 94 83 13 	call	0x2706	; 0x2706 <MCAL_Interrupt_u8SetRegisterPin>
}
    29b8:	cf 91       	pop	r28
    29ba:	df 91       	pop	r29
    29bc:	08 95       	ret

000029be <__vector_1>:

ISR(VECT_INT0) {
    29be:	1f 92       	push	r1
    29c0:	0f 92       	push	r0
    29c2:	0f b6       	in	r0, 0x3f	; 63
    29c4:	0f 92       	push	r0
    29c6:	11 24       	eor	r1, r1
    29c8:	2f 93       	push	r18
    29ca:	3f 93       	push	r19
    29cc:	4f 93       	push	r20
    29ce:	5f 93       	push	r21
    29d0:	6f 93       	push	r22
    29d2:	7f 93       	push	r23
    29d4:	8f 93       	push	r24
    29d6:	9f 93       	push	r25
    29d8:	af 93       	push	r26
    29da:	bf 93       	push	r27
    29dc:	ef 93       	push	r30
    29de:	ff 93       	push	r31
    29e0:	df 93       	push	r29
    29e2:	cf 93       	push	r28
    29e4:	cd b7       	in	r28, 0x3d	; 61
    29e6:	de b7       	in	r29, 0x3e	; 62
	if (Gptr0 != '\0')
    29e8:	80 91 84 01 	lds	r24, 0x0184
    29ec:	90 91 85 01 	lds	r25, 0x0185
    29f0:	00 97       	sbiw	r24, 0x00	; 0
    29f2:	29 f0       	breq	.+10     	; 0x29fe <__vector_1+0x40>
		Gptr0();
    29f4:	e0 91 84 01 	lds	r30, 0x0184
    29f8:	f0 91 85 01 	lds	r31, 0x0185
    29fc:	09 95       	icall
}
    29fe:	cf 91       	pop	r28
    2a00:	df 91       	pop	r29
    2a02:	ff 91       	pop	r31
    2a04:	ef 91       	pop	r30
    2a06:	bf 91       	pop	r27
    2a08:	af 91       	pop	r26
    2a0a:	9f 91       	pop	r25
    2a0c:	8f 91       	pop	r24
    2a0e:	7f 91       	pop	r23
    2a10:	6f 91       	pop	r22
    2a12:	5f 91       	pop	r21
    2a14:	4f 91       	pop	r20
    2a16:	3f 91       	pop	r19
    2a18:	2f 91       	pop	r18
    2a1a:	0f 90       	pop	r0
    2a1c:	0f be       	out	0x3f, r0	; 63
    2a1e:	0f 90       	pop	r0
    2a20:	1f 90       	pop	r1
    2a22:	18 95       	reti

00002a24 <__vector_2>:
ISR(VECT_INT1) {
    2a24:	1f 92       	push	r1
    2a26:	0f 92       	push	r0
    2a28:	0f b6       	in	r0, 0x3f	; 63
    2a2a:	0f 92       	push	r0
    2a2c:	11 24       	eor	r1, r1
    2a2e:	2f 93       	push	r18
    2a30:	3f 93       	push	r19
    2a32:	4f 93       	push	r20
    2a34:	5f 93       	push	r21
    2a36:	6f 93       	push	r22
    2a38:	7f 93       	push	r23
    2a3a:	8f 93       	push	r24
    2a3c:	9f 93       	push	r25
    2a3e:	af 93       	push	r26
    2a40:	bf 93       	push	r27
    2a42:	ef 93       	push	r30
    2a44:	ff 93       	push	r31
    2a46:	df 93       	push	r29
    2a48:	cf 93       	push	r28
    2a4a:	cd b7       	in	r28, 0x3d	; 61
    2a4c:	de b7       	in	r29, 0x3e	; 62
	if (Gptr1 != '\0')
    2a4e:	80 91 86 01 	lds	r24, 0x0186
    2a52:	90 91 87 01 	lds	r25, 0x0187
    2a56:	00 97       	sbiw	r24, 0x00	; 0
    2a58:	29 f0       	breq	.+10     	; 0x2a64 <__vector_2+0x40>
		Gptr1();
    2a5a:	e0 91 86 01 	lds	r30, 0x0186
    2a5e:	f0 91 87 01 	lds	r31, 0x0187
    2a62:	09 95       	icall
}
    2a64:	cf 91       	pop	r28
    2a66:	df 91       	pop	r29
    2a68:	ff 91       	pop	r31
    2a6a:	ef 91       	pop	r30
    2a6c:	bf 91       	pop	r27
    2a6e:	af 91       	pop	r26
    2a70:	9f 91       	pop	r25
    2a72:	8f 91       	pop	r24
    2a74:	7f 91       	pop	r23
    2a76:	6f 91       	pop	r22
    2a78:	5f 91       	pop	r21
    2a7a:	4f 91       	pop	r20
    2a7c:	3f 91       	pop	r19
    2a7e:	2f 91       	pop	r18
    2a80:	0f 90       	pop	r0
    2a82:	0f be       	out	0x3f, r0	; 63
    2a84:	0f 90       	pop	r0
    2a86:	1f 90       	pop	r1
    2a88:	18 95       	reti

00002a8a <__vector_3>:
ISR(VECT_INT2) {
    2a8a:	1f 92       	push	r1
    2a8c:	0f 92       	push	r0
    2a8e:	0f b6       	in	r0, 0x3f	; 63
    2a90:	0f 92       	push	r0
    2a92:	11 24       	eor	r1, r1
    2a94:	2f 93       	push	r18
    2a96:	3f 93       	push	r19
    2a98:	4f 93       	push	r20
    2a9a:	5f 93       	push	r21
    2a9c:	6f 93       	push	r22
    2a9e:	7f 93       	push	r23
    2aa0:	8f 93       	push	r24
    2aa2:	9f 93       	push	r25
    2aa4:	af 93       	push	r26
    2aa6:	bf 93       	push	r27
    2aa8:	ef 93       	push	r30
    2aaa:	ff 93       	push	r31
    2aac:	df 93       	push	r29
    2aae:	cf 93       	push	r28
    2ab0:	cd b7       	in	r28, 0x3d	; 61
    2ab2:	de b7       	in	r29, 0x3e	; 62
	if (Gptr2 != '\0')
    2ab4:	80 91 88 01 	lds	r24, 0x0188
    2ab8:	90 91 89 01 	lds	r25, 0x0189
    2abc:	00 97       	sbiw	r24, 0x00	; 0
    2abe:	29 f0       	breq	.+10     	; 0x2aca <__vector_3+0x40>
		Gptr2();
    2ac0:	e0 91 88 01 	lds	r30, 0x0188
    2ac4:	f0 91 89 01 	lds	r31, 0x0189
    2ac8:	09 95       	icall
}
    2aca:	cf 91       	pop	r28
    2acc:	df 91       	pop	r29
    2ace:	ff 91       	pop	r31
    2ad0:	ef 91       	pop	r30
    2ad2:	bf 91       	pop	r27
    2ad4:	af 91       	pop	r26
    2ad6:	9f 91       	pop	r25
    2ad8:	8f 91       	pop	r24
    2ada:	7f 91       	pop	r23
    2adc:	6f 91       	pop	r22
    2ade:	5f 91       	pop	r21
    2ae0:	4f 91       	pop	r20
    2ae2:	3f 91       	pop	r19
    2ae4:	2f 91       	pop	r18
    2ae6:	0f 90       	pop	r0
    2ae8:	0f be       	out	0x3f, r0	; 63
    2aea:	0f 90       	pop	r0
    2aec:	1f 90       	pop	r1
    2aee:	18 95       	reti

00002af0 <MCAL_DIO_u8SetPortDirection>:
 *      Author: Mohamed
 */

#include "DIO.h"

STD_Type MCAL_DIO_u8SetPortDirection(u8 Loc_u8PortID, u8 Loc_u8PortDirection) {
    2af0:	df 93       	push	r29
    2af2:	cf 93       	push	r28
    2af4:	00 d0       	rcall	.+0      	; 0x2af6 <MCAL_DIO_u8SetPortDirection+0x6>
    2af6:	0f 92       	push	r0
    2af8:	cd b7       	in	r28, 0x3d	; 61
    2afa:	de b7       	in	r29, 0x3e	; 62
    2afc:	8a 83       	std	Y+2, r24	; 0x02
    2afe:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Return_Value = E_NOT_OK;
    2b00:	81 e0       	ldi	r24, 0x01	; 1
    2b02:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD && Loc_u8PortDirection <= PORT_OUTPUT) {
    2b04:	8a 81       	ldd	r24, Y+2	; 0x02
    2b06:	84 30       	cpi	r24, 0x04	; 4
    2b08:	08 f0       	brcs	.+2      	; 0x2b0c <MCAL_DIO_u8SetPortDirection+0x1c>
    2b0a:	6e c0       	rjmp	.+220    	; 0x2be8 <MCAL_DIO_u8SetPortDirection+0xf8>
		if (Loc_u8PortDirection == PORT_OUTPUT) {
    2b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b0e:	8f 3f       	cpi	r24, 0xFF	; 255
    2b10:	29 f5       	brne	.+74     	; 0x2b5c <MCAL_DIO_u8SetPortDirection+0x6c>
			if (Loc_u8PortID == PortA) {
    2b12:	8a 81       	ldd	r24, Y+2	; 0x02
    2b14:	88 23       	and	r24, r24
    2b16:	31 f4       	brne	.+12     	; 0x2b24 <MCAL_DIO_u8SetPortDirection+0x34>
				DDRA = PORT_OUTPUT;
    2b18:	ea e3       	ldi	r30, 0x3A	; 58
    2b1a:	f0 e0       	ldi	r31, 0x00	; 0
    2b1c:	8f ef       	ldi	r24, 0xFF	; 255
    2b1e:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2b20:	19 82       	std	Y+1, r1	; 0x01
    2b22:	62 c0       	rjmp	.+196    	; 0x2be8 <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortB) {
    2b24:	8a 81       	ldd	r24, Y+2	; 0x02
    2b26:	81 30       	cpi	r24, 0x01	; 1
    2b28:	31 f4       	brne	.+12     	; 0x2b36 <MCAL_DIO_u8SetPortDirection+0x46>
				DDRB = PORT_OUTPUT;
    2b2a:	e7 e3       	ldi	r30, 0x37	; 55
    2b2c:	f0 e0       	ldi	r31, 0x00	; 0
    2b2e:	8f ef       	ldi	r24, 0xFF	; 255
    2b30:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2b32:	19 82       	std	Y+1, r1	; 0x01
    2b34:	59 c0       	rjmp	.+178    	; 0x2be8 <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortC) {
    2b36:	8a 81       	ldd	r24, Y+2	; 0x02
    2b38:	82 30       	cpi	r24, 0x02	; 2
    2b3a:	31 f4       	brne	.+12     	; 0x2b48 <MCAL_DIO_u8SetPortDirection+0x58>
				DDRC = PORT_OUTPUT;
    2b3c:	e4 e3       	ldi	r30, 0x34	; 52
    2b3e:	f0 e0       	ldi	r31, 0x00	; 0
    2b40:	8f ef       	ldi	r24, 0xFF	; 255
    2b42:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2b44:	19 82       	std	Y+1, r1	; 0x01
    2b46:	50 c0       	rjmp	.+160    	; 0x2be8 <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortD) {
    2b48:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4a:	83 30       	cpi	r24, 0x03	; 3
    2b4c:	09 f0       	breq	.+2      	; 0x2b50 <MCAL_DIO_u8SetPortDirection+0x60>
    2b4e:	4c c0       	rjmp	.+152    	; 0x2be8 <MCAL_DIO_u8SetPortDirection+0xf8>
				DDRD = PORT_OUTPUT;
    2b50:	e1 e3       	ldi	r30, 0x31	; 49
    2b52:	f0 e0       	ldi	r31, 0x00	; 0
    2b54:	8f ef       	ldi	r24, 0xFF	; 255
    2b56:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2b58:	19 82       	std	Y+1, r1	; 0x01
    2b5a:	46 c0       	rjmp	.+140    	; 0x2be8 <MCAL_DIO_u8SetPortDirection+0xf8>
			} else {
				//Do Nothing
			}
		} else if (Loc_u8PortDirection == PORT_INPUT) {
    2b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5e:	88 23       	and	r24, r24
    2b60:	01 f5       	brne	.+64     	; 0x2ba2 <MCAL_DIO_u8SetPortDirection+0xb2>
			if (Loc_u8PortID == PortA) {
    2b62:	8a 81       	ldd	r24, Y+2	; 0x02
    2b64:	88 23       	and	r24, r24
    2b66:	29 f4       	brne	.+10     	; 0x2b72 <MCAL_DIO_u8SetPortDirection+0x82>
				DDRA = PORT_INPUT;
    2b68:	ea e3       	ldi	r30, 0x3A	; 58
    2b6a:	f0 e0       	ldi	r31, 0x00	; 0
    2b6c:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    2b6e:	19 82       	std	Y+1, r1	; 0x01
    2b70:	3b c0       	rjmp	.+118    	; 0x2be8 <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortB) {
    2b72:	8a 81       	ldd	r24, Y+2	; 0x02
    2b74:	81 30       	cpi	r24, 0x01	; 1
    2b76:	29 f4       	brne	.+10     	; 0x2b82 <MCAL_DIO_u8SetPortDirection+0x92>
				DDRB = PORT_INPUT;
    2b78:	e7 e3       	ldi	r30, 0x37	; 55
    2b7a:	f0 e0       	ldi	r31, 0x00	; 0
    2b7c:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    2b7e:	19 82       	std	Y+1, r1	; 0x01
    2b80:	33 c0       	rjmp	.+102    	; 0x2be8 <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortC) {
    2b82:	8a 81       	ldd	r24, Y+2	; 0x02
    2b84:	82 30       	cpi	r24, 0x02	; 2
    2b86:	29 f4       	brne	.+10     	; 0x2b92 <MCAL_DIO_u8SetPortDirection+0xa2>
				DDRC = PORT_INPUT;
    2b88:	e4 e3       	ldi	r30, 0x34	; 52
    2b8a:	f0 e0       	ldi	r31, 0x00	; 0
    2b8c:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    2b8e:	19 82       	std	Y+1, r1	; 0x01
    2b90:	2b c0       	rjmp	.+86     	; 0x2be8 <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortD) {
    2b92:	8a 81       	ldd	r24, Y+2	; 0x02
    2b94:	83 30       	cpi	r24, 0x03	; 3
    2b96:	41 f5       	brne	.+80     	; 0x2be8 <MCAL_DIO_u8SetPortDirection+0xf8>
				DDRD = PORT_INPUT;
    2b98:	e1 e3       	ldi	r30, 0x31	; 49
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
    2b9c:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    2b9e:	19 82       	std	Y+1, r1	; 0x01
    2ba0:	23 c0       	rjmp	.+70     	; 0x2be8 <MCAL_DIO_u8SetPortDirection+0xf8>
			} else {
				//Do Nothing
			}
		} else {
			if (Loc_u8PortID == PortA) {
    2ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba4:	88 23       	and	r24, r24
    2ba6:	31 f4       	brne	.+12     	; 0x2bb4 <MCAL_DIO_u8SetPortDirection+0xc4>
				DDRA = Loc_u8PortDirection;
    2ba8:	ea e3       	ldi	r30, 0x3A	; 58
    2baa:	f0 e0       	ldi	r31, 0x00	; 0
    2bac:	8b 81       	ldd	r24, Y+3	; 0x03
    2bae:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2bb0:	19 82       	std	Y+1, r1	; 0x01
    2bb2:	1a c0       	rjmp	.+52     	; 0x2be8 <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortB) {
    2bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb6:	81 30       	cpi	r24, 0x01	; 1
    2bb8:	31 f4       	brne	.+12     	; 0x2bc6 <MCAL_DIO_u8SetPortDirection+0xd6>
				DDRB = Loc_u8PortDirection;
    2bba:	e7 e3       	ldi	r30, 0x37	; 55
    2bbc:	f0 e0       	ldi	r31, 0x00	; 0
    2bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc0:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2bc2:	19 82       	std	Y+1, r1	; 0x01
    2bc4:	11 c0       	rjmp	.+34     	; 0x2be8 <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortC) {
    2bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc8:	82 30       	cpi	r24, 0x02	; 2
    2bca:	31 f4       	brne	.+12     	; 0x2bd8 <MCAL_DIO_u8SetPortDirection+0xe8>
				DDRC = Loc_u8PortDirection;
    2bcc:	e4 e3       	ldi	r30, 0x34	; 52
    2bce:	f0 e0       	ldi	r31, 0x00	; 0
    2bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd2:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2bd4:	19 82       	std	Y+1, r1	; 0x01
    2bd6:	08 c0       	rjmp	.+16     	; 0x2be8 <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortD) {
    2bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bda:	83 30       	cpi	r24, 0x03	; 3
    2bdc:	29 f4       	brne	.+10     	; 0x2be8 <MCAL_DIO_u8SetPortDirection+0xf8>
				DDRD = Loc_u8PortDirection;
    2bde:	e1 e3       	ldi	r30, 0x31	; 49
    2be0:	f0 e0       	ldi	r31, 0x00	; 0
    2be2:	8b 81       	ldd	r24, Y+3	; 0x03
    2be4:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2be6:	19 82       	std	Y+1, r1	; 0x01
			}
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    2be8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bea:	0f 90       	pop	r0
    2bec:	0f 90       	pop	r0
    2bee:	0f 90       	pop	r0
    2bf0:	cf 91       	pop	r28
    2bf2:	df 91       	pop	r29
    2bf4:	08 95       	ret

00002bf6 <MCAL_DIO_u8SetPinDirection>:

STD_Type MCAL_DIO_u8SetPinDirection(u8 Loc_u8PortID, u8 Loc_u8PinID,
		u8 Loc_u8PinDirection) {
    2bf6:	df 93       	push	r29
    2bf8:	cf 93       	push	r28
    2bfa:	00 d0       	rcall	.+0      	; 0x2bfc <MCAL_DIO_u8SetPinDirection+0x6>
    2bfc:	00 d0       	rcall	.+0      	; 0x2bfe <MCAL_DIO_u8SetPinDirection+0x8>
    2bfe:	cd b7       	in	r28, 0x3d	; 61
    2c00:	de b7       	in	r29, 0x3e	; 62
    2c02:	8a 83       	std	Y+2, r24	; 0x02
    2c04:	6b 83       	std	Y+3, r22	; 0x03
    2c06:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Return_Value = E_NOT_OK;
    2c08:	81 e0       	ldi	r24, 0x01	; 1
    2c0a:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD && Loc_u8PinID <= Num_Of_Pins
    2c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c0e:	84 30       	cpi	r24, 0x04	; 4
    2c10:	08 f0       	brcs	.+2      	; 0x2c14 <MCAL_DIO_u8SetPinDirection+0x1e>
    2c12:	d4 c0       	rjmp	.+424    	; 0x2dbc <MCAL_DIO_u8SetPinDirection+0x1c6>
    2c14:	8b 81       	ldd	r24, Y+3	; 0x03
    2c16:	88 30       	cpi	r24, 0x08	; 8
    2c18:	08 f0       	brcs	.+2      	; 0x2c1c <MCAL_DIO_u8SetPinDirection+0x26>
    2c1a:	d0 c0       	rjmp	.+416    	; 0x2dbc <MCAL_DIO_u8SetPinDirection+0x1c6>
    2c1c:	8c 81       	ldd	r24, Y+4	; 0x04
    2c1e:	82 30       	cpi	r24, 0x02	; 2
    2c20:	08 f0       	brcs	.+2      	; 0x2c24 <MCAL_DIO_u8SetPinDirection+0x2e>
    2c22:	cc c0       	rjmp	.+408    	; 0x2dbc <MCAL_DIO_u8SetPinDirection+0x1c6>
			&& Loc_u8PinDirection <= Pin_High) {
		if (Loc_u8PinDirection == Pin_High) {
    2c24:	8c 81       	ldd	r24, Y+4	; 0x04
    2c26:	81 30       	cpi	r24, 0x01	; 1
    2c28:	09 f0       	breq	.+2      	; 0x2c2c <MCAL_DIO_u8SetPinDirection+0x36>
    2c2a:	61 c0       	rjmp	.+194    	; 0x2cee <MCAL_DIO_u8SetPinDirection+0xf8>
			if (Loc_u8PortID == PortA) {
    2c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2e:	88 23       	and	r24, r24
    2c30:	a9 f4       	brne	.+42     	; 0x2c5c <MCAL_DIO_u8SetPinDirection+0x66>
				SET_BIT(DDRA, Loc_u8PinID);
    2c32:	aa e3       	ldi	r26, 0x3A	; 58
    2c34:	b0 e0       	ldi	r27, 0x00	; 0
    2c36:	ea e3       	ldi	r30, 0x3A	; 58
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
    2c3a:	80 81       	ld	r24, Z
    2c3c:	48 2f       	mov	r20, r24
    2c3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c40:	28 2f       	mov	r18, r24
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	81 e0       	ldi	r24, 0x01	; 1
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	02 2e       	mov	r0, r18
    2c4a:	02 c0       	rjmp	.+4      	; 0x2c50 <MCAL_DIO_u8SetPinDirection+0x5a>
    2c4c:	88 0f       	add	r24, r24
    2c4e:	99 1f       	adc	r25, r25
    2c50:	0a 94       	dec	r0
    2c52:	e2 f7       	brpl	.-8      	; 0x2c4c <MCAL_DIO_u8SetPinDirection+0x56>
    2c54:	84 2b       	or	r24, r20
    2c56:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2c58:	19 82       	std	Y+1, r1	; 0x01
    2c5a:	b0 c0       	rjmp	.+352    	; 0x2dbc <MCAL_DIO_u8SetPinDirection+0x1c6>
			} else if (Loc_u8PortID == PortB) {
    2c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5e:	81 30       	cpi	r24, 0x01	; 1
    2c60:	a9 f4       	brne	.+42     	; 0x2c8c <MCAL_DIO_u8SetPinDirection+0x96>
				SET_BIT(DDRB, Loc_u8PinID);
    2c62:	a7 e3       	ldi	r26, 0x37	; 55
    2c64:	b0 e0       	ldi	r27, 0x00	; 0
    2c66:	e7 e3       	ldi	r30, 0x37	; 55
    2c68:	f0 e0       	ldi	r31, 0x00	; 0
    2c6a:	80 81       	ld	r24, Z
    2c6c:	48 2f       	mov	r20, r24
    2c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c70:	28 2f       	mov	r18, r24
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	81 e0       	ldi	r24, 0x01	; 1
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	02 2e       	mov	r0, r18
    2c7a:	02 c0       	rjmp	.+4      	; 0x2c80 <MCAL_DIO_u8SetPinDirection+0x8a>
    2c7c:	88 0f       	add	r24, r24
    2c7e:	99 1f       	adc	r25, r25
    2c80:	0a 94       	dec	r0
    2c82:	e2 f7       	brpl	.-8      	; 0x2c7c <MCAL_DIO_u8SetPinDirection+0x86>
    2c84:	84 2b       	or	r24, r20
    2c86:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2c88:	19 82       	std	Y+1, r1	; 0x01
    2c8a:	98 c0       	rjmp	.+304    	; 0x2dbc <MCAL_DIO_u8SetPinDirection+0x1c6>
			} else if (Loc_u8PortID == PortC) {
    2c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8e:	82 30       	cpi	r24, 0x02	; 2
    2c90:	a9 f4       	brne	.+42     	; 0x2cbc <MCAL_DIO_u8SetPinDirection+0xc6>
				SET_BIT(DDRC, Loc_u8PinID);
    2c92:	a4 e3       	ldi	r26, 0x34	; 52
    2c94:	b0 e0       	ldi	r27, 0x00	; 0
    2c96:	e4 e3       	ldi	r30, 0x34	; 52
    2c98:	f0 e0       	ldi	r31, 0x00	; 0
    2c9a:	80 81       	ld	r24, Z
    2c9c:	48 2f       	mov	r20, r24
    2c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca0:	28 2f       	mov	r18, r24
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	81 e0       	ldi	r24, 0x01	; 1
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	02 2e       	mov	r0, r18
    2caa:	02 c0       	rjmp	.+4      	; 0x2cb0 <MCAL_DIO_u8SetPinDirection+0xba>
    2cac:	88 0f       	add	r24, r24
    2cae:	99 1f       	adc	r25, r25
    2cb0:	0a 94       	dec	r0
    2cb2:	e2 f7       	brpl	.-8      	; 0x2cac <MCAL_DIO_u8SetPinDirection+0xb6>
    2cb4:	84 2b       	or	r24, r20
    2cb6:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2cb8:	19 82       	std	Y+1, r1	; 0x01
    2cba:	80 c0       	rjmp	.+256    	; 0x2dbc <MCAL_DIO_u8SetPinDirection+0x1c6>
			} else if (Loc_u8PortID == PortD) {
    2cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cbe:	83 30       	cpi	r24, 0x03	; 3
    2cc0:	09 f0       	breq	.+2      	; 0x2cc4 <MCAL_DIO_u8SetPinDirection+0xce>
    2cc2:	7c c0       	rjmp	.+248    	; 0x2dbc <MCAL_DIO_u8SetPinDirection+0x1c6>
				SET_BIT(DDRD, Loc_u8PinID);
    2cc4:	a1 e3       	ldi	r26, 0x31	; 49
    2cc6:	b0 e0       	ldi	r27, 0x00	; 0
    2cc8:	e1 e3       	ldi	r30, 0x31	; 49
    2cca:	f0 e0       	ldi	r31, 0x00	; 0
    2ccc:	80 81       	ld	r24, Z
    2cce:	48 2f       	mov	r20, r24
    2cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd2:	28 2f       	mov	r18, r24
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	81 e0       	ldi	r24, 0x01	; 1
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	02 2e       	mov	r0, r18
    2cdc:	02 c0       	rjmp	.+4      	; 0x2ce2 <MCAL_DIO_u8SetPinDirection+0xec>
    2cde:	88 0f       	add	r24, r24
    2ce0:	99 1f       	adc	r25, r25
    2ce2:	0a 94       	dec	r0
    2ce4:	e2 f7       	brpl	.-8      	; 0x2cde <MCAL_DIO_u8SetPinDirection+0xe8>
    2ce6:	84 2b       	or	r24, r20
    2ce8:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2cea:	19 82       	std	Y+1, r1	; 0x01
    2cec:	67 c0       	rjmp	.+206    	; 0x2dbc <MCAL_DIO_u8SetPinDirection+0x1c6>
			} else {
				//Do Nothing
			}
		} else if (Loc_u8PinDirection == Pin_Low) {
    2cee:	8c 81       	ldd	r24, Y+4	; 0x04
    2cf0:	88 23       	and	r24, r24
    2cf2:	09 f0       	breq	.+2      	; 0x2cf6 <MCAL_DIO_u8SetPinDirection+0x100>
    2cf4:	63 c0       	rjmp	.+198    	; 0x2dbc <MCAL_DIO_u8SetPinDirection+0x1c6>
			if (Loc_u8PortID == PortA) {
    2cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf8:	88 23       	and	r24, r24
    2cfa:	b1 f4       	brne	.+44     	; 0x2d28 <MCAL_DIO_u8SetPinDirection+0x132>
				CLR_BIT(DDRA, Loc_u8PinID);
    2cfc:	aa e3       	ldi	r26, 0x3A	; 58
    2cfe:	b0 e0       	ldi	r27, 0x00	; 0
    2d00:	ea e3       	ldi	r30, 0x3A	; 58
    2d02:	f0 e0       	ldi	r31, 0x00	; 0
    2d04:	80 81       	ld	r24, Z
    2d06:	48 2f       	mov	r20, r24
    2d08:	8b 81       	ldd	r24, Y+3	; 0x03
    2d0a:	28 2f       	mov	r18, r24
    2d0c:	30 e0       	ldi	r19, 0x00	; 0
    2d0e:	81 e0       	ldi	r24, 0x01	; 1
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	02 2e       	mov	r0, r18
    2d14:	02 c0       	rjmp	.+4      	; 0x2d1a <MCAL_DIO_u8SetPinDirection+0x124>
    2d16:	88 0f       	add	r24, r24
    2d18:	99 1f       	adc	r25, r25
    2d1a:	0a 94       	dec	r0
    2d1c:	e2 f7       	brpl	.-8      	; 0x2d16 <MCAL_DIO_u8SetPinDirection+0x120>
    2d1e:	80 95       	com	r24
    2d20:	84 23       	and	r24, r20
    2d22:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2d24:	19 82       	std	Y+1, r1	; 0x01
    2d26:	4a c0       	rjmp	.+148    	; 0x2dbc <MCAL_DIO_u8SetPinDirection+0x1c6>
			} else if (Loc_u8PortID == PortB) {
    2d28:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2a:	81 30       	cpi	r24, 0x01	; 1
    2d2c:	b1 f4       	brne	.+44     	; 0x2d5a <MCAL_DIO_u8SetPinDirection+0x164>
				CLR_BIT(DDRB, Loc_u8PinID);
    2d2e:	a7 e3       	ldi	r26, 0x37	; 55
    2d30:	b0 e0       	ldi	r27, 0x00	; 0
    2d32:	e7 e3       	ldi	r30, 0x37	; 55
    2d34:	f0 e0       	ldi	r31, 0x00	; 0
    2d36:	80 81       	ld	r24, Z
    2d38:	48 2f       	mov	r20, r24
    2d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d3c:	28 2f       	mov	r18, r24
    2d3e:	30 e0       	ldi	r19, 0x00	; 0
    2d40:	81 e0       	ldi	r24, 0x01	; 1
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	02 2e       	mov	r0, r18
    2d46:	02 c0       	rjmp	.+4      	; 0x2d4c <MCAL_DIO_u8SetPinDirection+0x156>
    2d48:	88 0f       	add	r24, r24
    2d4a:	99 1f       	adc	r25, r25
    2d4c:	0a 94       	dec	r0
    2d4e:	e2 f7       	brpl	.-8      	; 0x2d48 <MCAL_DIO_u8SetPinDirection+0x152>
    2d50:	80 95       	com	r24
    2d52:	84 23       	and	r24, r20
    2d54:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2d56:	19 82       	std	Y+1, r1	; 0x01
    2d58:	31 c0       	rjmp	.+98     	; 0x2dbc <MCAL_DIO_u8SetPinDirection+0x1c6>
			} else if (Loc_u8PortID == PortC) {
    2d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d5c:	82 30       	cpi	r24, 0x02	; 2
    2d5e:	b1 f4       	brne	.+44     	; 0x2d8c <MCAL_DIO_u8SetPinDirection+0x196>
				CLR_BIT(DDRC, Loc_u8PinID);
    2d60:	a4 e3       	ldi	r26, 0x34	; 52
    2d62:	b0 e0       	ldi	r27, 0x00	; 0
    2d64:	e4 e3       	ldi	r30, 0x34	; 52
    2d66:	f0 e0       	ldi	r31, 0x00	; 0
    2d68:	80 81       	ld	r24, Z
    2d6a:	48 2f       	mov	r20, r24
    2d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6e:	28 2f       	mov	r18, r24
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	81 e0       	ldi	r24, 0x01	; 1
    2d74:	90 e0       	ldi	r25, 0x00	; 0
    2d76:	02 2e       	mov	r0, r18
    2d78:	02 c0       	rjmp	.+4      	; 0x2d7e <MCAL_DIO_u8SetPinDirection+0x188>
    2d7a:	88 0f       	add	r24, r24
    2d7c:	99 1f       	adc	r25, r25
    2d7e:	0a 94       	dec	r0
    2d80:	e2 f7       	brpl	.-8      	; 0x2d7a <MCAL_DIO_u8SetPinDirection+0x184>
    2d82:	80 95       	com	r24
    2d84:	84 23       	and	r24, r20
    2d86:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2d88:	19 82       	std	Y+1, r1	; 0x01
    2d8a:	18 c0       	rjmp	.+48     	; 0x2dbc <MCAL_DIO_u8SetPinDirection+0x1c6>
			} else if (Loc_u8PortID == PortD) {
    2d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d8e:	83 30       	cpi	r24, 0x03	; 3
    2d90:	a9 f4       	brne	.+42     	; 0x2dbc <MCAL_DIO_u8SetPinDirection+0x1c6>
				CLR_BIT(DDRD, Loc_u8PinID);
    2d92:	a1 e3       	ldi	r26, 0x31	; 49
    2d94:	b0 e0       	ldi	r27, 0x00	; 0
    2d96:	e1 e3       	ldi	r30, 0x31	; 49
    2d98:	f0 e0       	ldi	r31, 0x00	; 0
    2d9a:	80 81       	ld	r24, Z
    2d9c:	48 2f       	mov	r20, r24
    2d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2da0:	28 2f       	mov	r18, r24
    2da2:	30 e0       	ldi	r19, 0x00	; 0
    2da4:	81 e0       	ldi	r24, 0x01	; 1
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	02 2e       	mov	r0, r18
    2daa:	02 c0       	rjmp	.+4      	; 0x2db0 <MCAL_DIO_u8SetPinDirection+0x1ba>
    2dac:	88 0f       	add	r24, r24
    2dae:	99 1f       	adc	r25, r25
    2db0:	0a 94       	dec	r0
    2db2:	e2 f7       	brpl	.-8      	; 0x2dac <MCAL_DIO_u8SetPinDirection+0x1b6>
    2db4:	80 95       	com	r24
    2db6:	84 23       	and	r24, r20
    2db8:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2dba:	19 82       	std	Y+1, r1	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    2dbc:	89 81       	ldd	r24, Y+1	; 0x01

}
    2dbe:	0f 90       	pop	r0
    2dc0:	0f 90       	pop	r0
    2dc2:	0f 90       	pop	r0
    2dc4:	0f 90       	pop	r0
    2dc6:	cf 91       	pop	r28
    2dc8:	df 91       	pop	r29
    2dca:	08 95       	ret

00002dcc <MCAL_DIO_u8SetPortValue>:

STD_Type MCAL_DIO_u8SetPortValue(u8 Loc_u8PortID, u8 Loc_u8PortValue) {
    2dcc:	df 93       	push	r29
    2dce:	cf 93       	push	r28
    2dd0:	00 d0       	rcall	.+0      	; 0x2dd2 <MCAL_DIO_u8SetPortValue+0x6>
    2dd2:	0f 92       	push	r0
    2dd4:	cd b7       	in	r28, 0x3d	; 61
    2dd6:	de b7       	in	r29, 0x3e	; 62
    2dd8:	8a 83       	std	Y+2, r24	; 0x02
    2dda:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Return_Value = E_NOT_OK;
    2ddc:	81 e0       	ldi	r24, 0x01	; 1
    2dde:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD && Loc_u8PortValue <= PORT_OUTPUT) {
    2de0:	8a 81       	ldd	r24, Y+2	; 0x02
    2de2:	84 30       	cpi	r24, 0x04	; 4
    2de4:	08 f0       	brcs	.+2      	; 0x2de8 <MCAL_DIO_u8SetPortValue+0x1c>
    2de6:	6e c0       	rjmp	.+220    	; 0x2ec4 <MCAL_DIO_u8SetPortValue+0xf8>
		if (Loc_u8PortValue == PORT_OUTPUT) {
    2de8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dea:	8f 3f       	cpi	r24, 0xFF	; 255
    2dec:	29 f5       	brne	.+74     	; 0x2e38 <MCAL_DIO_u8SetPortValue+0x6c>
			if (Loc_u8PortID == PortA) {
    2dee:	8a 81       	ldd	r24, Y+2	; 0x02
    2df0:	88 23       	and	r24, r24
    2df2:	31 f4       	brne	.+12     	; 0x2e00 <MCAL_DIO_u8SetPortValue+0x34>
				PORTA = PORT_OUTPUT;
    2df4:	eb e3       	ldi	r30, 0x3B	; 59
    2df6:	f0 e0       	ldi	r31, 0x00	; 0
    2df8:	8f ef       	ldi	r24, 0xFF	; 255
    2dfa:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2dfc:	19 82       	std	Y+1, r1	; 0x01
    2dfe:	62 c0       	rjmp	.+196    	; 0x2ec4 <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortB) {
    2e00:	8a 81       	ldd	r24, Y+2	; 0x02
    2e02:	81 30       	cpi	r24, 0x01	; 1
    2e04:	31 f4       	brne	.+12     	; 0x2e12 <MCAL_DIO_u8SetPortValue+0x46>
				PORTB = PORT_OUTPUT;
    2e06:	e8 e3       	ldi	r30, 0x38	; 56
    2e08:	f0 e0       	ldi	r31, 0x00	; 0
    2e0a:	8f ef       	ldi	r24, 0xFF	; 255
    2e0c:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2e0e:	19 82       	std	Y+1, r1	; 0x01
    2e10:	59 c0       	rjmp	.+178    	; 0x2ec4 <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortC) {
    2e12:	8a 81       	ldd	r24, Y+2	; 0x02
    2e14:	82 30       	cpi	r24, 0x02	; 2
    2e16:	31 f4       	brne	.+12     	; 0x2e24 <MCAL_DIO_u8SetPortValue+0x58>
				PORTC = PORT_OUTPUT;
    2e18:	e5 e3       	ldi	r30, 0x35	; 53
    2e1a:	f0 e0       	ldi	r31, 0x00	; 0
    2e1c:	8f ef       	ldi	r24, 0xFF	; 255
    2e1e:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2e20:	19 82       	std	Y+1, r1	; 0x01
    2e22:	50 c0       	rjmp	.+160    	; 0x2ec4 <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortD) {
    2e24:	8a 81       	ldd	r24, Y+2	; 0x02
    2e26:	83 30       	cpi	r24, 0x03	; 3
    2e28:	09 f0       	breq	.+2      	; 0x2e2c <MCAL_DIO_u8SetPortValue+0x60>
    2e2a:	4c c0       	rjmp	.+152    	; 0x2ec4 <MCAL_DIO_u8SetPortValue+0xf8>
				PORTD = PORT_OUTPUT;
    2e2c:	e2 e3       	ldi	r30, 0x32	; 50
    2e2e:	f0 e0       	ldi	r31, 0x00	; 0
    2e30:	8f ef       	ldi	r24, 0xFF	; 255
    2e32:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2e34:	19 82       	std	Y+1, r1	; 0x01
    2e36:	46 c0       	rjmp	.+140    	; 0x2ec4 <MCAL_DIO_u8SetPortValue+0xf8>
			} else {
				//Do Nothing
			}
		} else if (Loc_u8PortValue == PORT_INPUT) {
    2e38:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3a:	88 23       	and	r24, r24
    2e3c:	01 f5       	brne	.+64     	; 0x2e7e <MCAL_DIO_u8SetPortValue+0xb2>
			if (Loc_u8PortID == PortA) {
    2e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e40:	88 23       	and	r24, r24
    2e42:	29 f4       	brne	.+10     	; 0x2e4e <MCAL_DIO_u8SetPortValue+0x82>
				PORTA = PORT_INPUT;
    2e44:	eb e3       	ldi	r30, 0x3B	; 59
    2e46:	f0 e0       	ldi	r31, 0x00	; 0
    2e48:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    2e4a:	19 82       	std	Y+1, r1	; 0x01
    2e4c:	3b c0       	rjmp	.+118    	; 0x2ec4 <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortB) {
    2e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e50:	81 30       	cpi	r24, 0x01	; 1
    2e52:	29 f4       	brne	.+10     	; 0x2e5e <MCAL_DIO_u8SetPortValue+0x92>
				PORTB = PORT_INPUT;
    2e54:	e8 e3       	ldi	r30, 0x38	; 56
    2e56:	f0 e0       	ldi	r31, 0x00	; 0
    2e58:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    2e5a:	19 82       	std	Y+1, r1	; 0x01
    2e5c:	33 c0       	rjmp	.+102    	; 0x2ec4 <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortC) {
    2e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e60:	82 30       	cpi	r24, 0x02	; 2
    2e62:	29 f4       	brne	.+10     	; 0x2e6e <MCAL_DIO_u8SetPortValue+0xa2>
				PORTC = PORT_INPUT;
    2e64:	e5 e3       	ldi	r30, 0x35	; 53
    2e66:	f0 e0       	ldi	r31, 0x00	; 0
    2e68:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    2e6a:	19 82       	std	Y+1, r1	; 0x01
    2e6c:	2b c0       	rjmp	.+86     	; 0x2ec4 <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortD) {
    2e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e70:	83 30       	cpi	r24, 0x03	; 3
    2e72:	41 f5       	brne	.+80     	; 0x2ec4 <MCAL_DIO_u8SetPortValue+0xf8>
				PORTD = PORT_INPUT;
    2e74:	e2 e3       	ldi	r30, 0x32	; 50
    2e76:	f0 e0       	ldi	r31, 0x00	; 0
    2e78:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    2e7a:	19 82       	std	Y+1, r1	; 0x01
    2e7c:	23 c0       	rjmp	.+70     	; 0x2ec4 <MCAL_DIO_u8SetPortValue+0xf8>
			} else {
				//Do Nothing
			}
		} else {
			if (Loc_u8PortID == PortA) {
    2e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e80:	88 23       	and	r24, r24
    2e82:	31 f4       	brne	.+12     	; 0x2e90 <MCAL_DIO_u8SetPortValue+0xc4>
				PORTA = Loc_u8PortValue;
    2e84:	eb e3       	ldi	r30, 0x3B	; 59
    2e86:	f0 e0       	ldi	r31, 0x00	; 0
    2e88:	8b 81       	ldd	r24, Y+3	; 0x03
    2e8a:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2e8c:	19 82       	std	Y+1, r1	; 0x01
    2e8e:	1a c0       	rjmp	.+52     	; 0x2ec4 <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortB) {
    2e90:	8a 81       	ldd	r24, Y+2	; 0x02
    2e92:	81 30       	cpi	r24, 0x01	; 1
    2e94:	31 f4       	brne	.+12     	; 0x2ea2 <MCAL_DIO_u8SetPortValue+0xd6>
				PORTB = Loc_u8PortValue;
    2e96:	e8 e3       	ldi	r30, 0x38	; 56
    2e98:	f0 e0       	ldi	r31, 0x00	; 0
    2e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9c:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2e9e:	19 82       	std	Y+1, r1	; 0x01
    2ea0:	11 c0       	rjmp	.+34     	; 0x2ec4 <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortC) {
    2ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea4:	82 30       	cpi	r24, 0x02	; 2
    2ea6:	31 f4       	brne	.+12     	; 0x2eb4 <MCAL_DIO_u8SetPortValue+0xe8>
				PORTC = Loc_u8PortValue;
    2ea8:	e5 e3       	ldi	r30, 0x35	; 53
    2eaa:	f0 e0       	ldi	r31, 0x00	; 0
    2eac:	8b 81       	ldd	r24, Y+3	; 0x03
    2eae:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2eb0:	19 82       	std	Y+1, r1	; 0x01
    2eb2:	08 c0       	rjmp	.+16     	; 0x2ec4 <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortD) {
    2eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb6:	83 30       	cpi	r24, 0x03	; 3
    2eb8:	29 f4       	brne	.+10     	; 0x2ec4 <MCAL_DIO_u8SetPortValue+0xf8>
				PORTD = Loc_u8PortValue;
    2eba:	e2 e3       	ldi	r30, 0x32	; 50
    2ebc:	f0 e0       	ldi	r31, 0x00	; 0
    2ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec0:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2ec2:	19 82       	std	Y+1, r1	; 0x01
			}
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    2ec4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ec6:	0f 90       	pop	r0
    2ec8:	0f 90       	pop	r0
    2eca:	0f 90       	pop	r0
    2ecc:	cf 91       	pop	r28
    2ece:	df 91       	pop	r29
    2ed0:	08 95       	ret

00002ed2 <MCAL_DIO_u8SetPinValue>:

STD_Type MCAL_DIO_u8SetPinValue(u8 Loc_u8PortID, u8 Loc_u8PinID,
		u8 Loc_u8PinValue) {
    2ed2:	df 93       	push	r29
    2ed4:	cf 93       	push	r28
    2ed6:	00 d0       	rcall	.+0      	; 0x2ed8 <MCAL_DIO_u8SetPinValue+0x6>
    2ed8:	00 d0       	rcall	.+0      	; 0x2eda <MCAL_DIO_u8SetPinValue+0x8>
    2eda:	cd b7       	in	r28, 0x3d	; 61
    2edc:	de b7       	in	r29, 0x3e	; 62
    2ede:	8a 83       	std	Y+2, r24	; 0x02
    2ee0:	6b 83       	std	Y+3, r22	; 0x03
    2ee2:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Return_Value = E_NOT_OK;
    2ee4:	81 e0       	ldi	r24, 0x01	; 1
    2ee6:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD && Loc_u8PinID <= Num_Of_Pins
    2ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eea:	84 30       	cpi	r24, 0x04	; 4
    2eec:	08 f0       	brcs	.+2      	; 0x2ef0 <MCAL_DIO_u8SetPinValue+0x1e>
    2eee:	d4 c0       	rjmp	.+424    	; 0x3098 <MCAL_DIO_u8SetPinValue+0x1c6>
    2ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef2:	88 30       	cpi	r24, 0x08	; 8
    2ef4:	08 f0       	brcs	.+2      	; 0x2ef8 <MCAL_DIO_u8SetPinValue+0x26>
    2ef6:	d0 c0       	rjmp	.+416    	; 0x3098 <MCAL_DIO_u8SetPinValue+0x1c6>
    2ef8:	8c 81       	ldd	r24, Y+4	; 0x04
    2efa:	82 30       	cpi	r24, 0x02	; 2
    2efc:	08 f0       	brcs	.+2      	; 0x2f00 <MCAL_DIO_u8SetPinValue+0x2e>
    2efe:	cc c0       	rjmp	.+408    	; 0x3098 <MCAL_DIO_u8SetPinValue+0x1c6>
			&& Loc_u8PinValue <= Pin_High) {
		if (Loc_u8PinValue == Pin_High) {
    2f00:	8c 81       	ldd	r24, Y+4	; 0x04
    2f02:	81 30       	cpi	r24, 0x01	; 1
    2f04:	09 f0       	breq	.+2      	; 0x2f08 <MCAL_DIO_u8SetPinValue+0x36>
    2f06:	61 c0       	rjmp	.+194    	; 0x2fca <MCAL_DIO_u8SetPinValue+0xf8>
			if (Loc_u8PortID == PortA) {
    2f08:	8a 81       	ldd	r24, Y+2	; 0x02
    2f0a:	88 23       	and	r24, r24
    2f0c:	a9 f4       	brne	.+42     	; 0x2f38 <MCAL_DIO_u8SetPinValue+0x66>
				SET_BIT(PORTA, Loc_u8PinID);
    2f0e:	ab e3       	ldi	r26, 0x3B	; 59
    2f10:	b0 e0       	ldi	r27, 0x00	; 0
    2f12:	eb e3       	ldi	r30, 0x3B	; 59
    2f14:	f0 e0       	ldi	r31, 0x00	; 0
    2f16:	80 81       	ld	r24, Z
    2f18:	48 2f       	mov	r20, r24
    2f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1c:	28 2f       	mov	r18, r24
    2f1e:	30 e0       	ldi	r19, 0x00	; 0
    2f20:	81 e0       	ldi	r24, 0x01	; 1
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	02 2e       	mov	r0, r18
    2f26:	02 c0       	rjmp	.+4      	; 0x2f2c <MCAL_DIO_u8SetPinValue+0x5a>
    2f28:	88 0f       	add	r24, r24
    2f2a:	99 1f       	adc	r25, r25
    2f2c:	0a 94       	dec	r0
    2f2e:	e2 f7       	brpl	.-8      	; 0x2f28 <MCAL_DIO_u8SetPinValue+0x56>
    2f30:	84 2b       	or	r24, r20
    2f32:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2f34:	19 82       	std	Y+1, r1	; 0x01
    2f36:	b0 c0       	rjmp	.+352    	; 0x3098 <MCAL_DIO_u8SetPinValue+0x1c6>
			} else if (Loc_u8PortID == PortB) {
    2f38:	8a 81       	ldd	r24, Y+2	; 0x02
    2f3a:	81 30       	cpi	r24, 0x01	; 1
    2f3c:	a9 f4       	brne	.+42     	; 0x2f68 <MCAL_DIO_u8SetPinValue+0x96>
				SET_BIT(PORTB, Loc_u8PinID);
    2f3e:	a8 e3       	ldi	r26, 0x38	; 56
    2f40:	b0 e0       	ldi	r27, 0x00	; 0
    2f42:	e8 e3       	ldi	r30, 0x38	; 56
    2f44:	f0 e0       	ldi	r31, 0x00	; 0
    2f46:	80 81       	ld	r24, Z
    2f48:	48 2f       	mov	r20, r24
    2f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f4c:	28 2f       	mov	r18, r24
    2f4e:	30 e0       	ldi	r19, 0x00	; 0
    2f50:	81 e0       	ldi	r24, 0x01	; 1
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	02 2e       	mov	r0, r18
    2f56:	02 c0       	rjmp	.+4      	; 0x2f5c <MCAL_DIO_u8SetPinValue+0x8a>
    2f58:	88 0f       	add	r24, r24
    2f5a:	99 1f       	adc	r25, r25
    2f5c:	0a 94       	dec	r0
    2f5e:	e2 f7       	brpl	.-8      	; 0x2f58 <MCAL_DIO_u8SetPinValue+0x86>
    2f60:	84 2b       	or	r24, r20
    2f62:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2f64:	19 82       	std	Y+1, r1	; 0x01
    2f66:	98 c0       	rjmp	.+304    	; 0x3098 <MCAL_DIO_u8SetPinValue+0x1c6>
			} else if (Loc_u8PortID == PortC) {
    2f68:	8a 81       	ldd	r24, Y+2	; 0x02
    2f6a:	82 30       	cpi	r24, 0x02	; 2
    2f6c:	a9 f4       	brne	.+42     	; 0x2f98 <MCAL_DIO_u8SetPinValue+0xc6>
				SET_BIT(PORTC, Loc_u8PinID);
    2f6e:	a5 e3       	ldi	r26, 0x35	; 53
    2f70:	b0 e0       	ldi	r27, 0x00	; 0
    2f72:	e5 e3       	ldi	r30, 0x35	; 53
    2f74:	f0 e0       	ldi	r31, 0x00	; 0
    2f76:	80 81       	ld	r24, Z
    2f78:	48 2f       	mov	r20, r24
    2f7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f7c:	28 2f       	mov	r18, r24
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	81 e0       	ldi	r24, 0x01	; 1
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	02 2e       	mov	r0, r18
    2f86:	02 c0       	rjmp	.+4      	; 0x2f8c <MCAL_DIO_u8SetPinValue+0xba>
    2f88:	88 0f       	add	r24, r24
    2f8a:	99 1f       	adc	r25, r25
    2f8c:	0a 94       	dec	r0
    2f8e:	e2 f7       	brpl	.-8      	; 0x2f88 <MCAL_DIO_u8SetPinValue+0xb6>
    2f90:	84 2b       	or	r24, r20
    2f92:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2f94:	19 82       	std	Y+1, r1	; 0x01
    2f96:	80 c0       	rjmp	.+256    	; 0x3098 <MCAL_DIO_u8SetPinValue+0x1c6>
			} else if (Loc_u8PortID == PortD) {
    2f98:	8a 81       	ldd	r24, Y+2	; 0x02
    2f9a:	83 30       	cpi	r24, 0x03	; 3
    2f9c:	09 f0       	breq	.+2      	; 0x2fa0 <MCAL_DIO_u8SetPinValue+0xce>
    2f9e:	7c c0       	rjmp	.+248    	; 0x3098 <MCAL_DIO_u8SetPinValue+0x1c6>
				SET_BIT(PORTD, Loc_u8PinID);
    2fa0:	a2 e3       	ldi	r26, 0x32	; 50
    2fa2:	b0 e0       	ldi	r27, 0x00	; 0
    2fa4:	e2 e3       	ldi	r30, 0x32	; 50
    2fa6:	f0 e0       	ldi	r31, 0x00	; 0
    2fa8:	80 81       	ld	r24, Z
    2faa:	48 2f       	mov	r20, r24
    2fac:	8b 81       	ldd	r24, Y+3	; 0x03
    2fae:	28 2f       	mov	r18, r24
    2fb0:	30 e0       	ldi	r19, 0x00	; 0
    2fb2:	81 e0       	ldi	r24, 0x01	; 1
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	02 2e       	mov	r0, r18
    2fb8:	02 c0       	rjmp	.+4      	; 0x2fbe <MCAL_DIO_u8SetPinValue+0xec>
    2fba:	88 0f       	add	r24, r24
    2fbc:	99 1f       	adc	r25, r25
    2fbe:	0a 94       	dec	r0
    2fc0:	e2 f7       	brpl	.-8      	; 0x2fba <MCAL_DIO_u8SetPinValue+0xe8>
    2fc2:	84 2b       	or	r24, r20
    2fc4:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2fc6:	19 82       	std	Y+1, r1	; 0x01
    2fc8:	67 c0       	rjmp	.+206    	; 0x3098 <MCAL_DIO_u8SetPinValue+0x1c6>
			} else {
				//Do Nothing
			}
		} else if (Loc_u8PinValue == Pin_Low) {
    2fca:	8c 81       	ldd	r24, Y+4	; 0x04
    2fcc:	88 23       	and	r24, r24
    2fce:	09 f0       	breq	.+2      	; 0x2fd2 <MCAL_DIO_u8SetPinValue+0x100>
    2fd0:	63 c0       	rjmp	.+198    	; 0x3098 <MCAL_DIO_u8SetPinValue+0x1c6>
			if (Loc_u8PortID == PortA) {
    2fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd4:	88 23       	and	r24, r24
    2fd6:	b1 f4       	brne	.+44     	; 0x3004 <MCAL_DIO_u8SetPinValue+0x132>
				CLR_BIT(PORTA, Loc_u8PinID);
    2fd8:	ab e3       	ldi	r26, 0x3B	; 59
    2fda:	b0 e0       	ldi	r27, 0x00	; 0
    2fdc:	eb e3       	ldi	r30, 0x3B	; 59
    2fde:	f0 e0       	ldi	r31, 0x00	; 0
    2fe0:	80 81       	ld	r24, Z
    2fe2:	48 2f       	mov	r20, r24
    2fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe6:	28 2f       	mov	r18, r24
    2fe8:	30 e0       	ldi	r19, 0x00	; 0
    2fea:	81 e0       	ldi	r24, 0x01	; 1
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	02 2e       	mov	r0, r18
    2ff0:	02 c0       	rjmp	.+4      	; 0x2ff6 <MCAL_DIO_u8SetPinValue+0x124>
    2ff2:	88 0f       	add	r24, r24
    2ff4:	99 1f       	adc	r25, r25
    2ff6:	0a 94       	dec	r0
    2ff8:	e2 f7       	brpl	.-8      	; 0x2ff2 <MCAL_DIO_u8SetPinValue+0x120>
    2ffa:	80 95       	com	r24
    2ffc:	84 23       	and	r24, r20
    2ffe:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    3000:	19 82       	std	Y+1, r1	; 0x01
    3002:	4a c0       	rjmp	.+148    	; 0x3098 <MCAL_DIO_u8SetPinValue+0x1c6>
			} else if (Loc_u8PortID == PortB) {
    3004:	8a 81       	ldd	r24, Y+2	; 0x02
    3006:	81 30       	cpi	r24, 0x01	; 1
    3008:	b1 f4       	brne	.+44     	; 0x3036 <MCAL_DIO_u8SetPinValue+0x164>
				CLR_BIT(PORTB, Loc_u8PinID);
    300a:	a8 e3       	ldi	r26, 0x38	; 56
    300c:	b0 e0       	ldi	r27, 0x00	; 0
    300e:	e8 e3       	ldi	r30, 0x38	; 56
    3010:	f0 e0       	ldi	r31, 0x00	; 0
    3012:	80 81       	ld	r24, Z
    3014:	48 2f       	mov	r20, r24
    3016:	8b 81       	ldd	r24, Y+3	; 0x03
    3018:	28 2f       	mov	r18, r24
    301a:	30 e0       	ldi	r19, 0x00	; 0
    301c:	81 e0       	ldi	r24, 0x01	; 1
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	02 2e       	mov	r0, r18
    3022:	02 c0       	rjmp	.+4      	; 0x3028 <MCAL_DIO_u8SetPinValue+0x156>
    3024:	88 0f       	add	r24, r24
    3026:	99 1f       	adc	r25, r25
    3028:	0a 94       	dec	r0
    302a:	e2 f7       	brpl	.-8      	; 0x3024 <MCAL_DIO_u8SetPinValue+0x152>
    302c:	80 95       	com	r24
    302e:	84 23       	and	r24, r20
    3030:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    3032:	19 82       	std	Y+1, r1	; 0x01
    3034:	31 c0       	rjmp	.+98     	; 0x3098 <MCAL_DIO_u8SetPinValue+0x1c6>
			} else if (Loc_u8PortID == PortC) {
    3036:	8a 81       	ldd	r24, Y+2	; 0x02
    3038:	82 30       	cpi	r24, 0x02	; 2
    303a:	b1 f4       	brne	.+44     	; 0x3068 <MCAL_DIO_u8SetPinValue+0x196>
				CLR_BIT(PORTC, Loc_u8PinID);
    303c:	a5 e3       	ldi	r26, 0x35	; 53
    303e:	b0 e0       	ldi	r27, 0x00	; 0
    3040:	e5 e3       	ldi	r30, 0x35	; 53
    3042:	f0 e0       	ldi	r31, 0x00	; 0
    3044:	80 81       	ld	r24, Z
    3046:	48 2f       	mov	r20, r24
    3048:	8b 81       	ldd	r24, Y+3	; 0x03
    304a:	28 2f       	mov	r18, r24
    304c:	30 e0       	ldi	r19, 0x00	; 0
    304e:	81 e0       	ldi	r24, 0x01	; 1
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	02 2e       	mov	r0, r18
    3054:	02 c0       	rjmp	.+4      	; 0x305a <MCAL_DIO_u8SetPinValue+0x188>
    3056:	88 0f       	add	r24, r24
    3058:	99 1f       	adc	r25, r25
    305a:	0a 94       	dec	r0
    305c:	e2 f7       	brpl	.-8      	; 0x3056 <MCAL_DIO_u8SetPinValue+0x184>
    305e:	80 95       	com	r24
    3060:	84 23       	and	r24, r20
    3062:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    3064:	19 82       	std	Y+1, r1	; 0x01
    3066:	18 c0       	rjmp	.+48     	; 0x3098 <MCAL_DIO_u8SetPinValue+0x1c6>
			} else if (Loc_u8PortID == PortD) {
    3068:	8a 81       	ldd	r24, Y+2	; 0x02
    306a:	83 30       	cpi	r24, 0x03	; 3
    306c:	a9 f4       	brne	.+42     	; 0x3098 <MCAL_DIO_u8SetPinValue+0x1c6>
				CLR_BIT(PORTD, Loc_u8PinID);
    306e:	a2 e3       	ldi	r26, 0x32	; 50
    3070:	b0 e0       	ldi	r27, 0x00	; 0
    3072:	e2 e3       	ldi	r30, 0x32	; 50
    3074:	f0 e0       	ldi	r31, 0x00	; 0
    3076:	80 81       	ld	r24, Z
    3078:	48 2f       	mov	r20, r24
    307a:	8b 81       	ldd	r24, Y+3	; 0x03
    307c:	28 2f       	mov	r18, r24
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	81 e0       	ldi	r24, 0x01	; 1
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	02 2e       	mov	r0, r18
    3086:	02 c0       	rjmp	.+4      	; 0x308c <MCAL_DIO_u8SetPinValue+0x1ba>
    3088:	88 0f       	add	r24, r24
    308a:	99 1f       	adc	r25, r25
    308c:	0a 94       	dec	r0
    308e:	e2 f7       	brpl	.-8      	; 0x3088 <MCAL_DIO_u8SetPinValue+0x1b6>
    3090:	80 95       	com	r24
    3092:	84 23       	and	r24, r20
    3094:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    3096:	19 82       	std	Y+1, r1	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    3098:	89 81       	ldd	r24, Y+1	; 0x01

}
    309a:	0f 90       	pop	r0
    309c:	0f 90       	pop	r0
    309e:	0f 90       	pop	r0
    30a0:	0f 90       	pop	r0
    30a2:	cf 91       	pop	r28
    30a4:	df 91       	pop	r29
    30a6:	08 95       	ret

000030a8 <MCAL_DIO_u8SGetPortValue>:

STD_Type MCAL_DIO_u8SGetPortValue(u8 Loc_u8PortID, u8* Loc_u8PortValue) {
    30a8:	df 93       	push	r29
    30aa:	cf 93       	push	r28
    30ac:	00 d0       	rcall	.+0      	; 0x30ae <MCAL_DIO_u8SGetPortValue+0x6>
    30ae:	00 d0       	rcall	.+0      	; 0x30b0 <MCAL_DIO_u8SGetPortValue+0x8>
    30b0:	cd b7       	in	r28, 0x3d	; 61
    30b2:	de b7       	in	r29, 0x3e	; 62
    30b4:	8a 83       	std	Y+2, r24	; 0x02
    30b6:	7c 83       	std	Y+4, r23	; 0x04
    30b8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Return_Value = E_NOT_OK;
    30ba:	81 e0       	ldi	r24, 0x01	; 1
    30bc:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD) {
    30be:	8a 81       	ldd	r24, Y+2	; 0x02
    30c0:	84 30       	cpi	r24, 0x04	; 4
    30c2:	58 f5       	brcc	.+86     	; 0x311a <MCAL_DIO_u8SGetPortValue+0x72>
		if (Loc_u8PortID == PortA) {
    30c4:	8a 81       	ldd	r24, Y+2	; 0x02
    30c6:	88 23       	and	r24, r24
    30c8:	41 f4       	brne	.+16     	; 0x30da <MCAL_DIO_u8SGetPortValue+0x32>
			*Loc_u8PortValue = PORTA;
    30ca:	eb e3       	ldi	r30, 0x3B	; 59
    30cc:	f0 e0       	ldi	r31, 0x00	; 0
    30ce:	80 81       	ld	r24, Z
    30d0:	eb 81       	ldd	r30, Y+3	; 0x03
    30d2:	fc 81       	ldd	r31, Y+4	; 0x04
    30d4:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    30d6:	19 82       	std	Y+1, r1	; 0x01
    30d8:	20 c0       	rjmp	.+64     	; 0x311a <MCAL_DIO_u8SGetPortValue+0x72>
		} else if (Loc_u8PortID == PortB) {
    30da:	8a 81       	ldd	r24, Y+2	; 0x02
    30dc:	81 30       	cpi	r24, 0x01	; 1
    30de:	41 f4       	brne	.+16     	; 0x30f0 <MCAL_DIO_u8SGetPortValue+0x48>
			*Loc_u8PortValue = PORTB;
    30e0:	e8 e3       	ldi	r30, 0x38	; 56
    30e2:	f0 e0       	ldi	r31, 0x00	; 0
    30e4:	80 81       	ld	r24, Z
    30e6:	eb 81       	ldd	r30, Y+3	; 0x03
    30e8:	fc 81       	ldd	r31, Y+4	; 0x04
    30ea:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    30ec:	19 82       	std	Y+1, r1	; 0x01
    30ee:	15 c0       	rjmp	.+42     	; 0x311a <MCAL_DIO_u8SGetPortValue+0x72>
		} else if (Loc_u8PortID == PortC) {
    30f0:	8a 81       	ldd	r24, Y+2	; 0x02
    30f2:	82 30       	cpi	r24, 0x02	; 2
    30f4:	41 f4       	brne	.+16     	; 0x3106 <MCAL_DIO_u8SGetPortValue+0x5e>
			*Loc_u8PortValue = PORTC;
    30f6:	e5 e3       	ldi	r30, 0x35	; 53
    30f8:	f0 e0       	ldi	r31, 0x00	; 0
    30fa:	80 81       	ld	r24, Z
    30fc:	eb 81       	ldd	r30, Y+3	; 0x03
    30fe:	fc 81       	ldd	r31, Y+4	; 0x04
    3100:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    3102:	19 82       	std	Y+1, r1	; 0x01
    3104:	0a c0       	rjmp	.+20     	; 0x311a <MCAL_DIO_u8SGetPortValue+0x72>
		} else if (Loc_u8PortID == PortD) {
    3106:	8a 81       	ldd	r24, Y+2	; 0x02
    3108:	83 30       	cpi	r24, 0x03	; 3
    310a:	39 f4       	brne	.+14     	; 0x311a <MCAL_DIO_u8SGetPortValue+0x72>
			*Loc_u8PortValue = PORTD;
    310c:	e2 e3       	ldi	r30, 0x32	; 50
    310e:	f0 e0       	ldi	r31, 0x00	; 0
    3110:	80 81       	ld	r24, Z
    3112:	eb 81       	ldd	r30, Y+3	; 0x03
    3114:	fc 81       	ldd	r31, Y+4	; 0x04
    3116:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    3118:	19 82       	std	Y+1, r1	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    311a:	89 81       	ldd	r24, Y+1	; 0x01
}
    311c:	0f 90       	pop	r0
    311e:	0f 90       	pop	r0
    3120:	0f 90       	pop	r0
    3122:	0f 90       	pop	r0
    3124:	cf 91       	pop	r28
    3126:	df 91       	pop	r29
    3128:	08 95       	ret

0000312a <MCAL_DIO_u8GetPinValue>:

STD_Type MCAL_DIO_u8GetPinValue(u8 Loc_u8PortID, u8 Loc_u8PinID,
		u8* Loc_u8PinValue) {
    312a:	df 93       	push	r29
    312c:	cf 93       	push	r28
    312e:	00 d0       	rcall	.+0      	; 0x3130 <MCAL_DIO_u8GetPinValue+0x6>
    3130:	00 d0       	rcall	.+0      	; 0x3132 <MCAL_DIO_u8GetPinValue+0x8>
    3132:	0f 92       	push	r0
    3134:	cd b7       	in	r28, 0x3d	; 61
    3136:	de b7       	in	r29, 0x3e	; 62
    3138:	8a 83       	std	Y+2, r24	; 0x02
    313a:	6b 83       	std	Y+3, r22	; 0x03
    313c:	5d 83       	std	Y+5, r21	; 0x05
    313e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Return_Value = E_NOT_OK;
    3140:	81 e0       	ldi	r24, 0x01	; 1
    3142:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD && Loc_u8PinID <= Num_Of_Pins) {
    3144:	8a 81       	ldd	r24, Y+2	; 0x02
    3146:	84 30       	cpi	r24, 0x04	; 4
    3148:	08 f0       	brcs	.+2      	; 0x314c <MCAL_DIO_u8GetPinValue+0x22>
    314a:	63 c0       	rjmp	.+198    	; 0x3212 <MCAL_DIO_u8GetPinValue+0xe8>
    314c:	8b 81       	ldd	r24, Y+3	; 0x03
    314e:	88 30       	cpi	r24, 0x08	; 8
    3150:	08 f0       	brcs	.+2      	; 0x3154 <MCAL_DIO_u8GetPinValue+0x2a>
    3152:	5f c0       	rjmp	.+190    	; 0x3212 <MCAL_DIO_u8GetPinValue+0xe8>
		if (Loc_u8PortID == PortA) {
    3154:	8a 81       	ldd	r24, Y+2	; 0x02
    3156:	88 23       	and	r24, r24
    3158:	a9 f4       	brne	.+42     	; 0x3184 <MCAL_DIO_u8GetPinValue+0x5a>
			*Loc_u8PinValue = GET_BIT(PINA, Loc_u8PinID);
    315a:	e9 e3       	ldi	r30, 0x39	; 57
    315c:	f0 e0       	ldi	r31, 0x00	; 0
    315e:	80 81       	ld	r24, Z
    3160:	28 2f       	mov	r18, r24
    3162:	30 e0       	ldi	r19, 0x00	; 0
    3164:	8b 81       	ldd	r24, Y+3	; 0x03
    3166:	88 2f       	mov	r24, r24
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	a9 01       	movw	r20, r18
    316c:	02 c0       	rjmp	.+4      	; 0x3172 <MCAL_DIO_u8GetPinValue+0x48>
    316e:	55 95       	asr	r21
    3170:	47 95       	ror	r20
    3172:	8a 95       	dec	r24
    3174:	e2 f7       	brpl	.-8      	; 0x316e <MCAL_DIO_u8GetPinValue+0x44>
    3176:	ca 01       	movw	r24, r20
    3178:	81 70       	andi	r24, 0x01	; 1
    317a:	ec 81       	ldd	r30, Y+4	; 0x04
    317c:	fd 81       	ldd	r31, Y+5	; 0x05
    317e:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    3180:	19 82       	std	Y+1, r1	; 0x01
    3182:	47 c0       	rjmp	.+142    	; 0x3212 <MCAL_DIO_u8GetPinValue+0xe8>
		} else if (Loc_u8PortID == PortB) {
    3184:	8a 81       	ldd	r24, Y+2	; 0x02
    3186:	81 30       	cpi	r24, 0x01	; 1
    3188:	a9 f4       	brne	.+42     	; 0x31b4 <MCAL_DIO_u8GetPinValue+0x8a>
			*Loc_u8PinValue = GET_BIT(PINB, Loc_u8PinID);
    318a:	e6 e3       	ldi	r30, 0x36	; 54
    318c:	f0 e0       	ldi	r31, 0x00	; 0
    318e:	80 81       	ld	r24, Z
    3190:	28 2f       	mov	r18, r24
    3192:	30 e0       	ldi	r19, 0x00	; 0
    3194:	8b 81       	ldd	r24, Y+3	; 0x03
    3196:	88 2f       	mov	r24, r24
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	a9 01       	movw	r20, r18
    319c:	02 c0       	rjmp	.+4      	; 0x31a2 <MCAL_DIO_u8GetPinValue+0x78>
    319e:	55 95       	asr	r21
    31a0:	47 95       	ror	r20
    31a2:	8a 95       	dec	r24
    31a4:	e2 f7       	brpl	.-8      	; 0x319e <MCAL_DIO_u8GetPinValue+0x74>
    31a6:	ca 01       	movw	r24, r20
    31a8:	81 70       	andi	r24, 0x01	; 1
    31aa:	ec 81       	ldd	r30, Y+4	; 0x04
    31ac:	fd 81       	ldd	r31, Y+5	; 0x05
    31ae:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    31b0:	19 82       	std	Y+1, r1	; 0x01
    31b2:	2f c0       	rjmp	.+94     	; 0x3212 <MCAL_DIO_u8GetPinValue+0xe8>
		} else if (Loc_u8PortID == PortC) {
    31b4:	8a 81       	ldd	r24, Y+2	; 0x02
    31b6:	82 30       	cpi	r24, 0x02	; 2
    31b8:	a9 f4       	brne	.+42     	; 0x31e4 <MCAL_DIO_u8GetPinValue+0xba>
			*Loc_u8PinValue = GET_BIT(PINC, Loc_u8PinID);
    31ba:	e3 e3       	ldi	r30, 0x33	; 51
    31bc:	f0 e0       	ldi	r31, 0x00	; 0
    31be:	80 81       	ld	r24, Z
    31c0:	28 2f       	mov	r18, r24
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	8b 81       	ldd	r24, Y+3	; 0x03
    31c6:	88 2f       	mov	r24, r24
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	a9 01       	movw	r20, r18
    31cc:	02 c0       	rjmp	.+4      	; 0x31d2 <MCAL_DIO_u8GetPinValue+0xa8>
    31ce:	55 95       	asr	r21
    31d0:	47 95       	ror	r20
    31d2:	8a 95       	dec	r24
    31d4:	e2 f7       	brpl	.-8      	; 0x31ce <MCAL_DIO_u8GetPinValue+0xa4>
    31d6:	ca 01       	movw	r24, r20
    31d8:	81 70       	andi	r24, 0x01	; 1
    31da:	ec 81       	ldd	r30, Y+4	; 0x04
    31dc:	fd 81       	ldd	r31, Y+5	; 0x05
    31de:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    31e0:	19 82       	std	Y+1, r1	; 0x01
    31e2:	17 c0       	rjmp	.+46     	; 0x3212 <MCAL_DIO_u8GetPinValue+0xe8>
		} else if (Loc_u8PortID == PortD) {
    31e4:	8a 81       	ldd	r24, Y+2	; 0x02
    31e6:	83 30       	cpi	r24, 0x03	; 3
    31e8:	a1 f4       	brne	.+40     	; 0x3212 <MCAL_DIO_u8GetPinValue+0xe8>
			*Loc_u8PinValue = GET_BIT(PIND, Loc_u8PinID);
    31ea:	e0 e3       	ldi	r30, 0x30	; 48
    31ec:	f0 e0       	ldi	r31, 0x00	; 0
    31ee:	80 81       	ld	r24, Z
    31f0:	28 2f       	mov	r18, r24
    31f2:	30 e0       	ldi	r19, 0x00	; 0
    31f4:	8b 81       	ldd	r24, Y+3	; 0x03
    31f6:	88 2f       	mov	r24, r24
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	a9 01       	movw	r20, r18
    31fc:	02 c0       	rjmp	.+4      	; 0x3202 <MCAL_DIO_u8GetPinValue+0xd8>
    31fe:	55 95       	asr	r21
    3200:	47 95       	ror	r20
    3202:	8a 95       	dec	r24
    3204:	e2 f7       	brpl	.-8      	; 0x31fe <MCAL_DIO_u8GetPinValue+0xd4>
    3206:	ca 01       	movw	r24, r20
    3208:	81 70       	andi	r24, 0x01	; 1
    320a:	ec 81       	ldd	r30, Y+4	; 0x04
    320c:	fd 81       	ldd	r31, Y+5	; 0x05
    320e:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    3210:	19 82       	std	Y+1, r1	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    3212:	89 81       	ldd	r24, Y+1	; 0x01
}
    3214:	0f 90       	pop	r0
    3216:	0f 90       	pop	r0
    3218:	0f 90       	pop	r0
    321a:	0f 90       	pop	r0
    321c:	0f 90       	pop	r0
    321e:	cf 91       	pop	r28
    3220:	df 91       	pop	r29
    3222:	08 95       	ret

00003224 <MCAL_DIO_u8TogglePortValue>:

STD_Type MCAL_DIO_u8TogglePortValue(u8 Loc_u8PortID) {
    3224:	df 93       	push	r29
    3226:	cf 93       	push	r28
    3228:	00 d0       	rcall	.+0      	; 0x322a <MCAL_DIO_u8TogglePortValue+0x6>
    322a:	cd b7       	in	r28, 0x3d	; 61
    322c:	de b7       	in	r29, 0x3e	; 62
    322e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Return_Value = E_NOT_OK;
    3230:	81 e0       	ldi	r24, 0x01	; 1
    3232:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD) {
    3234:	8a 81       	ldd	r24, Y+2	; 0x02
    3236:	84 30       	cpi	r24, 0x04	; 4
    3238:	78 f5       	brcc	.+94     	; 0x3298 <MCAL_DIO_u8TogglePortValue+0x74>
		if (Loc_u8PortID == PortA) {
    323a:	8a 81       	ldd	r24, Y+2	; 0x02
    323c:	88 23       	and	r24, r24
    323e:	49 f4       	brne	.+18     	; 0x3252 <MCAL_DIO_u8TogglePortValue+0x2e>
			PORTA = ~PORTA;
    3240:	ab e3       	ldi	r26, 0x3B	; 59
    3242:	b0 e0       	ldi	r27, 0x00	; 0
    3244:	eb e3       	ldi	r30, 0x3B	; 59
    3246:	f0 e0       	ldi	r31, 0x00	; 0
    3248:	80 81       	ld	r24, Z
    324a:	80 95       	com	r24
    324c:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    324e:	19 82       	std	Y+1, r1	; 0x01
    3250:	23 c0       	rjmp	.+70     	; 0x3298 <MCAL_DIO_u8TogglePortValue+0x74>
		} else if (Loc_u8PortID == PortB) {
    3252:	8a 81       	ldd	r24, Y+2	; 0x02
    3254:	81 30       	cpi	r24, 0x01	; 1
    3256:	49 f4       	brne	.+18     	; 0x326a <MCAL_DIO_u8TogglePortValue+0x46>
			PORTB = ~PORTB;
    3258:	a8 e3       	ldi	r26, 0x38	; 56
    325a:	b0 e0       	ldi	r27, 0x00	; 0
    325c:	e8 e3       	ldi	r30, 0x38	; 56
    325e:	f0 e0       	ldi	r31, 0x00	; 0
    3260:	80 81       	ld	r24, Z
    3262:	80 95       	com	r24
    3264:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    3266:	19 82       	std	Y+1, r1	; 0x01
    3268:	17 c0       	rjmp	.+46     	; 0x3298 <MCAL_DIO_u8TogglePortValue+0x74>
		} else if (Loc_u8PortID == PortC) {
    326a:	8a 81       	ldd	r24, Y+2	; 0x02
    326c:	82 30       	cpi	r24, 0x02	; 2
    326e:	49 f4       	brne	.+18     	; 0x3282 <MCAL_DIO_u8TogglePortValue+0x5e>
			PORTC = ~PORTC;
    3270:	a5 e3       	ldi	r26, 0x35	; 53
    3272:	b0 e0       	ldi	r27, 0x00	; 0
    3274:	e5 e3       	ldi	r30, 0x35	; 53
    3276:	f0 e0       	ldi	r31, 0x00	; 0
    3278:	80 81       	ld	r24, Z
    327a:	80 95       	com	r24
    327c:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    327e:	19 82       	std	Y+1, r1	; 0x01
    3280:	0b c0       	rjmp	.+22     	; 0x3298 <MCAL_DIO_u8TogglePortValue+0x74>
		} else if (Loc_u8PortID == PortD) {
    3282:	8a 81       	ldd	r24, Y+2	; 0x02
    3284:	83 30       	cpi	r24, 0x03	; 3
    3286:	41 f4       	brne	.+16     	; 0x3298 <MCAL_DIO_u8TogglePortValue+0x74>
			PORTD = ~PORTD;
    3288:	a2 e3       	ldi	r26, 0x32	; 50
    328a:	b0 e0       	ldi	r27, 0x00	; 0
    328c:	e2 e3       	ldi	r30, 0x32	; 50
    328e:	f0 e0       	ldi	r31, 0x00	; 0
    3290:	80 81       	ld	r24, Z
    3292:	80 95       	com	r24
    3294:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    3296:	19 82       	std	Y+1, r1	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    3298:	89 81       	ldd	r24, Y+1	; 0x01
}
    329a:	0f 90       	pop	r0
    329c:	0f 90       	pop	r0
    329e:	cf 91       	pop	r28
    32a0:	df 91       	pop	r29
    32a2:	08 95       	ret

000032a4 <MCAL_DIO_u8TogglePinValue>:

STD_Type MCAL_DIO_u8TogglePinValue(u8 Loc_u8PortID, u8 Loc_u8PinID) {
    32a4:	df 93       	push	r29
    32a6:	cf 93       	push	r28
    32a8:	00 d0       	rcall	.+0      	; 0x32aa <MCAL_DIO_u8TogglePinValue+0x6>
    32aa:	0f 92       	push	r0
    32ac:	cd b7       	in	r28, 0x3d	; 61
    32ae:	de b7       	in	r29, 0x3e	; 62
    32b0:	8a 83       	std	Y+2, r24	; 0x02
    32b2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Return_Value = E_NOT_OK;
    32b4:	81 e0       	ldi	r24, 0x01	; 1
    32b6:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD && Loc_u8PinID <= Num_Of_Pins) {
    32b8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ba:	84 30       	cpi	r24, 0x04	; 4
    32bc:	08 f0       	brcs	.+2      	; 0x32c0 <MCAL_DIO_u8TogglePinValue+0x1c>
    32be:	63 c0       	rjmp	.+198    	; 0x3386 <MCAL_DIO_u8TogglePinValue+0xe2>
    32c0:	8b 81       	ldd	r24, Y+3	; 0x03
    32c2:	88 30       	cpi	r24, 0x08	; 8
    32c4:	08 f0       	brcs	.+2      	; 0x32c8 <MCAL_DIO_u8TogglePinValue+0x24>
    32c6:	5f c0       	rjmp	.+190    	; 0x3386 <MCAL_DIO_u8TogglePinValue+0xe2>
		if (Loc_u8PortID == PortA) {
    32c8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ca:	88 23       	and	r24, r24
    32cc:	a9 f4       	brne	.+42     	; 0x32f8 <MCAL_DIO_u8TogglePinValue+0x54>
			TOGGLE_BIT(PORTA, Loc_u8PinID);
    32ce:	ab e3       	ldi	r26, 0x3B	; 59
    32d0:	b0 e0       	ldi	r27, 0x00	; 0
    32d2:	eb e3       	ldi	r30, 0x3B	; 59
    32d4:	f0 e0       	ldi	r31, 0x00	; 0
    32d6:	80 81       	ld	r24, Z
    32d8:	48 2f       	mov	r20, r24
    32da:	8b 81       	ldd	r24, Y+3	; 0x03
    32dc:	28 2f       	mov	r18, r24
    32de:	30 e0       	ldi	r19, 0x00	; 0
    32e0:	81 e0       	ldi	r24, 0x01	; 1
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	02 2e       	mov	r0, r18
    32e6:	02 c0       	rjmp	.+4      	; 0x32ec <MCAL_DIO_u8TogglePinValue+0x48>
    32e8:	88 0f       	add	r24, r24
    32ea:	99 1f       	adc	r25, r25
    32ec:	0a 94       	dec	r0
    32ee:	e2 f7       	brpl	.-8      	; 0x32e8 <MCAL_DIO_u8TogglePinValue+0x44>
    32f0:	84 27       	eor	r24, r20
    32f2:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    32f4:	19 82       	std	Y+1, r1	; 0x01
    32f6:	47 c0       	rjmp	.+142    	; 0x3386 <MCAL_DIO_u8TogglePinValue+0xe2>
		} else if (Loc_u8PortID == PortB) {
    32f8:	8a 81       	ldd	r24, Y+2	; 0x02
    32fa:	81 30       	cpi	r24, 0x01	; 1
    32fc:	a9 f4       	brne	.+42     	; 0x3328 <MCAL_DIO_u8TogglePinValue+0x84>
			TOGGLE_BIT(PORTB, Loc_u8PinID);
    32fe:	a8 e3       	ldi	r26, 0x38	; 56
    3300:	b0 e0       	ldi	r27, 0x00	; 0
    3302:	e8 e3       	ldi	r30, 0x38	; 56
    3304:	f0 e0       	ldi	r31, 0x00	; 0
    3306:	80 81       	ld	r24, Z
    3308:	48 2f       	mov	r20, r24
    330a:	8b 81       	ldd	r24, Y+3	; 0x03
    330c:	28 2f       	mov	r18, r24
    330e:	30 e0       	ldi	r19, 0x00	; 0
    3310:	81 e0       	ldi	r24, 0x01	; 1
    3312:	90 e0       	ldi	r25, 0x00	; 0
    3314:	02 2e       	mov	r0, r18
    3316:	02 c0       	rjmp	.+4      	; 0x331c <MCAL_DIO_u8TogglePinValue+0x78>
    3318:	88 0f       	add	r24, r24
    331a:	99 1f       	adc	r25, r25
    331c:	0a 94       	dec	r0
    331e:	e2 f7       	brpl	.-8      	; 0x3318 <MCAL_DIO_u8TogglePinValue+0x74>
    3320:	84 27       	eor	r24, r20
    3322:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    3324:	19 82       	std	Y+1, r1	; 0x01
    3326:	2f c0       	rjmp	.+94     	; 0x3386 <MCAL_DIO_u8TogglePinValue+0xe2>
		} else if (Loc_u8PortID == PortC) {
    3328:	8a 81       	ldd	r24, Y+2	; 0x02
    332a:	82 30       	cpi	r24, 0x02	; 2
    332c:	a9 f4       	brne	.+42     	; 0x3358 <MCAL_DIO_u8TogglePinValue+0xb4>
			TOGGLE_BIT(PORTC, Loc_u8PinID);
    332e:	a5 e3       	ldi	r26, 0x35	; 53
    3330:	b0 e0       	ldi	r27, 0x00	; 0
    3332:	e5 e3       	ldi	r30, 0x35	; 53
    3334:	f0 e0       	ldi	r31, 0x00	; 0
    3336:	80 81       	ld	r24, Z
    3338:	48 2f       	mov	r20, r24
    333a:	8b 81       	ldd	r24, Y+3	; 0x03
    333c:	28 2f       	mov	r18, r24
    333e:	30 e0       	ldi	r19, 0x00	; 0
    3340:	81 e0       	ldi	r24, 0x01	; 1
    3342:	90 e0       	ldi	r25, 0x00	; 0
    3344:	02 2e       	mov	r0, r18
    3346:	02 c0       	rjmp	.+4      	; 0x334c <MCAL_DIO_u8TogglePinValue+0xa8>
    3348:	88 0f       	add	r24, r24
    334a:	99 1f       	adc	r25, r25
    334c:	0a 94       	dec	r0
    334e:	e2 f7       	brpl	.-8      	; 0x3348 <MCAL_DIO_u8TogglePinValue+0xa4>
    3350:	84 27       	eor	r24, r20
    3352:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    3354:	19 82       	std	Y+1, r1	; 0x01
    3356:	17 c0       	rjmp	.+46     	; 0x3386 <MCAL_DIO_u8TogglePinValue+0xe2>
		} else if (Loc_u8PortID == PortD) {
    3358:	8a 81       	ldd	r24, Y+2	; 0x02
    335a:	83 30       	cpi	r24, 0x03	; 3
    335c:	a1 f4       	brne	.+40     	; 0x3386 <MCAL_DIO_u8TogglePinValue+0xe2>
			TOGGLE_BIT(PORTD, Loc_u8PinID);
    335e:	a2 e3       	ldi	r26, 0x32	; 50
    3360:	b0 e0       	ldi	r27, 0x00	; 0
    3362:	e2 e3       	ldi	r30, 0x32	; 50
    3364:	f0 e0       	ldi	r31, 0x00	; 0
    3366:	80 81       	ld	r24, Z
    3368:	48 2f       	mov	r20, r24
    336a:	8b 81       	ldd	r24, Y+3	; 0x03
    336c:	28 2f       	mov	r18, r24
    336e:	30 e0       	ldi	r19, 0x00	; 0
    3370:	81 e0       	ldi	r24, 0x01	; 1
    3372:	90 e0       	ldi	r25, 0x00	; 0
    3374:	02 2e       	mov	r0, r18
    3376:	02 c0       	rjmp	.+4      	; 0x337c <MCAL_DIO_u8TogglePinValue+0xd8>
    3378:	88 0f       	add	r24, r24
    337a:	99 1f       	adc	r25, r25
    337c:	0a 94       	dec	r0
    337e:	e2 f7       	brpl	.-8      	; 0x3378 <MCAL_DIO_u8TogglePinValue+0xd4>
    3380:	84 27       	eor	r24, r20
    3382:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    3384:	19 82       	std	Y+1, r1	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    3386:	89 81       	ldd	r24, Y+1	; 0x01
}
    3388:	0f 90       	pop	r0
    338a:	0f 90       	pop	r0
    338c:	0f 90       	pop	r0
    338e:	cf 91       	pop	r28
    3390:	df 91       	pop	r29
    3392:	08 95       	ret

00003394 <HAL_Ultrasonic_Sensor_voidInit>:
volatile f32 Glob_f32Distance = NUM0;
volatile u16 Glob_u16StartTime = NUM0, Glob_u16EndTime = NUM0, Glob_u16TimeDiff = NUM0;
volatile u16 Glob_u16OvfCounterStart, Glob_16OvfCounterEnd;
extern volatile u16 Glob_u16OvfCounter;

void HAL_Ultrasonic_Sensor_voidInit(void) {
    3394:	df 93       	push	r29
    3396:	cf 93       	push	r28
    3398:	cd b7       	in	r28, 0x3d	; 61
    339a:	de b7       	in	r29, 0x3e	; 62
	MCAL_DIO_u8SetPinDirection(ECHO_PORT, ECHO_PIN, Pin_Low);      //
    339c:	83 e0       	ldi	r24, 0x03	; 3
    339e:	62 e0       	ldi	r22, 0x02	; 2
    33a0:	40 e0       	ldi	r20, 0x00	; 0
    33a2:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(TRIG_PORT, TRIG_PIN, Pin_High);  //  trigger
    33a6:	83 e0       	ldi	r24, 0x03	; 3
    33a8:	66 e0       	ldi	r22, 0x06	; 6
    33aa:	41 e0       	ldi	r20, 0x01	; 1
    33ac:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <MCAL_DIO_u8SetPinDirection>
	MCAL_Interrupt_EXIT_CallBack_0(HAL_Ultrasonic_Sensor_voidInterrupt); // external interrupt call back
    33b0:	82 e7       	ldi	r24, 0x72	; 114
    33b2:	9b e1       	ldi	r25, 0x1B	; 27
    33b4:	0e 94 56 14 	call	0x28ac	; 0x28ac <MCAL_Interrupt_EXIT_CallBack_0>
	SET_BIT(SREG,Pin7);
    33b8:	af e5       	ldi	r26, 0x5F	; 95
    33ba:	b0 e0       	ldi	r27, 0x00	; 0
    33bc:	ef e5       	ldi	r30, 0x5F	; 95
    33be:	f0 e0       	ldi	r31, 0x00	; 0
    33c0:	80 81       	ld	r24, Z
    33c2:	80 68       	ori	r24, 0x80	; 128
    33c4:	8c 93       	st	X, r24
	MCAL_Timer0_Init(Normal_Mode,Prescaller_64,'\0');
    33c6:	80 e0       	ldi	r24, 0x00	; 0
    33c8:	63 e0       	ldi	r22, 0x03	; 3
    33ca:	40 e0       	ldi	r20, 0x00	; 0
    33cc:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <MCAL_Timer0_Init>
	MCAL_Timer0_SetPreloadValue(113);
    33d0:	81 e7       	ldi	r24, 0x71	; 113
    33d2:	0e 94 5d 11 	call	0x22ba	; 0x22ba <MCAL_Timer0_SetPreloadValue>
}
    33d6:	cf 91       	pop	r28
    33d8:	df 91       	pop	r29
    33da:	08 95       	ret

000033dc <HAL_Ultrasonic_Sensor_voidTrigger>:

void HAL_Ultrasonic_Sensor_voidTrigger(void) {
    33dc:	df 93       	push	r29
    33de:	cf 93       	push	r28
    33e0:	cd b7       	in	r28, 0x3d	; 61
    33e2:	de b7       	in	r29, 0x3e	; 62
    33e4:	68 97       	sbiw	r28, 0x18	; 24
    33e6:	0f b6       	in	r0, 0x3f	; 63
    33e8:	f8 94       	cli
    33ea:	de bf       	out	0x3e, r29	; 62
    33ec:	0f be       	out	0x3f, r0	; 63
    33ee:	cd bf       	out	0x3d, r28	; 61
	MCAL_DIO_u8SetPinValue(TRIG_PORT, TRIG_PIN, Pin_High);    // high
    33f0:	83 e0       	ldi	r24, 0x03	; 3
    33f2:	66 e0       	ldi	r22, 0x06	; 6
    33f4:	41 e0       	ldi	r20, 0x01	; 1
    33f6:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
    33fa:	80 e0       	ldi	r24, 0x00	; 0
    33fc:	90 e0       	ldi	r25, 0x00	; 0
    33fe:	a0 e2       	ldi	r26, 0x20	; 32
    3400:	b1 e4       	ldi	r27, 0x41	; 65
    3402:	8d 8b       	std	Y+21, r24	; 0x15
    3404:	9e 8b       	std	Y+22, r25	; 0x16
    3406:	af 8b       	std	Y+23, r26	; 0x17
    3408:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    340a:	6d 89       	ldd	r22, Y+21	; 0x15
    340c:	7e 89       	ldd	r23, Y+22	; 0x16
    340e:	8f 89       	ldd	r24, Y+23	; 0x17
    3410:	98 8d       	ldd	r25, Y+24	; 0x18
    3412:	2b ea       	ldi	r18, 0xAB	; 171
    3414:	3a ea       	ldi	r19, 0xAA	; 170
    3416:	4a e2       	ldi	r20, 0x2A	; 42
    3418:	50 e4       	ldi	r21, 0x40	; 64
    341a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    341e:	dc 01       	movw	r26, r24
    3420:	cb 01       	movw	r24, r22
    3422:	89 8b       	std	Y+17, r24	; 0x11
    3424:	9a 8b       	std	Y+18, r25	; 0x12
    3426:	ab 8b       	std	Y+19, r26	; 0x13
    3428:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    342a:	69 89       	ldd	r22, Y+17	; 0x11
    342c:	7a 89       	ldd	r23, Y+18	; 0x12
    342e:	8b 89       	ldd	r24, Y+19	; 0x13
    3430:	9c 89       	ldd	r25, Y+20	; 0x14
    3432:	20 e0       	ldi	r18, 0x00	; 0
    3434:	30 e0       	ldi	r19, 0x00	; 0
    3436:	40 e8       	ldi	r20, 0x80	; 128
    3438:	5f e3       	ldi	r21, 0x3F	; 63
    343a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    343e:	88 23       	and	r24, r24
    3440:	1c f4       	brge	.+6      	; 0x3448 <HAL_Ultrasonic_Sensor_voidTrigger+0x6c>
		__ticks = 1;
    3442:	81 e0       	ldi	r24, 0x01	; 1
    3444:	88 8b       	std	Y+16, r24	; 0x10
    3446:	91 c0       	rjmp	.+290    	; 0x356a <HAL_Ultrasonic_Sensor_voidTrigger+0x18e>
	else if (__tmp > 255)
    3448:	69 89       	ldd	r22, Y+17	; 0x11
    344a:	7a 89       	ldd	r23, Y+18	; 0x12
    344c:	8b 89       	ldd	r24, Y+19	; 0x13
    344e:	9c 89       	ldd	r25, Y+20	; 0x14
    3450:	20 e0       	ldi	r18, 0x00	; 0
    3452:	30 e0       	ldi	r19, 0x00	; 0
    3454:	4f e7       	ldi	r20, 0x7F	; 127
    3456:	53 e4       	ldi	r21, 0x43	; 67
    3458:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    345c:	18 16       	cp	r1, r24
    345e:	0c f0       	brlt	.+2      	; 0x3462 <HAL_Ultrasonic_Sensor_voidTrigger+0x86>
    3460:	7b c0       	rjmp	.+246    	; 0x3558 <HAL_Ultrasonic_Sensor_voidTrigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    3462:	6d 89       	ldd	r22, Y+21	; 0x15
    3464:	7e 89       	ldd	r23, Y+22	; 0x16
    3466:	8f 89       	ldd	r24, Y+23	; 0x17
    3468:	98 8d       	ldd	r25, Y+24	; 0x18
    346a:	20 e0       	ldi	r18, 0x00	; 0
    346c:	30 e0       	ldi	r19, 0x00	; 0
    346e:	4a e7       	ldi	r20, 0x7A	; 122
    3470:	54 e4       	ldi	r21, 0x44	; 68
    3472:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3476:	dc 01       	movw	r26, r24
    3478:	cb 01       	movw	r24, r22
    347a:	8c 87       	std	Y+12, r24	; 0x0c
    347c:	9d 87       	std	Y+13, r25	; 0x0d
    347e:	ae 87       	std	Y+14, r26	; 0x0e
    3480:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3482:	6c 85       	ldd	r22, Y+12	; 0x0c
    3484:	7d 85       	ldd	r23, Y+13	; 0x0d
    3486:	8e 85       	ldd	r24, Y+14	; 0x0e
    3488:	9f 85       	ldd	r25, Y+15	; 0x0f
    348a:	20 e0       	ldi	r18, 0x00	; 0
    348c:	30 e0       	ldi	r19, 0x00	; 0
    348e:	4a ef       	ldi	r20, 0xFA	; 250
    3490:	54 e4       	ldi	r21, 0x44	; 68
    3492:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3496:	dc 01       	movw	r26, r24
    3498:	cb 01       	movw	r24, r22
    349a:	88 87       	std	Y+8, r24	; 0x08
    349c:	99 87       	std	Y+9, r25	; 0x09
    349e:	aa 87       	std	Y+10, r26	; 0x0a
    34a0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    34a2:	68 85       	ldd	r22, Y+8	; 0x08
    34a4:	79 85       	ldd	r23, Y+9	; 0x09
    34a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    34a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    34aa:	20 e0       	ldi	r18, 0x00	; 0
    34ac:	30 e0       	ldi	r19, 0x00	; 0
    34ae:	40 e8       	ldi	r20, 0x80	; 128
    34b0:	5f e3       	ldi	r21, 0x3F	; 63
    34b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34b6:	88 23       	and	r24, r24
    34b8:	2c f4       	brge	.+10     	; 0x34c4 <HAL_Ultrasonic_Sensor_voidTrigger+0xe8>
		__ticks = 1;
    34ba:	81 e0       	ldi	r24, 0x01	; 1
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	9f 83       	std	Y+7, r25	; 0x07
    34c0:	8e 83       	std	Y+6, r24	; 0x06
    34c2:	3f c0       	rjmp	.+126    	; 0x3542 <HAL_Ultrasonic_Sensor_voidTrigger+0x166>
	else if (__tmp > 65535)
    34c4:	68 85       	ldd	r22, Y+8	; 0x08
    34c6:	79 85       	ldd	r23, Y+9	; 0x09
    34c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    34ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    34cc:	20 e0       	ldi	r18, 0x00	; 0
    34ce:	3f ef       	ldi	r19, 0xFF	; 255
    34d0:	4f e7       	ldi	r20, 0x7F	; 127
    34d2:	57 e4       	ldi	r21, 0x47	; 71
    34d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34d8:	18 16       	cp	r1, r24
    34da:	4c f5       	brge	.+82     	; 0x352e <HAL_Ultrasonic_Sensor_voidTrigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34dc:	6c 85       	ldd	r22, Y+12	; 0x0c
    34de:	7d 85       	ldd	r23, Y+13	; 0x0d
    34e0:	8e 85       	ldd	r24, Y+14	; 0x0e
    34e2:	9f 85       	ldd	r25, Y+15	; 0x0f
    34e4:	20 e0       	ldi	r18, 0x00	; 0
    34e6:	30 e0       	ldi	r19, 0x00	; 0
    34e8:	40 e2       	ldi	r20, 0x20	; 32
    34ea:	51 e4       	ldi	r21, 0x41	; 65
    34ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34f0:	dc 01       	movw	r26, r24
    34f2:	cb 01       	movw	r24, r22
    34f4:	bc 01       	movw	r22, r24
    34f6:	cd 01       	movw	r24, r26
    34f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34fc:	dc 01       	movw	r26, r24
    34fe:	cb 01       	movw	r24, r22
    3500:	9f 83       	std	Y+7, r25	; 0x07
    3502:	8e 83       	std	Y+6, r24	; 0x06
    3504:	0f c0       	rjmp	.+30     	; 0x3524 <HAL_Ultrasonic_Sensor_voidTrigger+0x148>
    3506:	88 ec       	ldi	r24, 0xC8	; 200
    3508:	90 e0       	ldi	r25, 0x00	; 0
    350a:	9d 83       	std	Y+5, r25	; 0x05
    350c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    350e:	8c 81       	ldd	r24, Y+4	; 0x04
    3510:	9d 81       	ldd	r25, Y+5	; 0x05
    3512:	01 97       	sbiw	r24, 0x01	; 1
    3514:	f1 f7       	brne	.-4      	; 0x3512 <HAL_Ultrasonic_Sensor_voidTrigger+0x136>
    3516:	9d 83       	std	Y+5, r25	; 0x05
    3518:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    351a:	8e 81       	ldd	r24, Y+6	; 0x06
    351c:	9f 81       	ldd	r25, Y+7	; 0x07
    351e:	01 97       	sbiw	r24, 0x01	; 1
    3520:	9f 83       	std	Y+7, r25	; 0x07
    3522:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3524:	8e 81       	ldd	r24, Y+6	; 0x06
    3526:	9f 81       	ldd	r25, Y+7	; 0x07
    3528:	00 97       	sbiw	r24, 0x00	; 0
    352a:	69 f7       	brne	.-38     	; 0x3506 <HAL_Ultrasonic_Sensor_voidTrigger+0x12a>
    352c:	24 c0       	rjmp	.+72     	; 0x3576 <HAL_Ultrasonic_Sensor_voidTrigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    352e:	68 85       	ldd	r22, Y+8	; 0x08
    3530:	79 85       	ldd	r23, Y+9	; 0x09
    3532:	8a 85       	ldd	r24, Y+10	; 0x0a
    3534:	9b 85       	ldd	r25, Y+11	; 0x0b
    3536:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    353a:	dc 01       	movw	r26, r24
    353c:	cb 01       	movw	r24, r22
    353e:	9f 83       	std	Y+7, r25	; 0x07
    3540:	8e 83       	std	Y+6, r24	; 0x06
    3542:	8e 81       	ldd	r24, Y+6	; 0x06
    3544:	9f 81       	ldd	r25, Y+7	; 0x07
    3546:	9b 83       	std	Y+3, r25	; 0x03
    3548:	8a 83       	std	Y+2, r24	; 0x02
    354a:	8a 81       	ldd	r24, Y+2	; 0x02
    354c:	9b 81       	ldd	r25, Y+3	; 0x03
    354e:	01 97       	sbiw	r24, 0x01	; 1
    3550:	f1 f7       	brne	.-4      	; 0x354e <HAL_Ultrasonic_Sensor_voidTrigger+0x172>
    3552:	9b 83       	std	Y+3, r25	; 0x03
    3554:	8a 83       	std	Y+2, r24	; 0x02
    3556:	0f c0       	rjmp	.+30     	; 0x3576 <HAL_Ultrasonic_Sensor_voidTrigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3558:	69 89       	ldd	r22, Y+17	; 0x11
    355a:	7a 89       	ldd	r23, Y+18	; 0x12
    355c:	8b 89       	ldd	r24, Y+19	; 0x13
    355e:	9c 89       	ldd	r25, Y+20	; 0x14
    3560:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3564:	dc 01       	movw	r26, r24
    3566:	cb 01       	movw	r24, r22
    3568:	88 8b       	std	Y+16, r24	; 0x10
    356a:	88 89       	ldd	r24, Y+16	; 0x10
    356c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    356e:	89 81       	ldd	r24, Y+1	; 0x01
    3570:	8a 95       	dec	r24
    3572:	f1 f7       	brne	.-4      	; 0x3570 <HAL_Ultrasonic_Sensor_voidTrigger+0x194>
    3574:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);                                            // 10 micro seconds delay
	MCAL_DIO_u8SetPinValue(TRIG_PORT, TRIG_PIN, Pin_Low);     // low
    3576:	83 e0       	ldi	r24, 0x03	; 3
    3578:	66 e0       	ldi	r22, 0x06	; 6
    357a:	40 e0       	ldi	r20, 0x00	; 0
    357c:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
}
    3580:	68 96       	adiw	r28, 0x18	; 24
    3582:	0f b6       	in	r0, 0x3f	; 63
    3584:	f8 94       	cli
    3586:	de bf       	out	0x3e, r29	; 62
    3588:	0f be       	out	0x3f, r0	; 63
    358a:	cd bf       	out	0x3d, r28	; 61
    358c:	cf 91       	pop	r28
    358e:	df 91       	pop	r29
    3590:	08 95       	ret

00003592 <HAL_Ultrasonic_Sensor_voidCalcDistancse>:

void HAL_Ultrasonic_Sensor_voidCalcDistancse(f32* returned_distance) {
    3592:	df 93       	push	r29
    3594:	cf 93       	push	r28
    3596:	cd b7       	in	r28, 0x3d	; 61
    3598:	de b7       	in	r29, 0x3e	; 62
    359a:	60 97       	sbiw	r28, 0x10	; 16
    359c:	0f b6       	in	r0, 0x3f	; 63
    359e:	f8 94       	cli
    35a0:	de bf       	out	0x3e, r29	; 62
    35a2:	0f be       	out	0x3f, r0	; 63
    35a4:	cd bf       	out	0x3d, r28	; 61
    35a6:	98 8b       	std	Y+16, r25	; 0x10
    35a8:	8f 87       	std	Y+15, r24	; 0x0f
	HAL_Ultrasonic_Sensor_voidTrigger();                                  // send trigger
    35aa:	0e 94 ee 19 	call	0x33dc	; 0x33dc <HAL_Ultrasonic_Sensor_voidTrigger>
	MCAL_Interrupt_InterruptRisingInit();
    35ae:	0e 94 b3 14 	call	0x2966	; 0x2966 <MCAL_Interrupt_InterruptRisingInit>
    35b2:	80 e0       	ldi	r24, 0x00	; 0
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	a8 e4       	ldi	r26, 0x48	; 72
    35b8:	b2 e4       	ldi	r27, 0x42	; 66
    35ba:	8b 87       	std	Y+11, r24	; 0x0b
    35bc:	9c 87       	std	Y+12, r25	; 0x0c
    35be:	ad 87       	std	Y+13, r26	; 0x0d
    35c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    35c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    35c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    35c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    35ca:	20 e0       	ldi	r18, 0x00	; 0
    35cc:	30 e0       	ldi	r19, 0x00	; 0
    35ce:	4a ef       	ldi	r20, 0xFA	; 250
    35d0:	54 e4       	ldi	r21, 0x44	; 68
    35d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35d6:	dc 01       	movw	r26, r24
    35d8:	cb 01       	movw	r24, r22
    35da:	8f 83       	std	Y+7, r24	; 0x07
    35dc:	98 87       	std	Y+8, r25	; 0x08
    35de:	a9 87       	std	Y+9, r26	; 0x09
    35e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35e2:	6f 81       	ldd	r22, Y+7	; 0x07
    35e4:	78 85       	ldd	r23, Y+8	; 0x08
    35e6:	89 85       	ldd	r24, Y+9	; 0x09
    35e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ea:	20 e0       	ldi	r18, 0x00	; 0
    35ec:	30 e0       	ldi	r19, 0x00	; 0
    35ee:	40 e8       	ldi	r20, 0x80	; 128
    35f0:	5f e3       	ldi	r21, 0x3F	; 63
    35f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35f6:	88 23       	and	r24, r24
    35f8:	2c f4       	brge	.+10     	; 0x3604 <HAL_Ultrasonic_Sensor_voidCalcDistancse+0x72>
		__ticks = 1;
    35fa:	81 e0       	ldi	r24, 0x01	; 1
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	9e 83       	std	Y+6, r25	; 0x06
    3600:	8d 83       	std	Y+5, r24	; 0x05
    3602:	3f c0       	rjmp	.+126    	; 0x3682 <HAL_Ultrasonic_Sensor_voidCalcDistancse+0xf0>
	else if (__tmp > 65535)
    3604:	6f 81       	ldd	r22, Y+7	; 0x07
    3606:	78 85       	ldd	r23, Y+8	; 0x08
    3608:	89 85       	ldd	r24, Y+9	; 0x09
    360a:	9a 85       	ldd	r25, Y+10	; 0x0a
    360c:	20 e0       	ldi	r18, 0x00	; 0
    360e:	3f ef       	ldi	r19, 0xFF	; 255
    3610:	4f e7       	ldi	r20, 0x7F	; 127
    3612:	57 e4       	ldi	r21, 0x47	; 71
    3614:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3618:	18 16       	cp	r1, r24
    361a:	4c f5       	brge	.+82     	; 0x366e <HAL_Ultrasonic_Sensor_voidCalcDistancse+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    361c:	6b 85       	ldd	r22, Y+11	; 0x0b
    361e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3620:	8d 85       	ldd	r24, Y+13	; 0x0d
    3622:	9e 85       	ldd	r25, Y+14	; 0x0e
    3624:	20 e0       	ldi	r18, 0x00	; 0
    3626:	30 e0       	ldi	r19, 0x00	; 0
    3628:	40 e2       	ldi	r20, 0x20	; 32
    362a:	51 e4       	ldi	r21, 0x41	; 65
    362c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3630:	dc 01       	movw	r26, r24
    3632:	cb 01       	movw	r24, r22
    3634:	bc 01       	movw	r22, r24
    3636:	cd 01       	movw	r24, r26
    3638:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    363c:	dc 01       	movw	r26, r24
    363e:	cb 01       	movw	r24, r22
    3640:	9e 83       	std	Y+6, r25	; 0x06
    3642:	8d 83       	std	Y+5, r24	; 0x05
    3644:	0f c0       	rjmp	.+30     	; 0x3664 <HAL_Ultrasonic_Sensor_voidCalcDistancse+0xd2>
    3646:	88 ec       	ldi	r24, 0xC8	; 200
    3648:	90 e0       	ldi	r25, 0x00	; 0
    364a:	9c 83       	std	Y+4, r25	; 0x04
    364c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    364e:	8b 81       	ldd	r24, Y+3	; 0x03
    3650:	9c 81       	ldd	r25, Y+4	; 0x04
    3652:	01 97       	sbiw	r24, 0x01	; 1
    3654:	f1 f7       	brne	.-4      	; 0x3652 <HAL_Ultrasonic_Sensor_voidCalcDistancse+0xc0>
    3656:	9c 83       	std	Y+4, r25	; 0x04
    3658:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    365a:	8d 81       	ldd	r24, Y+5	; 0x05
    365c:	9e 81       	ldd	r25, Y+6	; 0x06
    365e:	01 97       	sbiw	r24, 0x01	; 1
    3660:	9e 83       	std	Y+6, r25	; 0x06
    3662:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3664:	8d 81       	ldd	r24, Y+5	; 0x05
    3666:	9e 81       	ldd	r25, Y+6	; 0x06
    3668:	00 97       	sbiw	r24, 0x00	; 0
    366a:	69 f7       	brne	.-38     	; 0x3646 <HAL_Ultrasonic_Sensor_voidCalcDistancse+0xb4>
    366c:	14 c0       	rjmp	.+40     	; 0x3696 <HAL_Ultrasonic_Sensor_voidCalcDistancse+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    366e:	6f 81       	ldd	r22, Y+7	; 0x07
    3670:	78 85       	ldd	r23, Y+8	; 0x08
    3672:	89 85       	ldd	r24, Y+9	; 0x09
    3674:	9a 85       	ldd	r25, Y+10	; 0x0a
    3676:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    367a:	dc 01       	movw	r26, r24
    367c:	cb 01       	movw	r24, r22
    367e:	9e 83       	std	Y+6, r25	; 0x06
    3680:	8d 83       	std	Y+5, r24	; 0x05
    3682:	8d 81       	ldd	r24, Y+5	; 0x05
    3684:	9e 81       	ldd	r25, Y+6	; 0x06
    3686:	9a 83       	std	Y+2, r25	; 0x02
    3688:	89 83       	std	Y+1, r24	; 0x01
    368a:	89 81       	ldd	r24, Y+1	; 0x01
    368c:	9a 81       	ldd	r25, Y+2	; 0x02
    368e:	01 97       	sbiw	r24, 0x01	; 1
    3690:	f1 f7       	brne	.-4      	; 0x368e <HAL_Ultrasonic_Sensor_voidCalcDistancse+0xfc>
    3692:	9a 83       	std	Y+2, r25	; 0x02
    3694:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);                                            // stability delay
	*returned_distance = Glob_f32Distance*2+1;                           // get the distance
    3696:	20 91 8a 01 	lds	r18, 0x018A
    369a:	30 91 8b 01 	lds	r19, 0x018B
    369e:	40 91 8c 01 	lds	r20, 0x018C
    36a2:	50 91 8d 01 	lds	r21, 0x018D
    36a6:	ca 01       	movw	r24, r20
    36a8:	b9 01       	movw	r22, r18
    36aa:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    36ae:	dc 01       	movw	r26, r24
    36b0:	cb 01       	movw	r24, r22
    36b2:	bc 01       	movw	r22, r24
    36b4:	cd 01       	movw	r24, r26
    36b6:	20 e0       	ldi	r18, 0x00	; 0
    36b8:	30 e0       	ldi	r19, 0x00	; 0
    36ba:	40 e8       	ldi	r20, 0x80	; 128
    36bc:	5f e3       	ldi	r21, 0x3F	; 63
    36be:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    36c2:	dc 01       	movw	r26, r24
    36c4:	cb 01       	movw	r24, r22
    36c6:	ef 85       	ldd	r30, Y+15	; 0x0f
    36c8:	f8 89       	ldd	r31, Y+16	; 0x10
    36ca:	80 83       	st	Z, r24
    36cc:	91 83       	std	Z+1, r25	; 0x01
    36ce:	a2 83       	std	Z+2, r26	; 0x02
    36d0:	b3 83       	std	Z+3, r27	; 0x03
}
    36d2:	60 96       	adiw	r28, 0x10	; 16
    36d4:	0f b6       	in	r0, 0x3f	; 63
    36d6:	f8 94       	cli
    36d8:	de bf       	out	0x3e, r29	; 62
    36da:	0f be       	out	0x3f, r0	; 63
    36dc:	cd bf       	out	0x3d, r28	; 61
    36de:	cf 91       	pop	r28
    36e0:	df 91       	pop	r29
    36e2:	08 95       	ret

000036e4 <HAL_Ultrasonic_Sensor_voidInterrupt>:
void HAL_Ultrasonic_Sensor_voidInterrupt(void)                                     // call back function
{
    36e4:	df 93       	push	r29
    36e6:	cf 93       	push	r28
    36e8:	cd b7       	in	r28, 0x3d	; 61
    36ea:	de b7       	in	r29, 0x3e	; 62

	if (Glob_u8Counter <= 2)          // check for counter status
    36ec:	80 91 68 01 	lds	r24, 0x0168
    36f0:	83 30       	cpi	r24, 0x03	; 3
    36f2:	08 f0       	brcs	.+2      	; 0x36f6 <HAL_Ultrasonic_Sensor_voidInterrupt+0x12>
    36f4:	75 c0       	rjmp	.+234    	; 0x37e0 <HAL_Ultrasonic_Sensor_voidInterrupt+0xfc>
			{
		if (Glob_u8Counter == NUM1)      // check if it is the first entry
    36f6:	80 91 68 01 	lds	r24, 0x0168
    36fa:	81 30       	cpi	r24, 0x01	; 1
    36fc:	a1 f4       	brne	.+40     	; 0x3726 <HAL_Ultrasonic_Sensor_voidInterrupt+0x42>
		{
			// store the start time value
			Glob_u16StartTime = TCNT0;
    36fe:	e2 e5       	ldi	r30, 0x52	; 82
    3700:	f0 e0       	ldi	r31, 0x00	; 0
    3702:	80 81       	ld	r24, Z
    3704:	88 2f       	mov	r24, r24
    3706:	90 e0       	ldi	r25, 0x00	; 0
    3708:	90 93 8f 01 	sts	0x018F, r25
    370c:	80 93 8e 01 	sts	0x018E, r24

			// store number of OVFs at the start of the signal
			Glob_u16OvfCounterStart = Glob_u16OvfCounter;
    3710:	80 91 7c 01 	lds	r24, 0x017C
    3714:	90 91 7d 01 	lds	r25, 0x017D
    3718:	90 93 a0 01 	sts	0x01A0, r25
    371c:	80 93 9f 01 	sts	0x019F, r24

			// at the first entry  we change the capture edge to falling edge to capture echo signal
			MCAL_Interrupt_InterruptFallingInit();
    3720:	0e 94 c9 14 	call	0x2992	; 0x2992 <MCAL_Interrupt_InterruptFallingInit>
    3724:	58 c0       	rjmp	.+176    	; 0x37d6 <HAL_Ultrasonic_Sensor_voidInterrupt+0xf2>
		}

		else if (Glob_u8Counter == 2) // check if it's the second entry
    3726:	80 91 68 01 	lds	r24, 0x0168
    372a:	82 30       	cpi	r24, 0x02	; 2
    372c:	09 f0       	breq	.+2      	; 0x3730 <HAL_Ultrasonic_Sensor_voidInterrupt+0x4c>
    372e:	53 c0       	rjmp	.+166    	; 0x37d6 <HAL_Ultrasonic_Sensor_voidInterrupt+0xf2>
				{
			//store end time value
			Glob_u16EndTime = TCNT0;
    3730:	e2 e5       	ldi	r30, 0x52	; 82
    3732:	f0 e0       	ldi	r31, 0x00	; 0
    3734:	80 81       	ld	r24, Z
    3736:	88 2f       	mov	r24, r24
    3738:	90 e0       	ldi	r25, 0x00	; 0
    373a:	90 93 91 01 	sts	0x0191, r25
    373e:	80 93 90 01 	sts	0x0190, r24

			//store number of OVFs at the end of signal
			Glob_16OvfCounterEnd = Glob_u16OvfCounter;
    3742:	80 91 7c 01 	lds	r24, 0x017C
    3746:	90 91 7d 01 	lds	r25, 0x017D
    374a:	90 93 9e 01 	sts	0x019E, r25
    374e:	80 93 9d 01 	sts	0x019D, r24

			//calculate the time difference between start and end
			Glob_u16TimeDiff = (Glob_u16EndTime + (256 * Glob_16OvfCounterEnd))
    3752:	80 91 9d 01 	lds	r24, 0x019D
    3756:	90 91 9e 01 	lds	r25, 0x019E
    375a:	38 2f       	mov	r19, r24
    375c:	22 27       	eor	r18, r18
    375e:	80 91 90 01 	lds	r24, 0x0190
    3762:	90 91 91 01 	lds	r25, 0x0191
    3766:	a9 01       	movw	r20, r18
    3768:	48 0f       	add	r20, r24
    376a:	59 1f       	adc	r21, r25
    376c:	80 91 9f 01 	lds	r24, 0x019F
    3770:	90 91 a0 01 	lds	r25, 0x01A0
    3774:	38 2f       	mov	r19, r24
    3776:	22 27       	eor	r18, r18
    3778:	80 91 8e 01 	lds	r24, 0x018E
    377c:	90 91 8f 01 	lds	r25, 0x018F
    3780:	82 0f       	add	r24, r18
    3782:	93 1f       	adc	r25, r19
    3784:	9a 01       	movw	r18, r20
    3786:	28 1b       	sub	r18, r24
    3788:	39 0b       	sbc	r19, r25
    378a:	c9 01       	movw	r24, r18
    378c:	90 93 93 01 	sts	0x0193, r25
    3790:	80 93 92 01 	sts	0x0192, r24
					- (Glob_u16StartTime + (256 * Glob_u16OvfCounterStart));

			//calculate the distance
			Glob_f32Distance = Glob_u16TimeDiff * 0.068; //     f32 ton=(h(64/16000000))/2 >>     distance=ton34000;
    3794:	80 91 92 01 	lds	r24, 0x0192
    3798:	90 91 93 01 	lds	r25, 0x0193
    379c:	cc 01       	movw	r24, r24
    379e:	a0 e0       	ldi	r26, 0x00	; 0
    37a0:	b0 e0       	ldi	r27, 0x00	; 0
    37a2:	bc 01       	movw	r22, r24
    37a4:	cd 01       	movw	r24, r26
    37a6:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    37aa:	dc 01       	movw	r26, r24
    37ac:	cb 01       	movw	r24, r22
    37ae:	bc 01       	movw	r22, r24
    37b0:	cd 01       	movw	r24, r26
    37b2:	26 e9       	ldi	r18, 0x96	; 150
    37b4:	33 e4       	ldi	r19, 0x43	; 67
    37b6:	4b e8       	ldi	r20, 0x8B	; 139
    37b8:	5d e3       	ldi	r21, 0x3D	; 61
    37ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37be:	dc 01       	movw	r26, r24
    37c0:	cb 01       	movw	r24, r22
    37c2:	80 93 8a 01 	sts	0x018A, r24
    37c6:	90 93 8b 01 	sts	0x018B, r25
    37ca:	a0 93 8c 01 	sts	0x018C, r26
    37ce:	b0 93 8d 01 	sts	0x018D, r27

			//reset the counter to calculate new signal
			Glob_u8Counter = NUM0;
    37d2:	10 92 68 01 	sts	0x0168, r1

		}

		//increase the counter to sync with the entry state
		Glob_u8Counter++;
    37d6:	80 91 68 01 	lds	r24, 0x0168
    37da:	8f 5f       	subi	r24, 0xFF	; 255
    37dc:	80 93 68 01 	sts	0x0168, r24
	}

}
    37e0:	cf 91       	pop	r28
    37e2:	df 91       	pop	r29
    37e4:	08 95       	ret

000037e6 <Timer1_Init>:


#include "Servo_Motor.h"

// Function to initialize Timer1 for PWM
void Timer1_Init() {
    37e6:	df 93       	push	r29
    37e8:	cf 93       	push	r28
    37ea:	cd b7       	in	r28, 0x3d	; 61
    37ec:	de b7       	in	r29, 0x3e	; 62
	// Set Fast PWM mode using ICR1 as TOP
	TCCR1A = (1 << WGM11) | (1 << COM1A1);
    37ee:	ef e4       	ldi	r30, 0x4F	; 79
    37f0:	f0 e0       	ldi	r31, 0x00	; 0
    37f2:	82 e8       	ldi	r24, 0x82	; 130
    37f4:	80 83       	st	Z, r24
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);
    37f6:	ee e4       	ldi	r30, 0x4E	; 78
    37f8:	f0 e0       	ldi	r31, 0x00	; 0
    37fa:	8a e1       	ldi	r24, 0x1A	; 26
    37fc:	80 83       	st	Z, r24

	// Set TOP value for 50Hz PWM frequency
	ICR1 = 20000; // 20ms period (50Hz)
    37fe:	e6 e4       	ldi	r30, 0x46	; 70
    3800:	f0 e0       	ldi	r31, 0x00	; 0
    3802:	80 e2       	ldi	r24, 0x20	; 32
    3804:	9e e4       	ldi	r25, 0x4E	; 78
    3806:	91 83       	std	Z+1, r25	; 0x01
    3808:	80 83       	st	Z, r24

	// Set PD5 (OC1A) as output
	DDRD |= (1 << PD5);
    380a:	a1 e3       	ldi	r26, 0x31	; 49
    380c:	b0 e0       	ldi	r27, 0x00	; 0
    380e:	e1 e3       	ldi	r30, 0x31	; 49
    3810:	f0 e0       	ldi	r31, 0x00	; 0
    3812:	80 81       	ld	r24, Z
    3814:	80 62       	ori	r24, 0x20	; 32
    3816:	8c 93       	st	X, r24
}
    3818:	cf 91       	pop	r28
    381a:	df 91       	pop	r29
    381c:	08 95       	ret

0000381e <Set_Servo_Angle>:

// Function to set the angle of the servo (0-180 degrees)
void Set_Servo_Angle(uint8_t angle) {
    381e:	df 93       	push	r29
    3820:	cf 93       	push	r28
    3822:	00 d0       	rcall	.+0      	; 0x3824 <Set_Servo_Angle+0x6>
    3824:	0f 92       	push	r0
    3826:	cd b7       	in	r28, 0x3d	; 61
    3828:	de b7       	in	r29, 0x3e	; 62
    382a:	8b 83       	std	Y+3, r24	; 0x03

	void Timer1_Init();

	// Calculate duty cycle value for the given angle
	uint16_t duty_cycle = ((angle * 10) + 750); // 1ms to 2ms pulse width
    382c:	8b 81       	ldd	r24, Y+3	; 0x03
    382e:	88 2f       	mov	r24, r24
    3830:	90 e0       	ldi	r25, 0x00	; 0
    3832:	9c 01       	movw	r18, r24
    3834:	22 0f       	add	r18, r18
    3836:	33 1f       	adc	r19, r19
    3838:	c9 01       	movw	r24, r18
    383a:	88 0f       	add	r24, r24
    383c:	99 1f       	adc	r25, r25
    383e:	88 0f       	add	r24, r24
    3840:	99 1f       	adc	r25, r25
    3842:	82 0f       	add	r24, r18
    3844:	93 1f       	adc	r25, r19
    3846:	82 51       	subi	r24, 0x12	; 18
    3848:	9d 4f       	sbci	r25, 0xFD	; 253
    384a:	9a 83       	std	Y+2, r25	; 0x02
    384c:	89 83       	std	Y+1, r24	; 0x01

	// Set duty cycle for the given angle
	OCR1A = duty_cycle;
    384e:	ea e4       	ldi	r30, 0x4A	; 74
    3850:	f0 e0       	ldi	r31, 0x00	; 0
    3852:	89 81       	ldd	r24, Y+1	; 0x01
    3854:	9a 81       	ldd	r25, Y+2	; 0x02
    3856:	91 83       	std	Z+1, r25	; 0x01
    3858:	80 83       	st	Z, r24
}
    385a:	0f 90       	pop	r0
    385c:	0f 90       	pop	r0
    385e:	0f 90       	pop	r0
    3860:	cf 91       	pop	r28
    3862:	df 91       	pop	r29
    3864:	08 95       	ret

00003866 <HAL_LED_u8LedInit>:
 *  Created on: Sep 25, 2023
 *      Author: Mohamed
 */
#include "LED.h"

STD_Type HAL_LED_u8LedInit(u8 Loc_u8LEDPortID, u8 Loc_u8LEDPinID) {
    3866:	df 93       	push	r29
    3868:	cf 93       	push	r28
    386a:	00 d0       	rcall	.+0      	; 0x386c <HAL_LED_u8LedInit+0x6>
    386c:	0f 92       	push	r0
    386e:	cd b7       	in	r28, 0x3d	; 61
    3870:	de b7       	in	r29, 0x3e	; 62
    3872:	8a 83       	std	Y+2, r24	; 0x02
    3874:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Return_Value = E_NOT_OK;
    3876:	81 e0       	ldi	r24, 0x01	; 1
    3878:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8LEDPortID <= PortD && Loc_u8LEDPinID <= Num_Of_Pins) {
    387a:	8a 81       	ldd	r24, Y+2	; 0x02
    387c:	84 30       	cpi	r24, 0x04	; 4
    387e:	48 f4       	brcc	.+18     	; 0x3892 <HAL_LED_u8LedInit+0x2c>
    3880:	8b 81       	ldd	r24, Y+3	; 0x03
    3882:	88 30       	cpi	r24, 0x08	; 8
    3884:	30 f4       	brcc	.+12     	; 0x3892 <HAL_LED_u8LedInit+0x2c>
		Loc_u8Return_Value = MCAL_DIO_u8SetPinDirection(Loc_u8LEDPortID,
    3886:	8a 81       	ldd	r24, Y+2	; 0x02
    3888:	6b 81       	ldd	r22, Y+3	; 0x03
    388a:	41 e0       	ldi	r20, 0x01	; 1
    388c:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <MCAL_DIO_u8SetPinDirection>
    3890:	89 83       	std	Y+1, r24	; 0x01
				Loc_u8LEDPinID, Pin_High);
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    3892:	89 81       	ldd	r24, Y+1	; 0x01
}
    3894:	0f 90       	pop	r0
    3896:	0f 90       	pop	r0
    3898:	0f 90       	pop	r0
    389a:	cf 91       	pop	r28
    389c:	df 91       	pop	r29
    389e:	08 95       	ret

000038a0 <HAL_LED_u8LedMode>:

STD_Type HAL_LED_u8LedMode(u8 Loc_u8LEDPortID, u8 Loc_u8LEDPinID,
		u8 Loc_u8LEDMode) {
    38a0:	df 93       	push	r29
    38a2:	cf 93       	push	r28
    38a4:	00 d0       	rcall	.+0      	; 0x38a6 <HAL_LED_u8LedMode+0x6>
    38a6:	00 d0       	rcall	.+0      	; 0x38a8 <HAL_LED_u8LedMode+0x8>
    38a8:	cd b7       	in	r28, 0x3d	; 61
    38aa:	de b7       	in	r29, 0x3e	; 62
    38ac:	8a 83       	std	Y+2, r24	; 0x02
    38ae:	6b 83       	std	Y+3, r22	; 0x03
    38b0:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Return_Value = E_NOT_OK;
    38b2:	81 e0       	ldi	r24, 0x01	; 1
    38b4:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8LEDPortID <= PortD && Loc_u8LEDPinID <= Num_Of_Pins
    38b6:	8a 81       	ldd	r24, Y+2	; 0x02
    38b8:	84 30       	cpi	r24, 0x04	; 4
    38ba:	10 f5       	brcc	.+68     	; 0x3900 <HAL_LED_u8LedMode+0x60>
    38bc:	8b 81       	ldd	r24, Y+3	; 0x03
    38be:	88 30       	cpi	r24, 0x08	; 8
    38c0:	f8 f4       	brcc	.+62     	; 0x3900 <HAL_LED_u8LedMode+0x60>
    38c2:	8c 81       	ldd	r24, Y+4	; 0x04
    38c4:	83 30       	cpi	r24, 0x03	; 3
    38c6:	e0 f4       	brcc	.+56     	; 0x3900 <HAL_LED_u8LedMode+0x60>
			&& Loc_u8LEDMode <= LED_TOG) {
		if (Loc_u8LEDMode == LED_ON) {
    38c8:	8c 81       	ldd	r24, Y+4	; 0x04
    38ca:	81 30       	cpi	r24, 0x01	; 1
    38cc:	39 f4       	brne	.+14     	; 0x38dc <HAL_LED_u8LedMode+0x3c>
			Loc_u8Return_Value = MCAL_DIO_u8SetPinValue(Loc_u8LEDPortID,
    38ce:	8a 81       	ldd	r24, Y+2	; 0x02
    38d0:	6b 81       	ldd	r22, Y+3	; 0x03
    38d2:	41 e0       	ldi	r20, 0x01	; 1
    38d4:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
    38d8:	89 83       	std	Y+1, r24	; 0x01
    38da:	12 c0       	rjmp	.+36     	; 0x3900 <HAL_LED_u8LedMode+0x60>
					Loc_u8LEDPinID, Pin_High);
		} else if (Loc_u8LEDMode == LED_OFF) {
    38dc:	8c 81       	ldd	r24, Y+4	; 0x04
    38de:	88 23       	and	r24, r24
    38e0:	39 f4       	brne	.+14     	; 0x38f0 <HAL_LED_u8LedMode+0x50>
			Loc_u8Return_Value = MCAL_DIO_u8SetPinValue(Loc_u8LEDPortID,
    38e2:	8a 81       	ldd	r24, Y+2	; 0x02
    38e4:	6b 81       	ldd	r22, Y+3	; 0x03
    38e6:	40 e0       	ldi	r20, 0x00	; 0
    38e8:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
    38ec:	89 83       	std	Y+1, r24	; 0x01
    38ee:	08 c0       	rjmp	.+16     	; 0x3900 <HAL_LED_u8LedMode+0x60>
					Loc_u8LEDPinID, Pin_Low);
		} else if (Loc_u8LEDMode == LED_TOG) {
    38f0:	8c 81       	ldd	r24, Y+4	; 0x04
    38f2:	82 30       	cpi	r24, 0x02	; 2
    38f4:	29 f4       	brne	.+10     	; 0x3900 <HAL_LED_u8LedMode+0x60>
			Loc_u8Return_Value = MCAL_DIO_u8TogglePinValue(Loc_u8LEDPortID,
    38f6:	8a 81       	ldd	r24, Y+2	; 0x02
    38f8:	6b 81       	ldd	r22, Y+3	; 0x03
    38fa:	0e 94 52 19 	call	0x32a4	; 0x32a4 <MCAL_DIO_u8TogglePinValue>
    38fe:	89 83       	std	Y+1, r24	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    3900:	89 81       	ldd	r24, Y+1	; 0x01
}
    3902:	0f 90       	pop	r0
    3904:	0f 90       	pop	r0
    3906:	0f 90       	pop	r0
    3908:	0f 90       	pop	r0
    390a:	cf 91       	pop	r28
    390c:	df 91       	pop	r29
    390e:	08 95       	ret

00003910 <HAL_LCD_u8LCDInit>:

#include "LCD.h"

//static u32 Counter = 0;

void HAL_LCD_u8LCDInit() {
    3910:	0f 93       	push	r16
    3912:	1f 93       	push	r17
    3914:	df 93       	push	r29
    3916:	cf 93       	push	r28
    3918:	cd b7       	in	r28, 0x3d	; 61
    391a:	de b7       	in	r29, 0x3e	; 62
    391c:	c4 55       	subi	r28, 0x54	; 84
    391e:	d0 40       	sbci	r29, 0x00	; 0
    3920:	0f b6       	in	r0, 0x3f	; 63
    3922:	f8 94       	cli
    3924:	de bf       	out	0x3e, r29	; 62
    3926:	0f be       	out	0x3f, r0	; 63
    3928:	cd bf       	out	0x3d, r28	; 61
	MCAL_DIO_u8SetPinDirection(LCD_D_PORT, LCD_D7_PIN, Pin_High);
    392a:	80 e0       	ldi	r24, 0x00	; 0
    392c:	67 e0       	ldi	r22, 0x07	; 7
    392e:	41 e0       	ldi	r20, 0x01	; 1
    3930:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(LCD_D_PORT, LCD_D6_PIN, Pin_High);
    3934:	80 e0       	ldi	r24, 0x00	; 0
    3936:	66 e0       	ldi	r22, 0x06	; 6
    3938:	41 e0       	ldi	r20, 0x01	; 1
    393a:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(LCD_D_PORT, LCD_D5_PIN, Pin_High);
    393e:	80 e0       	ldi	r24, 0x00	; 0
    3940:	65 e0       	ldi	r22, 0x05	; 5
    3942:	41 e0       	ldi	r20, 0x01	; 1
    3944:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(LCD_D_PORT, LCD_D4_PIN, Pin_High);
    3948:	80 e0       	ldi	r24, 0x00	; 0
    394a:	64 e0       	ldi	r22, 0x04	; 4
    394c:	41 e0       	ldi	r20, 0x01	; 1
    394e:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(RS_Port, RS_Pin, Pin_High);
    3952:	81 e0       	ldi	r24, 0x01	; 1
    3954:	61 e0       	ldi	r22, 0x01	; 1
    3956:	41 e0       	ldi	r20, 0x01	; 1
    3958:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(RW_Port, RW_Pin, Pin_High);
    395c:	81 e0       	ldi	r24, 0x01	; 1
    395e:	62 e0       	ldi	r22, 0x02	; 2
    3960:	41 e0       	ldi	r20, 0x01	; 1
    3962:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(Enable_PORT, Enable_PIN, Pin_High);
    3966:	81 e0       	ldi	r24, 0x01	; 1
    3968:	63 e0       	ldi	r22, 0x03	; 3
    396a:	41 e0       	ldi	r20, 0x01	; 1
    396c:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <MCAL_DIO_u8SetPinDirection>
    3970:	fe 01       	movw	r30, r28
    3972:	ef 5a       	subi	r30, 0xAF	; 175
    3974:	ff 4f       	sbci	r31, 0xFF	; 255
    3976:	80 e0       	ldi	r24, 0x00	; 0
    3978:	90 e0       	ldi	r25, 0x00	; 0
    397a:	a0 e0       	ldi	r26, 0x00	; 0
    397c:	b0 e4       	ldi	r27, 0x40	; 64
    397e:	80 83       	st	Z, r24
    3980:	91 83       	std	Z+1, r25	; 0x01
    3982:	a2 83       	std	Z+2, r26	; 0x02
    3984:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3986:	8e 01       	movw	r16, r28
    3988:	03 5b       	subi	r16, 0xB3	; 179
    398a:	1f 4f       	sbci	r17, 0xFF	; 255
    398c:	fe 01       	movw	r30, r28
    398e:	ef 5a       	subi	r30, 0xAF	; 175
    3990:	ff 4f       	sbci	r31, 0xFF	; 255
    3992:	60 81       	ld	r22, Z
    3994:	71 81       	ldd	r23, Z+1	; 0x01
    3996:	82 81       	ldd	r24, Z+2	; 0x02
    3998:	93 81       	ldd	r25, Z+3	; 0x03
    399a:	20 e0       	ldi	r18, 0x00	; 0
    399c:	30 e0       	ldi	r19, 0x00	; 0
    399e:	4a ef       	ldi	r20, 0xFA	; 250
    39a0:	54 e4       	ldi	r21, 0x44	; 68
    39a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39a6:	dc 01       	movw	r26, r24
    39a8:	cb 01       	movw	r24, r22
    39aa:	f8 01       	movw	r30, r16
    39ac:	80 83       	st	Z, r24
    39ae:	91 83       	std	Z+1, r25	; 0x01
    39b0:	a2 83       	std	Z+2, r26	; 0x02
    39b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    39b4:	fe 01       	movw	r30, r28
    39b6:	e3 5b       	subi	r30, 0xB3	; 179
    39b8:	ff 4f       	sbci	r31, 0xFF	; 255
    39ba:	60 81       	ld	r22, Z
    39bc:	71 81       	ldd	r23, Z+1	; 0x01
    39be:	82 81       	ldd	r24, Z+2	; 0x02
    39c0:	93 81       	ldd	r25, Z+3	; 0x03
    39c2:	20 e0       	ldi	r18, 0x00	; 0
    39c4:	30 e0       	ldi	r19, 0x00	; 0
    39c6:	40 e8       	ldi	r20, 0x80	; 128
    39c8:	5f e3       	ldi	r21, 0x3F	; 63
    39ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39ce:	88 23       	and	r24, r24
    39d0:	44 f4       	brge	.+16     	; 0x39e2 <HAL_LCD_u8LCDInit+0xd2>
		__ticks = 1;
    39d2:	fe 01       	movw	r30, r28
    39d4:	e5 5b       	subi	r30, 0xB5	; 181
    39d6:	ff 4f       	sbci	r31, 0xFF	; 255
    39d8:	81 e0       	ldi	r24, 0x01	; 1
    39da:	90 e0       	ldi	r25, 0x00	; 0
    39dc:	91 83       	std	Z+1, r25	; 0x01
    39de:	80 83       	st	Z, r24
    39e0:	64 c0       	rjmp	.+200    	; 0x3aaa <HAL_LCD_u8LCDInit+0x19a>
	else if (__tmp > 65535)
    39e2:	fe 01       	movw	r30, r28
    39e4:	e3 5b       	subi	r30, 0xB3	; 179
    39e6:	ff 4f       	sbci	r31, 0xFF	; 255
    39e8:	60 81       	ld	r22, Z
    39ea:	71 81       	ldd	r23, Z+1	; 0x01
    39ec:	82 81       	ldd	r24, Z+2	; 0x02
    39ee:	93 81       	ldd	r25, Z+3	; 0x03
    39f0:	20 e0       	ldi	r18, 0x00	; 0
    39f2:	3f ef       	ldi	r19, 0xFF	; 255
    39f4:	4f e7       	ldi	r20, 0x7F	; 127
    39f6:	57 e4       	ldi	r21, 0x47	; 71
    39f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39fc:	18 16       	cp	r1, r24
    39fe:	0c f0       	brlt	.+2      	; 0x3a02 <HAL_LCD_u8LCDInit+0xf2>
    3a00:	43 c0       	rjmp	.+134    	; 0x3a88 <HAL_LCD_u8LCDInit+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a02:	fe 01       	movw	r30, r28
    3a04:	ef 5a       	subi	r30, 0xAF	; 175
    3a06:	ff 4f       	sbci	r31, 0xFF	; 255
    3a08:	60 81       	ld	r22, Z
    3a0a:	71 81       	ldd	r23, Z+1	; 0x01
    3a0c:	82 81       	ldd	r24, Z+2	; 0x02
    3a0e:	93 81       	ldd	r25, Z+3	; 0x03
    3a10:	20 e0       	ldi	r18, 0x00	; 0
    3a12:	30 e0       	ldi	r19, 0x00	; 0
    3a14:	40 e2       	ldi	r20, 0x20	; 32
    3a16:	51 e4       	ldi	r21, 0x41	; 65
    3a18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a1c:	dc 01       	movw	r26, r24
    3a1e:	cb 01       	movw	r24, r22
    3a20:	8e 01       	movw	r16, r28
    3a22:	05 5b       	subi	r16, 0xB5	; 181
    3a24:	1f 4f       	sbci	r17, 0xFF	; 255
    3a26:	bc 01       	movw	r22, r24
    3a28:	cd 01       	movw	r24, r26
    3a2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a2e:	dc 01       	movw	r26, r24
    3a30:	cb 01       	movw	r24, r22
    3a32:	f8 01       	movw	r30, r16
    3a34:	91 83       	std	Z+1, r25	; 0x01
    3a36:	80 83       	st	Z, r24
    3a38:	1f c0       	rjmp	.+62     	; 0x3a78 <HAL_LCD_u8LCDInit+0x168>
    3a3a:	fe 01       	movw	r30, r28
    3a3c:	e7 5b       	subi	r30, 0xB7	; 183
    3a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a40:	88 ec       	ldi	r24, 0xC8	; 200
    3a42:	90 e0       	ldi	r25, 0x00	; 0
    3a44:	91 83       	std	Z+1, r25	; 0x01
    3a46:	80 83       	st	Z, r24
    3a48:	fe 01       	movw	r30, r28
    3a4a:	e7 5b       	subi	r30, 0xB7	; 183
    3a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4e:	80 81       	ld	r24, Z
    3a50:	91 81       	ldd	r25, Z+1	; 0x01
    3a52:	01 97       	sbiw	r24, 0x01	; 1
    3a54:	f1 f7       	brne	.-4      	; 0x3a52 <HAL_LCD_u8LCDInit+0x142>
    3a56:	fe 01       	movw	r30, r28
    3a58:	e7 5b       	subi	r30, 0xB7	; 183
    3a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a5c:	91 83       	std	Z+1, r25	; 0x01
    3a5e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a60:	de 01       	movw	r26, r28
    3a62:	a5 5b       	subi	r26, 0xB5	; 181
    3a64:	bf 4f       	sbci	r27, 0xFF	; 255
    3a66:	fe 01       	movw	r30, r28
    3a68:	e5 5b       	subi	r30, 0xB5	; 181
    3a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6c:	80 81       	ld	r24, Z
    3a6e:	91 81       	ldd	r25, Z+1	; 0x01
    3a70:	01 97       	sbiw	r24, 0x01	; 1
    3a72:	11 96       	adiw	r26, 0x01	; 1
    3a74:	9c 93       	st	X, r25
    3a76:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a78:	fe 01       	movw	r30, r28
    3a7a:	e5 5b       	subi	r30, 0xB5	; 181
    3a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a7e:	80 81       	ld	r24, Z
    3a80:	91 81       	ldd	r25, Z+1	; 0x01
    3a82:	00 97       	sbiw	r24, 0x00	; 0
    3a84:	d1 f6       	brne	.-76     	; 0x3a3a <HAL_LCD_u8LCDInit+0x12a>
    3a86:	27 c0       	rjmp	.+78     	; 0x3ad6 <HAL_LCD_u8LCDInit+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a88:	8e 01       	movw	r16, r28
    3a8a:	05 5b       	subi	r16, 0xB5	; 181
    3a8c:	1f 4f       	sbci	r17, 0xFF	; 255
    3a8e:	fe 01       	movw	r30, r28
    3a90:	e3 5b       	subi	r30, 0xB3	; 179
    3a92:	ff 4f       	sbci	r31, 0xFF	; 255
    3a94:	60 81       	ld	r22, Z
    3a96:	71 81       	ldd	r23, Z+1	; 0x01
    3a98:	82 81       	ldd	r24, Z+2	; 0x02
    3a9a:	93 81       	ldd	r25, Z+3	; 0x03
    3a9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aa0:	dc 01       	movw	r26, r24
    3aa2:	cb 01       	movw	r24, r22
    3aa4:	f8 01       	movw	r30, r16
    3aa6:	91 83       	std	Z+1, r25	; 0x01
    3aa8:	80 83       	st	Z, r24
    3aaa:	de 01       	movw	r26, r28
    3aac:	a9 5b       	subi	r26, 0xB9	; 185
    3aae:	bf 4f       	sbci	r27, 0xFF	; 255
    3ab0:	fe 01       	movw	r30, r28
    3ab2:	e5 5b       	subi	r30, 0xB5	; 181
    3ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab6:	80 81       	ld	r24, Z
    3ab8:	91 81       	ldd	r25, Z+1	; 0x01
    3aba:	8d 93       	st	X+, r24
    3abc:	9c 93       	st	X, r25
    3abe:	fe 01       	movw	r30, r28
    3ac0:	e9 5b       	subi	r30, 0xB9	; 185
    3ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac4:	80 81       	ld	r24, Z
    3ac6:	91 81       	ldd	r25, Z+1	; 0x01
    3ac8:	01 97       	sbiw	r24, 0x01	; 1
    3aca:	f1 f7       	brne	.-4      	; 0x3ac8 <HAL_LCD_u8LCDInit+0x1b8>
    3acc:	fe 01       	movw	r30, r28
    3ace:	e9 5b       	subi	r30, 0xB9	; 185
    3ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad2:	91 83       	std	Z+1, r25	; 0x01
    3ad4:	80 83       	st	Z, r24
	_delay_ms(2);
	HAL_LCD_u8SendCommands(Reset);
    3ad6:	82 e0       	ldi	r24, 0x02	; 2
    3ad8:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <HAL_LCD_u8SendCommands>
    3adc:	fe 01       	movw	r30, r28
    3ade:	ed 5b       	subi	r30, 0xBD	; 189
    3ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae2:	80 e0       	ldi	r24, 0x00	; 0
    3ae4:	90 e0       	ldi	r25, 0x00	; 0
    3ae6:	a0 e0       	ldi	r26, 0x00	; 0
    3ae8:	b0 e4       	ldi	r27, 0x40	; 64
    3aea:	80 83       	st	Z, r24
    3aec:	91 83       	std	Z+1, r25	; 0x01
    3aee:	a2 83       	std	Z+2, r26	; 0x02
    3af0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3af2:	8e 01       	movw	r16, r28
    3af4:	01 5c       	subi	r16, 0xC1	; 193
    3af6:	1f 4f       	sbci	r17, 0xFF	; 255
    3af8:	fe 01       	movw	r30, r28
    3afa:	ed 5b       	subi	r30, 0xBD	; 189
    3afc:	ff 4f       	sbci	r31, 0xFF	; 255
    3afe:	60 81       	ld	r22, Z
    3b00:	71 81       	ldd	r23, Z+1	; 0x01
    3b02:	82 81       	ldd	r24, Z+2	; 0x02
    3b04:	93 81       	ldd	r25, Z+3	; 0x03
    3b06:	20 e0       	ldi	r18, 0x00	; 0
    3b08:	30 e0       	ldi	r19, 0x00	; 0
    3b0a:	4a ef       	ldi	r20, 0xFA	; 250
    3b0c:	54 e4       	ldi	r21, 0x44	; 68
    3b0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b12:	dc 01       	movw	r26, r24
    3b14:	cb 01       	movw	r24, r22
    3b16:	f8 01       	movw	r30, r16
    3b18:	80 83       	st	Z, r24
    3b1a:	91 83       	std	Z+1, r25	; 0x01
    3b1c:	a2 83       	std	Z+2, r26	; 0x02
    3b1e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b20:	fe 01       	movw	r30, r28
    3b22:	ff 96       	adiw	r30, 0x3f	; 63
    3b24:	60 81       	ld	r22, Z
    3b26:	71 81       	ldd	r23, Z+1	; 0x01
    3b28:	82 81       	ldd	r24, Z+2	; 0x02
    3b2a:	93 81       	ldd	r25, Z+3	; 0x03
    3b2c:	20 e0       	ldi	r18, 0x00	; 0
    3b2e:	30 e0       	ldi	r19, 0x00	; 0
    3b30:	40 e8       	ldi	r20, 0x80	; 128
    3b32:	5f e3       	ldi	r21, 0x3F	; 63
    3b34:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b38:	88 23       	and	r24, r24
    3b3a:	2c f4       	brge	.+10     	; 0x3b46 <HAL_LCD_u8LCDInit+0x236>
		__ticks = 1;
    3b3c:	81 e0       	ldi	r24, 0x01	; 1
    3b3e:	90 e0       	ldi	r25, 0x00	; 0
    3b40:	9e af       	std	Y+62, r25	; 0x3e
    3b42:	8d af       	std	Y+61, r24	; 0x3d
    3b44:	46 c0       	rjmp	.+140    	; 0x3bd2 <HAL_LCD_u8LCDInit+0x2c2>
	else if (__tmp > 65535)
    3b46:	fe 01       	movw	r30, r28
    3b48:	ff 96       	adiw	r30, 0x3f	; 63
    3b4a:	60 81       	ld	r22, Z
    3b4c:	71 81       	ldd	r23, Z+1	; 0x01
    3b4e:	82 81       	ldd	r24, Z+2	; 0x02
    3b50:	93 81       	ldd	r25, Z+3	; 0x03
    3b52:	20 e0       	ldi	r18, 0x00	; 0
    3b54:	3f ef       	ldi	r19, 0xFF	; 255
    3b56:	4f e7       	ldi	r20, 0x7F	; 127
    3b58:	57 e4       	ldi	r21, 0x47	; 71
    3b5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b5e:	18 16       	cp	r1, r24
    3b60:	64 f5       	brge	.+88     	; 0x3bba <HAL_LCD_u8LCDInit+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b62:	fe 01       	movw	r30, r28
    3b64:	ed 5b       	subi	r30, 0xBD	; 189
    3b66:	ff 4f       	sbci	r31, 0xFF	; 255
    3b68:	60 81       	ld	r22, Z
    3b6a:	71 81       	ldd	r23, Z+1	; 0x01
    3b6c:	82 81       	ldd	r24, Z+2	; 0x02
    3b6e:	93 81       	ldd	r25, Z+3	; 0x03
    3b70:	20 e0       	ldi	r18, 0x00	; 0
    3b72:	30 e0       	ldi	r19, 0x00	; 0
    3b74:	40 e2       	ldi	r20, 0x20	; 32
    3b76:	51 e4       	ldi	r21, 0x41	; 65
    3b78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b7c:	dc 01       	movw	r26, r24
    3b7e:	cb 01       	movw	r24, r22
    3b80:	bc 01       	movw	r22, r24
    3b82:	cd 01       	movw	r24, r26
    3b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b88:	dc 01       	movw	r26, r24
    3b8a:	cb 01       	movw	r24, r22
    3b8c:	9e af       	std	Y+62, r25	; 0x3e
    3b8e:	8d af       	std	Y+61, r24	; 0x3d
    3b90:	0f c0       	rjmp	.+30     	; 0x3bb0 <HAL_LCD_u8LCDInit+0x2a0>
    3b92:	88 ec       	ldi	r24, 0xC8	; 200
    3b94:	90 e0       	ldi	r25, 0x00	; 0
    3b96:	9c af       	std	Y+60, r25	; 0x3c
    3b98:	8b af       	std	Y+59, r24	; 0x3b
    3b9a:	8b ad       	ldd	r24, Y+59	; 0x3b
    3b9c:	9c ad       	ldd	r25, Y+60	; 0x3c
    3b9e:	01 97       	sbiw	r24, 0x01	; 1
    3ba0:	f1 f7       	brne	.-4      	; 0x3b9e <HAL_LCD_u8LCDInit+0x28e>
    3ba2:	9c af       	std	Y+60, r25	; 0x3c
    3ba4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ba6:	8d ad       	ldd	r24, Y+61	; 0x3d
    3ba8:	9e ad       	ldd	r25, Y+62	; 0x3e
    3baa:	01 97       	sbiw	r24, 0x01	; 1
    3bac:	9e af       	std	Y+62, r25	; 0x3e
    3bae:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bb0:	8d ad       	ldd	r24, Y+61	; 0x3d
    3bb2:	9e ad       	ldd	r25, Y+62	; 0x3e
    3bb4:	00 97       	sbiw	r24, 0x00	; 0
    3bb6:	69 f7       	brne	.-38     	; 0x3b92 <HAL_LCD_u8LCDInit+0x282>
    3bb8:	16 c0       	rjmp	.+44     	; 0x3be6 <HAL_LCD_u8LCDInit+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bba:	fe 01       	movw	r30, r28
    3bbc:	ff 96       	adiw	r30, 0x3f	; 63
    3bbe:	60 81       	ld	r22, Z
    3bc0:	71 81       	ldd	r23, Z+1	; 0x01
    3bc2:	82 81       	ldd	r24, Z+2	; 0x02
    3bc4:	93 81       	ldd	r25, Z+3	; 0x03
    3bc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bca:	dc 01       	movw	r26, r24
    3bcc:	cb 01       	movw	r24, r22
    3bce:	9e af       	std	Y+62, r25	; 0x3e
    3bd0:	8d af       	std	Y+61, r24	; 0x3d
    3bd2:	8d ad       	ldd	r24, Y+61	; 0x3d
    3bd4:	9e ad       	ldd	r25, Y+62	; 0x3e
    3bd6:	9a af       	std	Y+58, r25	; 0x3a
    3bd8:	89 af       	std	Y+57, r24	; 0x39
    3bda:	89 ad       	ldd	r24, Y+57	; 0x39
    3bdc:	9a ad       	ldd	r25, Y+58	; 0x3a
    3bde:	01 97       	sbiw	r24, 0x01	; 1
    3be0:	f1 f7       	brne	.-4      	; 0x3bde <HAL_LCD_u8LCDInit+0x2ce>
    3be2:	9a af       	std	Y+58, r25	; 0x3a
    3be4:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2);
	HAL_LCD_u8SendCommands(Function_Set);
    3be6:	88 e2       	ldi	r24, 0x28	; 40
    3be8:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <HAL_LCD_u8SendCommands>
    3bec:	80 e0       	ldi	r24, 0x00	; 0
    3bee:	90 e0       	ldi	r25, 0x00	; 0
    3bf0:	a0 e0       	ldi	r26, 0x00	; 0
    3bf2:	b0 e4       	ldi	r27, 0x40	; 64
    3bf4:	8d ab       	std	Y+53, r24	; 0x35
    3bf6:	9e ab       	std	Y+54, r25	; 0x36
    3bf8:	af ab       	std	Y+55, r26	; 0x37
    3bfa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bfc:	6d a9       	ldd	r22, Y+53	; 0x35
    3bfe:	7e a9       	ldd	r23, Y+54	; 0x36
    3c00:	8f a9       	ldd	r24, Y+55	; 0x37
    3c02:	98 ad       	ldd	r25, Y+56	; 0x38
    3c04:	20 e0       	ldi	r18, 0x00	; 0
    3c06:	30 e0       	ldi	r19, 0x00	; 0
    3c08:	4a ef       	ldi	r20, 0xFA	; 250
    3c0a:	54 e4       	ldi	r21, 0x44	; 68
    3c0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c10:	dc 01       	movw	r26, r24
    3c12:	cb 01       	movw	r24, r22
    3c14:	89 ab       	std	Y+49, r24	; 0x31
    3c16:	9a ab       	std	Y+50, r25	; 0x32
    3c18:	ab ab       	std	Y+51, r26	; 0x33
    3c1a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3c1c:	69 a9       	ldd	r22, Y+49	; 0x31
    3c1e:	7a a9       	ldd	r23, Y+50	; 0x32
    3c20:	8b a9       	ldd	r24, Y+51	; 0x33
    3c22:	9c a9       	ldd	r25, Y+52	; 0x34
    3c24:	20 e0       	ldi	r18, 0x00	; 0
    3c26:	30 e0       	ldi	r19, 0x00	; 0
    3c28:	40 e8       	ldi	r20, 0x80	; 128
    3c2a:	5f e3       	ldi	r21, 0x3F	; 63
    3c2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c30:	88 23       	and	r24, r24
    3c32:	2c f4       	brge	.+10     	; 0x3c3e <HAL_LCD_u8LCDInit+0x32e>
		__ticks = 1;
    3c34:	81 e0       	ldi	r24, 0x01	; 1
    3c36:	90 e0       	ldi	r25, 0x00	; 0
    3c38:	98 ab       	std	Y+48, r25	; 0x30
    3c3a:	8f a7       	std	Y+47, r24	; 0x2f
    3c3c:	3f c0       	rjmp	.+126    	; 0x3cbc <HAL_LCD_u8LCDInit+0x3ac>
	else if (__tmp > 65535)
    3c3e:	69 a9       	ldd	r22, Y+49	; 0x31
    3c40:	7a a9       	ldd	r23, Y+50	; 0x32
    3c42:	8b a9       	ldd	r24, Y+51	; 0x33
    3c44:	9c a9       	ldd	r25, Y+52	; 0x34
    3c46:	20 e0       	ldi	r18, 0x00	; 0
    3c48:	3f ef       	ldi	r19, 0xFF	; 255
    3c4a:	4f e7       	ldi	r20, 0x7F	; 127
    3c4c:	57 e4       	ldi	r21, 0x47	; 71
    3c4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c52:	18 16       	cp	r1, r24
    3c54:	4c f5       	brge	.+82     	; 0x3ca8 <HAL_LCD_u8LCDInit+0x398>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c56:	6d a9       	ldd	r22, Y+53	; 0x35
    3c58:	7e a9       	ldd	r23, Y+54	; 0x36
    3c5a:	8f a9       	ldd	r24, Y+55	; 0x37
    3c5c:	98 ad       	ldd	r25, Y+56	; 0x38
    3c5e:	20 e0       	ldi	r18, 0x00	; 0
    3c60:	30 e0       	ldi	r19, 0x00	; 0
    3c62:	40 e2       	ldi	r20, 0x20	; 32
    3c64:	51 e4       	ldi	r21, 0x41	; 65
    3c66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c6a:	dc 01       	movw	r26, r24
    3c6c:	cb 01       	movw	r24, r22
    3c6e:	bc 01       	movw	r22, r24
    3c70:	cd 01       	movw	r24, r26
    3c72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c76:	dc 01       	movw	r26, r24
    3c78:	cb 01       	movw	r24, r22
    3c7a:	98 ab       	std	Y+48, r25	; 0x30
    3c7c:	8f a7       	std	Y+47, r24	; 0x2f
    3c7e:	0f c0       	rjmp	.+30     	; 0x3c9e <HAL_LCD_u8LCDInit+0x38e>
    3c80:	88 ec       	ldi	r24, 0xC8	; 200
    3c82:	90 e0       	ldi	r25, 0x00	; 0
    3c84:	9e a7       	std	Y+46, r25	; 0x2e
    3c86:	8d a7       	std	Y+45, r24	; 0x2d
    3c88:	8d a5       	ldd	r24, Y+45	; 0x2d
    3c8a:	9e a5       	ldd	r25, Y+46	; 0x2e
    3c8c:	01 97       	sbiw	r24, 0x01	; 1
    3c8e:	f1 f7       	brne	.-4      	; 0x3c8c <HAL_LCD_u8LCDInit+0x37c>
    3c90:	9e a7       	std	Y+46, r25	; 0x2e
    3c92:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c94:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c96:	98 a9       	ldd	r25, Y+48	; 0x30
    3c98:	01 97       	sbiw	r24, 0x01	; 1
    3c9a:	98 ab       	std	Y+48, r25	; 0x30
    3c9c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ca0:	98 a9       	ldd	r25, Y+48	; 0x30
    3ca2:	00 97       	sbiw	r24, 0x00	; 0
    3ca4:	69 f7       	brne	.-38     	; 0x3c80 <HAL_LCD_u8LCDInit+0x370>
    3ca6:	14 c0       	rjmp	.+40     	; 0x3cd0 <HAL_LCD_u8LCDInit+0x3c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ca8:	69 a9       	ldd	r22, Y+49	; 0x31
    3caa:	7a a9       	ldd	r23, Y+50	; 0x32
    3cac:	8b a9       	ldd	r24, Y+51	; 0x33
    3cae:	9c a9       	ldd	r25, Y+52	; 0x34
    3cb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cb4:	dc 01       	movw	r26, r24
    3cb6:	cb 01       	movw	r24, r22
    3cb8:	98 ab       	std	Y+48, r25	; 0x30
    3cba:	8f a7       	std	Y+47, r24	; 0x2f
    3cbc:	8f a5       	ldd	r24, Y+47	; 0x2f
    3cbe:	98 a9       	ldd	r25, Y+48	; 0x30
    3cc0:	9c a7       	std	Y+44, r25	; 0x2c
    3cc2:	8b a7       	std	Y+43, r24	; 0x2b
    3cc4:	8b a5       	ldd	r24, Y+43	; 0x2b
    3cc6:	9c a5       	ldd	r25, Y+44	; 0x2c
    3cc8:	01 97       	sbiw	r24, 0x01	; 1
    3cca:	f1 f7       	brne	.-4      	; 0x3cc8 <HAL_LCD_u8LCDInit+0x3b8>
    3ccc:	9c a7       	std	Y+44, r25	; 0x2c
    3cce:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	HAL_LCD_u8SendCommands(Display_Mode);
    3cd0:	8f e0       	ldi	r24, 0x0F	; 15
    3cd2:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <HAL_LCD_u8SendCommands>
    3cd6:	80 e0       	ldi	r24, 0x00	; 0
    3cd8:	90 e0       	ldi	r25, 0x00	; 0
    3cda:	a0 e0       	ldi	r26, 0x00	; 0
    3cdc:	b0 e4       	ldi	r27, 0x40	; 64
    3cde:	8f a3       	std	Y+39, r24	; 0x27
    3ce0:	98 a7       	std	Y+40, r25	; 0x28
    3ce2:	a9 a7       	std	Y+41, r26	; 0x29
    3ce4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ce6:	6f a1       	ldd	r22, Y+39	; 0x27
    3ce8:	78 a5       	ldd	r23, Y+40	; 0x28
    3cea:	89 a5       	ldd	r24, Y+41	; 0x29
    3cec:	9a a5       	ldd	r25, Y+42	; 0x2a
    3cee:	20 e0       	ldi	r18, 0x00	; 0
    3cf0:	30 e0       	ldi	r19, 0x00	; 0
    3cf2:	4a ef       	ldi	r20, 0xFA	; 250
    3cf4:	54 e4       	ldi	r21, 0x44	; 68
    3cf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cfa:	dc 01       	movw	r26, r24
    3cfc:	cb 01       	movw	r24, r22
    3cfe:	8b a3       	std	Y+35, r24	; 0x23
    3d00:	9c a3       	std	Y+36, r25	; 0x24
    3d02:	ad a3       	std	Y+37, r26	; 0x25
    3d04:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3d06:	6b a1       	ldd	r22, Y+35	; 0x23
    3d08:	7c a1       	ldd	r23, Y+36	; 0x24
    3d0a:	8d a1       	ldd	r24, Y+37	; 0x25
    3d0c:	9e a1       	ldd	r25, Y+38	; 0x26
    3d0e:	20 e0       	ldi	r18, 0x00	; 0
    3d10:	30 e0       	ldi	r19, 0x00	; 0
    3d12:	40 e8       	ldi	r20, 0x80	; 128
    3d14:	5f e3       	ldi	r21, 0x3F	; 63
    3d16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d1a:	88 23       	and	r24, r24
    3d1c:	2c f4       	brge	.+10     	; 0x3d28 <HAL_LCD_u8LCDInit+0x418>
		__ticks = 1;
    3d1e:	81 e0       	ldi	r24, 0x01	; 1
    3d20:	90 e0       	ldi	r25, 0x00	; 0
    3d22:	9a a3       	std	Y+34, r25	; 0x22
    3d24:	89 a3       	std	Y+33, r24	; 0x21
    3d26:	3f c0       	rjmp	.+126    	; 0x3da6 <HAL_LCD_u8LCDInit+0x496>
	else if (__tmp > 65535)
    3d28:	6b a1       	ldd	r22, Y+35	; 0x23
    3d2a:	7c a1       	ldd	r23, Y+36	; 0x24
    3d2c:	8d a1       	ldd	r24, Y+37	; 0x25
    3d2e:	9e a1       	ldd	r25, Y+38	; 0x26
    3d30:	20 e0       	ldi	r18, 0x00	; 0
    3d32:	3f ef       	ldi	r19, 0xFF	; 255
    3d34:	4f e7       	ldi	r20, 0x7F	; 127
    3d36:	57 e4       	ldi	r21, 0x47	; 71
    3d38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d3c:	18 16       	cp	r1, r24
    3d3e:	4c f5       	brge	.+82     	; 0x3d92 <HAL_LCD_u8LCDInit+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d40:	6f a1       	ldd	r22, Y+39	; 0x27
    3d42:	78 a5       	ldd	r23, Y+40	; 0x28
    3d44:	89 a5       	ldd	r24, Y+41	; 0x29
    3d46:	9a a5       	ldd	r25, Y+42	; 0x2a
    3d48:	20 e0       	ldi	r18, 0x00	; 0
    3d4a:	30 e0       	ldi	r19, 0x00	; 0
    3d4c:	40 e2       	ldi	r20, 0x20	; 32
    3d4e:	51 e4       	ldi	r21, 0x41	; 65
    3d50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d54:	dc 01       	movw	r26, r24
    3d56:	cb 01       	movw	r24, r22
    3d58:	bc 01       	movw	r22, r24
    3d5a:	cd 01       	movw	r24, r26
    3d5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d60:	dc 01       	movw	r26, r24
    3d62:	cb 01       	movw	r24, r22
    3d64:	9a a3       	std	Y+34, r25	; 0x22
    3d66:	89 a3       	std	Y+33, r24	; 0x21
    3d68:	0f c0       	rjmp	.+30     	; 0x3d88 <HAL_LCD_u8LCDInit+0x478>
    3d6a:	88 ec       	ldi	r24, 0xC8	; 200
    3d6c:	90 e0       	ldi	r25, 0x00	; 0
    3d6e:	98 a3       	std	Y+32, r25	; 0x20
    3d70:	8f 8f       	std	Y+31, r24	; 0x1f
    3d72:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3d74:	98 a1       	ldd	r25, Y+32	; 0x20
    3d76:	01 97       	sbiw	r24, 0x01	; 1
    3d78:	f1 f7       	brne	.-4      	; 0x3d76 <HAL_LCD_u8LCDInit+0x466>
    3d7a:	98 a3       	std	Y+32, r25	; 0x20
    3d7c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d7e:	89 a1       	ldd	r24, Y+33	; 0x21
    3d80:	9a a1       	ldd	r25, Y+34	; 0x22
    3d82:	01 97       	sbiw	r24, 0x01	; 1
    3d84:	9a a3       	std	Y+34, r25	; 0x22
    3d86:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d88:	89 a1       	ldd	r24, Y+33	; 0x21
    3d8a:	9a a1       	ldd	r25, Y+34	; 0x22
    3d8c:	00 97       	sbiw	r24, 0x00	; 0
    3d8e:	69 f7       	brne	.-38     	; 0x3d6a <HAL_LCD_u8LCDInit+0x45a>
    3d90:	14 c0       	rjmp	.+40     	; 0x3dba <HAL_LCD_u8LCDInit+0x4aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d92:	6b a1       	ldd	r22, Y+35	; 0x23
    3d94:	7c a1       	ldd	r23, Y+36	; 0x24
    3d96:	8d a1       	ldd	r24, Y+37	; 0x25
    3d98:	9e a1       	ldd	r25, Y+38	; 0x26
    3d9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d9e:	dc 01       	movw	r26, r24
    3da0:	cb 01       	movw	r24, r22
    3da2:	9a a3       	std	Y+34, r25	; 0x22
    3da4:	89 a3       	std	Y+33, r24	; 0x21
    3da6:	89 a1       	ldd	r24, Y+33	; 0x21
    3da8:	9a a1       	ldd	r25, Y+34	; 0x22
    3daa:	9e 8f       	std	Y+30, r25	; 0x1e
    3dac:	8d 8f       	std	Y+29, r24	; 0x1d
    3dae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3db0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3db2:	01 97       	sbiw	r24, 0x01	; 1
    3db4:	f1 f7       	brne	.-4      	; 0x3db2 <HAL_LCD_u8LCDInit+0x4a2>
    3db6:	9e 8f       	std	Y+30, r25	; 0x1e
    3db8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	HAL_LCD_u8SendCommands(Display_Clear);
    3dba:	81 e0       	ldi	r24, 0x01	; 1
    3dbc:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <HAL_LCD_u8SendCommands>
    3dc0:	80 e0       	ldi	r24, 0x00	; 0
    3dc2:	90 e0       	ldi	r25, 0x00	; 0
    3dc4:	a0 e0       	ldi	r26, 0x00	; 0
    3dc6:	b0 e4       	ldi	r27, 0x40	; 64
    3dc8:	89 8f       	std	Y+25, r24	; 0x19
    3dca:	9a 8f       	std	Y+26, r25	; 0x1a
    3dcc:	ab 8f       	std	Y+27, r26	; 0x1b
    3dce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dd0:	69 8d       	ldd	r22, Y+25	; 0x19
    3dd2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3dd4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3dd6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3dd8:	20 e0       	ldi	r18, 0x00	; 0
    3dda:	30 e0       	ldi	r19, 0x00	; 0
    3ddc:	4a ef       	ldi	r20, 0xFA	; 250
    3dde:	54 e4       	ldi	r21, 0x44	; 68
    3de0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3de4:	dc 01       	movw	r26, r24
    3de6:	cb 01       	movw	r24, r22
    3de8:	8d 8b       	std	Y+21, r24	; 0x15
    3dea:	9e 8b       	std	Y+22, r25	; 0x16
    3dec:	af 8b       	std	Y+23, r26	; 0x17
    3dee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3df0:	6d 89       	ldd	r22, Y+21	; 0x15
    3df2:	7e 89       	ldd	r23, Y+22	; 0x16
    3df4:	8f 89       	ldd	r24, Y+23	; 0x17
    3df6:	98 8d       	ldd	r25, Y+24	; 0x18
    3df8:	20 e0       	ldi	r18, 0x00	; 0
    3dfa:	30 e0       	ldi	r19, 0x00	; 0
    3dfc:	40 e8       	ldi	r20, 0x80	; 128
    3dfe:	5f e3       	ldi	r21, 0x3F	; 63
    3e00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e04:	88 23       	and	r24, r24
    3e06:	2c f4       	brge	.+10     	; 0x3e12 <HAL_LCD_u8LCDInit+0x502>
		__ticks = 1;
    3e08:	81 e0       	ldi	r24, 0x01	; 1
    3e0a:	90 e0       	ldi	r25, 0x00	; 0
    3e0c:	9c 8b       	std	Y+20, r25	; 0x14
    3e0e:	8b 8b       	std	Y+19, r24	; 0x13
    3e10:	3f c0       	rjmp	.+126    	; 0x3e90 <HAL_LCD_u8LCDInit+0x580>
	else if (__tmp > 65535)
    3e12:	6d 89       	ldd	r22, Y+21	; 0x15
    3e14:	7e 89       	ldd	r23, Y+22	; 0x16
    3e16:	8f 89       	ldd	r24, Y+23	; 0x17
    3e18:	98 8d       	ldd	r25, Y+24	; 0x18
    3e1a:	20 e0       	ldi	r18, 0x00	; 0
    3e1c:	3f ef       	ldi	r19, 0xFF	; 255
    3e1e:	4f e7       	ldi	r20, 0x7F	; 127
    3e20:	57 e4       	ldi	r21, 0x47	; 71
    3e22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e26:	18 16       	cp	r1, r24
    3e28:	4c f5       	brge	.+82     	; 0x3e7c <HAL_LCD_u8LCDInit+0x56c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e2a:	69 8d       	ldd	r22, Y+25	; 0x19
    3e2c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e30:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e32:	20 e0       	ldi	r18, 0x00	; 0
    3e34:	30 e0       	ldi	r19, 0x00	; 0
    3e36:	40 e2       	ldi	r20, 0x20	; 32
    3e38:	51 e4       	ldi	r21, 0x41	; 65
    3e3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e3e:	dc 01       	movw	r26, r24
    3e40:	cb 01       	movw	r24, r22
    3e42:	bc 01       	movw	r22, r24
    3e44:	cd 01       	movw	r24, r26
    3e46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e4a:	dc 01       	movw	r26, r24
    3e4c:	cb 01       	movw	r24, r22
    3e4e:	9c 8b       	std	Y+20, r25	; 0x14
    3e50:	8b 8b       	std	Y+19, r24	; 0x13
    3e52:	0f c0       	rjmp	.+30     	; 0x3e72 <HAL_LCD_u8LCDInit+0x562>
    3e54:	88 ec       	ldi	r24, 0xC8	; 200
    3e56:	90 e0       	ldi	r25, 0x00	; 0
    3e58:	9a 8b       	std	Y+18, r25	; 0x12
    3e5a:	89 8b       	std	Y+17, r24	; 0x11
    3e5c:	89 89       	ldd	r24, Y+17	; 0x11
    3e5e:	9a 89       	ldd	r25, Y+18	; 0x12
    3e60:	01 97       	sbiw	r24, 0x01	; 1
    3e62:	f1 f7       	brne	.-4      	; 0x3e60 <HAL_LCD_u8LCDInit+0x550>
    3e64:	9a 8b       	std	Y+18, r25	; 0x12
    3e66:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e68:	8b 89       	ldd	r24, Y+19	; 0x13
    3e6a:	9c 89       	ldd	r25, Y+20	; 0x14
    3e6c:	01 97       	sbiw	r24, 0x01	; 1
    3e6e:	9c 8b       	std	Y+20, r25	; 0x14
    3e70:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e72:	8b 89       	ldd	r24, Y+19	; 0x13
    3e74:	9c 89       	ldd	r25, Y+20	; 0x14
    3e76:	00 97       	sbiw	r24, 0x00	; 0
    3e78:	69 f7       	brne	.-38     	; 0x3e54 <HAL_LCD_u8LCDInit+0x544>
    3e7a:	14 c0       	rjmp	.+40     	; 0x3ea4 <HAL_LCD_u8LCDInit+0x594>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e7c:	6d 89       	ldd	r22, Y+21	; 0x15
    3e7e:	7e 89       	ldd	r23, Y+22	; 0x16
    3e80:	8f 89       	ldd	r24, Y+23	; 0x17
    3e82:	98 8d       	ldd	r25, Y+24	; 0x18
    3e84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e88:	dc 01       	movw	r26, r24
    3e8a:	cb 01       	movw	r24, r22
    3e8c:	9c 8b       	std	Y+20, r25	; 0x14
    3e8e:	8b 8b       	std	Y+19, r24	; 0x13
    3e90:	8b 89       	ldd	r24, Y+19	; 0x13
    3e92:	9c 89       	ldd	r25, Y+20	; 0x14
    3e94:	98 8b       	std	Y+16, r25	; 0x10
    3e96:	8f 87       	std	Y+15, r24	; 0x0f
    3e98:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e9a:	98 89       	ldd	r25, Y+16	; 0x10
    3e9c:	01 97       	sbiw	r24, 0x01	; 1
    3e9e:	f1 f7       	brne	.-4      	; 0x3e9c <HAL_LCD_u8LCDInit+0x58c>
    3ea0:	98 8b       	std	Y+16, r25	; 0x10
    3ea2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	HAL_LCD_u8SendCommands(Entry_Mode);
    3ea4:	86 e0       	ldi	r24, 0x06	; 6
    3ea6:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <HAL_LCD_u8SendCommands>
    3eaa:	80 e0       	ldi	r24, 0x00	; 0
    3eac:	90 e0       	ldi	r25, 0x00	; 0
    3eae:	a0 e0       	ldi	r26, 0x00	; 0
    3eb0:	b0 e4       	ldi	r27, 0x40	; 64
    3eb2:	8b 87       	std	Y+11, r24	; 0x0b
    3eb4:	9c 87       	std	Y+12, r25	; 0x0c
    3eb6:	ad 87       	std	Y+13, r26	; 0x0d
    3eb8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3eba:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ebc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ebe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ec0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ec2:	20 e0       	ldi	r18, 0x00	; 0
    3ec4:	30 e0       	ldi	r19, 0x00	; 0
    3ec6:	4a ef       	ldi	r20, 0xFA	; 250
    3ec8:	54 e4       	ldi	r21, 0x44	; 68
    3eca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ece:	dc 01       	movw	r26, r24
    3ed0:	cb 01       	movw	r24, r22
    3ed2:	8f 83       	std	Y+7, r24	; 0x07
    3ed4:	98 87       	std	Y+8, r25	; 0x08
    3ed6:	a9 87       	std	Y+9, r26	; 0x09
    3ed8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3eda:	6f 81       	ldd	r22, Y+7	; 0x07
    3edc:	78 85       	ldd	r23, Y+8	; 0x08
    3ede:	89 85       	ldd	r24, Y+9	; 0x09
    3ee0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ee2:	20 e0       	ldi	r18, 0x00	; 0
    3ee4:	30 e0       	ldi	r19, 0x00	; 0
    3ee6:	40 e8       	ldi	r20, 0x80	; 128
    3ee8:	5f e3       	ldi	r21, 0x3F	; 63
    3eea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3eee:	88 23       	and	r24, r24
    3ef0:	2c f4       	brge	.+10     	; 0x3efc <HAL_LCD_u8LCDInit+0x5ec>
		__ticks = 1;
    3ef2:	81 e0       	ldi	r24, 0x01	; 1
    3ef4:	90 e0       	ldi	r25, 0x00	; 0
    3ef6:	9e 83       	std	Y+6, r25	; 0x06
    3ef8:	8d 83       	std	Y+5, r24	; 0x05
    3efa:	3f c0       	rjmp	.+126    	; 0x3f7a <HAL_LCD_u8LCDInit+0x66a>
	else if (__tmp > 65535)
    3efc:	6f 81       	ldd	r22, Y+7	; 0x07
    3efe:	78 85       	ldd	r23, Y+8	; 0x08
    3f00:	89 85       	ldd	r24, Y+9	; 0x09
    3f02:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f04:	20 e0       	ldi	r18, 0x00	; 0
    3f06:	3f ef       	ldi	r19, 0xFF	; 255
    3f08:	4f e7       	ldi	r20, 0x7F	; 127
    3f0a:	57 e4       	ldi	r21, 0x47	; 71
    3f0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f10:	18 16       	cp	r1, r24
    3f12:	4c f5       	brge	.+82     	; 0x3f66 <HAL_LCD_u8LCDInit+0x656>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f14:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f16:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f18:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f1c:	20 e0       	ldi	r18, 0x00	; 0
    3f1e:	30 e0       	ldi	r19, 0x00	; 0
    3f20:	40 e2       	ldi	r20, 0x20	; 32
    3f22:	51 e4       	ldi	r21, 0x41	; 65
    3f24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f28:	dc 01       	movw	r26, r24
    3f2a:	cb 01       	movw	r24, r22
    3f2c:	bc 01       	movw	r22, r24
    3f2e:	cd 01       	movw	r24, r26
    3f30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f34:	dc 01       	movw	r26, r24
    3f36:	cb 01       	movw	r24, r22
    3f38:	9e 83       	std	Y+6, r25	; 0x06
    3f3a:	8d 83       	std	Y+5, r24	; 0x05
    3f3c:	0f c0       	rjmp	.+30     	; 0x3f5c <HAL_LCD_u8LCDInit+0x64c>
    3f3e:	88 ec       	ldi	r24, 0xC8	; 200
    3f40:	90 e0       	ldi	r25, 0x00	; 0
    3f42:	9c 83       	std	Y+4, r25	; 0x04
    3f44:	8b 83       	std	Y+3, r24	; 0x03
    3f46:	8b 81       	ldd	r24, Y+3	; 0x03
    3f48:	9c 81       	ldd	r25, Y+4	; 0x04
    3f4a:	01 97       	sbiw	r24, 0x01	; 1
    3f4c:	f1 f7       	brne	.-4      	; 0x3f4a <HAL_LCD_u8LCDInit+0x63a>
    3f4e:	9c 83       	std	Y+4, r25	; 0x04
    3f50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f52:	8d 81       	ldd	r24, Y+5	; 0x05
    3f54:	9e 81       	ldd	r25, Y+6	; 0x06
    3f56:	01 97       	sbiw	r24, 0x01	; 1
    3f58:	9e 83       	std	Y+6, r25	; 0x06
    3f5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f5c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f5e:	9e 81       	ldd	r25, Y+6	; 0x06
    3f60:	00 97       	sbiw	r24, 0x00	; 0
    3f62:	69 f7       	brne	.-38     	; 0x3f3e <HAL_LCD_u8LCDInit+0x62e>
    3f64:	14 c0       	rjmp	.+40     	; 0x3f8e <HAL_LCD_u8LCDInit+0x67e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f66:	6f 81       	ldd	r22, Y+7	; 0x07
    3f68:	78 85       	ldd	r23, Y+8	; 0x08
    3f6a:	89 85       	ldd	r24, Y+9	; 0x09
    3f6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f72:	dc 01       	movw	r26, r24
    3f74:	cb 01       	movw	r24, r22
    3f76:	9e 83       	std	Y+6, r25	; 0x06
    3f78:	8d 83       	std	Y+5, r24	; 0x05
    3f7a:	8d 81       	ldd	r24, Y+5	; 0x05
    3f7c:	9e 81       	ldd	r25, Y+6	; 0x06
    3f7e:	9a 83       	std	Y+2, r25	; 0x02
    3f80:	89 83       	std	Y+1, r24	; 0x01
    3f82:	89 81       	ldd	r24, Y+1	; 0x01
    3f84:	9a 81       	ldd	r25, Y+2	; 0x02
    3f86:	01 97       	sbiw	r24, 0x01	; 1
    3f88:	f1 f7       	brne	.-4      	; 0x3f86 <HAL_LCD_u8LCDInit+0x676>
    3f8a:	9a 83       	std	Y+2, r25	; 0x02
    3f8c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	HAL_LCD_u8SendCommands(CURSOR_OFF);
    3f8e:	8c e0       	ldi	r24, 0x0C	; 12
    3f90:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <HAL_LCD_u8SendCommands>
}
    3f94:	cc 5a       	subi	r28, 0xAC	; 172
    3f96:	df 4f       	sbci	r29, 0xFF	; 255
    3f98:	0f b6       	in	r0, 0x3f	; 63
    3f9a:	f8 94       	cli
    3f9c:	de bf       	out	0x3e, r29	; 62
    3f9e:	0f be       	out	0x3f, r0	; 63
    3fa0:	cd bf       	out	0x3d, r28	; 61
    3fa2:	cf 91       	pop	r28
    3fa4:	df 91       	pop	r29
    3fa6:	1f 91       	pop	r17
    3fa8:	0f 91       	pop	r16
    3faa:	08 95       	ret

00003fac <HAL_LCD_u8SendCommands>:

void HAL_LCD_u8SendCommands(u8 Loc_u8LCD_Command) {
    3fac:	df 93       	push	r29
    3fae:	cf 93       	push	r28
    3fb0:	cd b7       	in	r28, 0x3d	; 61
    3fb2:	de b7       	in	r29, 0x3e	; 62
    3fb4:	6d 97       	sbiw	r28, 0x1d	; 29
    3fb6:	0f b6       	in	r0, 0x3f	; 63
    3fb8:	f8 94       	cli
    3fba:	de bf       	out	0x3e, r29	; 62
    3fbc:	0f be       	out	0x3f, r0	; 63
    3fbe:	cd bf       	out	0x3d, r28	; 61
    3fc0:	8d 8f       	std	Y+29, r24	; 0x1d
	MCAL_DIO_u8SetPinValue(RS_Port, RS_Pin, RS_Low);
    3fc2:	81 e0       	ldi	r24, 0x01	; 1
    3fc4:	61 e0       	ldi	r22, 0x01	; 1
    3fc6:	40 e0       	ldi	r20, 0x00	; 0
    3fc8:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(RW_Port, RW_Pin, RW_Low);
    3fcc:	81 e0       	ldi	r24, 0x01	; 1
    3fce:	62 e0       	ldi	r22, 0x02	; 2
    3fd0:	40 e0       	ldi	r20, 0x00	; 0
    3fd2:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	   HAL_LCD_voidData( Loc_u8LCD_Command>>4);
    3fd6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3fd8:	82 95       	swap	r24
    3fda:	8f 70       	andi	r24, 0x0F	; 15
    3fdc:	0e 94 84 25 	call	0x4b08	; 0x4b08 <HAL_LCD_voidData>
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_High);
    3fe0:	81 e0       	ldi	r24, 0x01	; 1
    3fe2:	63 e0       	ldi	r22, 0x03	; 3
    3fe4:	41 e0       	ldi	r20, 0x01	; 1
    3fe6:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
    3fea:	80 e0       	ldi	r24, 0x00	; 0
    3fec:	90 e0       	ldi	r25, 0x00	; 0
    3fee:	a0 e0       	ldi	r26, 0x00	; 0
    3ff0:	b0 e4       	ldi	r27, 0x40	; 64
    3ff2:	89 8f       	std	Y+25, r24	; 0x19
    3ff4:	9a 8f       	std	Y+26, r25	; 0x1a
    3ff6:	ab 8f       	std	Y+27, r26	; 0x1b
    3ff8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ffa:	69 8d       	ldd	r22, Y+25	; 0x19
    3ffc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ffe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4000:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4002:	20 e0       	ldi	r18, 0x00	; 0
    4004:	30 e0       	ldi	r19, 0x00	; 0
    4006:	4a ef       	ldi	r20, 0xFA	; 250
    4008:	54 e4       	ldi	r21, 0x44	; 68
    400a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    400e:	dc 01       	movw	r26, r24
    4010:	cb 01       	movw	r24, r22
    4012:	8d 8b       	std	Y+21, r24	; 0x15
    4014:	9e 8b       	std	Y+22, r25	; 0x16
    4016:	af 8b       	std	Y+23, r26	; 0x17
    4018:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    401a:	6d 89       	ldd	r22, Y+21	; 0x15
    401c:	7e 89       	ldd	r23, Y+22	; 0x16
    401e:	8f 89       	ldd	r24, Y+23	; 0x17
    4020:	98 8d       	ldd	r25, Y+24	; 0x18
    4022:	20 e0       	ldi	r18, 0x00	; 0
    4024:	30 e0       	ldi	r19, 0x00	; 0
    4026:	40 e8       	ldi	r20, 0x80	; 128
    4028:	5f e3       	ldi	r21, 0x3F	; 63
    402a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    402e:	88 23       	and	r24, r24
    4030:	2c f4       	brge	.+10     	; 0x403c <HAL_LCD_u8SendCommands+0x90>
		__ticks = 1;
    4032:	81 e0       	ldi	r24, 0x01	; 1
    4034:	90 e0       	ldi	r25, 0x00	; 0
    4036:	9c 8b       	std	Y+20, r25	; 0x14
    4038:	8b 8b       	std	Y+19, r24	; 0x13
    403a:	3f c0       	rjmp	.+126    	; 0x40ba <HAL_LCD_u8SendCommands+0x10e>
	else if (__tmp > 65535)
    403c:	6d 89       	ldd	r22, Y+21	; 0x15
    403e:	7e 89       	ldd	r23, Y+22	; 0x16
    4040:	8f 89       	ldd	r24, Y+23	; 0x17
    4042:	98 8d       	ldd	r25, Y+24	; 0x18
    4044:	20 e0       	ldi	r18, 0x00	; 0
    4046:	3f ef       	ldi	r19, 0xFF	; 255
    4048:	4f e7       	ldi	r20, 0x7F	; 127
    404a:	57 e4       	ldi	r21, 0x47	; 71
    404c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4050:	18 16       	cp	r1, r24
    4052:	4c f5       	brge	.+82     	; 0x40a6 <HAL_LCD_u8SendCommands+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4054:	69 8d       	ldd	r22, Y+25	; 0x19
    4056:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4058:	8b 8d       	ldd	r24, Y+27	; 0x1b
    405a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    405c:	20 e0       	ldi	r18, 0x00	; 0
    405e:	30 e0       	ldi	r19, 0x00	; 0
    4060:	40 e2       	ldi	r20, 0x20	; 32
    4062:	51 e4       	ldi	r21, 0x41	; 65
    4064:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4068:	dc 01       	movw	r26, r24
    406a:	cb 01       	movw	r24, r22
    406c:	bc 01       	movw	r22, r24
    406e:	cd 01       	movw	r24, r26
    4070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4074:	dc 01       	movw	r26, r24
    4076:	cb 01       	movw	r24, r22
    4078:	9c 8b       	std	Y+20, r25	; 0x14
    407a:	8b 8b       	std	Y+19, r24	; 0x13
    407c:	0f c0       	rjmp	.+30     	; 0x409c <HAL_LCD_u8SendCommands+0xf0>
    407e:	88 ec       	ldi	r24, 0xC8	; 200
    4080:	90 e0       	ldi	r25, 0x00	; 0
    4082:	9a 8b       	std	Y+18, r25	; 0x12
    4084:	89 8b       	std	Y+17, r24	; 0x11
    4086:	89 89       	ldd	r24, Y+17	; 0x11
    4088:	9a 89       	ldd	r25, Y+18	; 0x12
    408a:	01 97       	sbiw	r24, 0x01	; 1
    408c:	f1 f7       	brne	.-4      	; 0x408a <HAL_LCD_u8SendCommands+0xde>
    408e:	9a 8b       	std	Y+18, r25	; 0x12
    4090:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4092:	8b 89       	ldd	r24, Y+19	; 0x13
    4094:	9c 89       	ldd	r25, Y+20	; 0x14
    4096:	01 97       	sbiw	r24, 0x01	; 1
    4098:	9c 8b       	std	Y+20, r25	; 0x14
    409a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    409c:	8b 89       	ldd	r24, Y+19	; 0x13
    409e:	9c 89       	ldd	r25, Y+20	; 0x14
    40a0:	00 97       	sbiw	r24, 0x00	; 0
    40a2:	69 f7       	brne	.-38     	; 0x407e <HAL_LCD_u8SendCommands+0xd2>
    40a4:	14 c0       	rjmp	.+40     	; 0x40ce <HAL_LCD_u8SendCommands+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40a6:	6d 89       	ldd	r22, Y+21	; 0x15
    40a8:	7e 89       	ldd	r23, Y+22	; 0x16
    40aa:	8f 89       	ldd	r24, Y+23	; 0x17
    40ac:	98 8d       	ldd	r25, Y+24	; 0x18
    40ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40b2:	dc 01       	movw	r26, r24
    40b4:	cb 01       	movw	r24, r22
    40b6:	9c 8b       	std	Y+20, r25	; 0x14
    40b8:	8b 8b       	std	Y+19, r24	; 0x13
    40ba:	8b 89       	ldd	r24, Y+19	; 0x13
    40bc:	9c 89       	ldd	r25, Y+20	; 0x14
    40be:	98 8b       	std	Y+16, r25	; 0x10
    40c0:	8f 87       	std	Y+15, r24	; 0x0f
    40c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    40c4:	98 89       	ldd	r25, Y+16	; 0x10
    40c6:	01 97       	sbiw	r24, 0x01	; 1
    40c8:	f1 f7       	brne	.-4      	; 0x40c6 <HAL_LCD_u8SendCommands+0x11a>
    40ca:	98 8b       	std	Y+16, r25	; 0x10
    40cc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_Low);
    40ce:	81 e0       	ldi	r24, 0x01	; 1
    40d0:	63 e0       	ldi	r22, 0x03	; 3
    40d2:	40 e0       	ldi	r20, 0x00	; 0
    40d4:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	   HAL_LCD_voidData( Loc_u8LCD_Command);
    40d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    40da:	0e 94 84 25 	call	0x4b08	; 0x4b08 <HAL_LCD_voidData>
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_High);
    40de:	81 e0       	ldi	r24, 0x01	; 1
    40e0:	63 e0       	ldi	r22, 0x03	; 3
    40e2:	41 e0       	ldi	r20, 0x01	; 1
    40e4:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
    40e8:	80 e0       	ldi	r24, 0x00	; 0
    40ea:	90 e0       	ldi	r25, 0x00	; 0
    40ec:	a0 e0       	ldi	r26, 0x00	; 0
    40ee:	b0 e4       	ldi	r27, 0x40	; 64
    40f0:	8b 87       	std	Y+11, r24	; 0x0b
    40f2:	9c 87       	std	Y+12, r25	; 0x0c
    40f4:	ad 87       	std	Y+13, r26	; 0x0d
    40f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    40fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    40fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    40fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    4100:	20 e0       	ldi	r18, 0x00	; 0
    4102:	30 e0       	ldi	r19, 0x00	; 0
    4104:	4a ef       	ldi	r20, 0xFA	; 250
    4106:	54 e4       	ldi	r21, 0x44	; 68
    4108:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    410c:	dc 01       	movw	r26, r24
    410e:	cb 01       	movw	r24, r22
    4110:	8f 83       	std	Y+7, r24	; 0x07
    4112:	98 87       	std	Y+8, r25	; 0x08
    4114:	a9 87       	std	Y+9, r26	; 0x09
    4116:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4118:	6f 81       	ldd	r22, Y+7	; 0x07
    411a:	78 85       	ldd	r23, Y+8	; 0x08
    411c:	89 85       	ldd	r24, Y+9	; 0x09
    411e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4120:	20 e0       	ldi	r18, 0x00	; 0
    4122:	30 e0       	ldi	r19, 0x00	; 0
    4124:	40 e8       	ldi	r20, 0x80	; 128
    4126:	5f e3       	ldi	r21, 0x3F	; 63
    4128:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    412c:	88 23       	and	r24, r24
    412e:	2c f4       	brge	.+10     	; 0x413a <HAL_LCD_u8SendCommands+0x18e>
		__ticks = 1;
    4130:	81 e0       	ldi	r24, 0x01	; 1
    4132:	90 e0       	ldi	r25, 0x00	; 0
    4134:	9e 83       	std	Y+6, r25	; 0x06
    4136:	8d 83       	std	Y+5, r24	; 0x05
    4138:	3f c0       	rjmp	.+126    	; 0x41b8 <HAL_LCD_u8SendCommands+0x20c>
	else if (__tmp > 65535)
    413a:	6f 81       	ldd	r22, Y+7	; 0x07
    413c:	78 85       	ldd	r23, Y+8	; 0x08
    413e:	89 85       	ldd	r24, Y+9	; 0x09
    4140:	9a 85       	ldd	r25, Y+10	; 0x0a
    4142:	20 e0       	ldi	r18, 0x00	; 0
    4144:	3f ef       	ldi	r19, 0xFF	; 255
    4146:	4f e7       	ldi	r20, 0x7F	; 127
    4148:	57 e4       	ldi	r21, 0x47	; 71
    414a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    414e:	18 16       	cp	r1, r24
    4150:	4c f5       	brge	.+82     	; 0x41a4 <HAL_LCD_u8SendCommands+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4152:	6b 85       	ldd	r22, Y+11	; 0x0b
    4154:	7c 85       	ldd	r23, Y+12	; 0x0c
    4156:	8d 85       	ldd	r24, Y+13	; 0x0d
    4158:	9e 85       	ldd	r25, Y+14	; 0x0e
    415a:	20 e0       	ldi	r18, 0x00	; 0
    415c:	30 e0       	ldi	r19, 0x00	; 0
    415e:	40 e2       	ldi	r20, 0x20	; 32
    4160:	51 e4       	ldi	r21, 0x41	; 65
    4162:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4166:	dc 01       	movw	r26, r24
    4168:	cb 01       	movw	r24, r22
    416a:	bc 01       	movw	r22, r24
    416c:	cd 01       	movw	r24, r26
    416e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4172:	dc 01       	movw	r26, r24
    4174:	cb 01       	movw	r24, r22
    4176:	9e 83       	std	Y+6, r25	; 0x06
    4178:	8d 83       	std	Y+5, r24	; 0x05
    417a:	0f c0       	rjmp	.+30     	; 0x419a <HAL_LCD_u8SendCommands+0x1ee>
    417c:	88 ec       	ldi	r24, 0xC8	; 200
    417e:	90 e0       	ldi	r25, 0x00	; 0
    4180:	9c 83       	std	Y+4, r25	; 0x04
    4182:	8b 83       	std	Y+3, r24	; 0x03
    4184:	8b 81       	ldd	r24, Y+3	; 0x03
    4186:	9c 81       	ldd	r25, Y+4	; 0x04
    4188:	01 97       	sbiw	r24, 0x01	; 1
    418a:	f1 f7       	brne	.-4      	; 0x4188 <HAL_LCD_u8SendCommands+0x1dc>
    418c:	9c 83       	std	Y+4, r25	; 0x04
    418e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4190:	8d 81       	ldd	r24, Y+5	; 0x05
    4192:	9e 81       	ldd	r25, Y+6	; 0x06
    4194:	01 97       	sbiw	r24, 0x01	; 1
    4196:	9e 83       	std	Y+6, r25	; 0x06
    4198:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    419a:	8d 81       	ldd	r24, Y+5	; 0x05
    419c:	9e 81       	ldd	r25, Y+6	; 0x06
    419e:	00 97       	sbiw	r24, 0x00	; 0
    41a0:	69 f7       	brne	.-38     	; 0x417c <HAL_LCD_u8SendCommands+0x1d0>
    41a2:	14 c0       	rjmp	.+40     	; 0x41cc <HAL_LCD_u8SendCommands+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41a4:	6f 81       	ldd	r22, Y+7	; 0x07
    41a6:	78 85       	ldd	r23, Y+8	; 0x08
    41a8:	89 85       	ldd	r24, Y+9	; 0x09
    41aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    41ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41b0:	dc 01       	movw	r26, r24
    41b2:	cb 01       	movw	r24, r22
    41b4:	9e 83       	std	Y+6, r25	; 0x06
    41b6:	8d 83       	std	Y+5, r24	; 0x05
    41b8:	8d 81       	ldd	r24, Y+5	; 0x05
    41ba:	9e 81       	ldd	r25, Y+6	; 0x06
    41bc:	9a 83       	std	Y+2, r25	; 0x02
    41be:	89 83       	std	Y+1, r24	; 0x01
    41c0:	89 81       	ldd	r24, Y+1	; 0x01
    41c2:	9a 81       	ldd	r25, Y+2	; 0x02
    41c4:	01 97       	sbiw	r24, 0x01	; 1
    41c6:	f1 f7       	brne	.-4      	; 0x41c4 <HAL_LCD_u8SendCommands+0x218>
    41c8:	9a 83       	std	Y+2, r25	; 0x02
    41ca:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_Low);
    41cc:	81 e0       	ldi	r24, 0x01	; 1
    41ce:	63 e0       	ldi	r22, 0x03	; 3
    41d0:	40 e0       	ldi	r20, 0x00	; 0
    41d2:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
}
    41d6:	6d 96       	adiw	r28, 0x1d	; 29
    41d8:	0f b6       	in	r0, 0x3f	; 63
    41da:	f8 94       	cli
    41dc:	de bf       	out	0x3e, r29	; 62
    41de:	0f be       	out	0x3f, r0	; 63
    41e0:	cd bf       	out	0x3d, r28	; 61
    41e2:	cf 91       	pop	r28
    41e4:	df 91       	pop	r29
    41e6:	08 95       	ret

000041e8 <HAL_LCD_u8SendChar>:

void HAL_LCD_u8SendChar(u8 Loc_u8LCD_Char) {
    41e8:	df 93       	push	r29
    41ea:	cf 93       	push	r28
    41ec:	cd b7       	in	r28, 0x3d	; 61
    41ee:	de b7       	in	r29, 0x3e	; 62
    41f0:	6d 97       	sbiw	r28, 0x1d	; 29
    41f2:	0f b6       	in	r0, 0x3f	; 63
    41f4:	f8 94       	cli
    41f6:	de bf       	out	0x3e, r29	; 62
    41f8:	0f be       	out	0x3f, r0	; 63
    41fa:	cd bf       	out	0x3d, r28	; 61
    41fc:	8d 8f       	std	Y+29, r24	; 0x1d
	MCAL_DIO_u8SetPinValue(RS_Port, RS_Pin, RS_High);
    41fe:	81 e0       	ldi	r24, 0x01	; 1
    4200:	61 e0       	ldi	r22, 0x01	; 1
    4202:	41 e0       	ldi	r20, 0x01	; 1
    4204:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(RW_Port, RW_Pin, RW_Low);
    4208:	81 e0       	ldi	r24, 0x01	; 1
    420a:	62 e0       	ldi	r22, 0x02	; 2
    420c:	40 e0       	ldi	r20, 0x00	; 0
    420e:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	   HAL_LCD_voidData( Loc_u8LCD_Char>>4);
    4212:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4214:	82 95       	swap	r24
    4216:	8f 70       	andi	r24, 0x0F	; 15
    4218:	0e 94 84 25 	call	0x4b08	; 0x4b08 <HAL_LCD_voidData>
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_High);
    421c:	81 e0       	ldi	r24, 0x01	; 1
    421e:	63 e0       	ldi	r22, 0x03	; 3
    4220:	41 e0       	ldi	r20, 0x01	; 1
    4222:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
    4226:	80 e0       	ldi	r24, 0x00	; 0
    4228:	90 e0       	ldi	r25, 0x00	; 0
    422a:	a0 e0       	ldi	r26, 0x00	; 0
    422c:	b0 e4       	ldi	r27, 0x40	; 64
    422e:	89 8f       	std	Y+25, r24	; 0x19
    4230:	9a 8f       	std	Y+26, r25	; 0x1a
    4232:	ab 8f       	std	Y+27, r26	; 0x1b
    4234:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4236:	69 8d       	ldd	r22, Y+25	; 0x19
    4238:	7a 8d       	ldd	r23, Y+26	; 0x1a
    423a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    423c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    423e:	20 e0       	ldi	r18, 0x00	; 0
    4240:	30 e0       	ldi	r19, 0x00	; 0
    4242:	4a ef       	ldi	r20, 0xFA	; 250
    4244:	54 e4       	ldi	r21, 0x44	; 68
    4246:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    424a:	dc 01       	movw	r26, r24
    424c:	cb 01       	movw	r24, r22
    424e:	8d 8b       	std	Y+21, r24	; 0x15
    4250:	9e 8b       	std	Y+22, r25	; 0x16
    4252:	af 8b       	std	Y+23, r26	; 0x17
    4254:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4256:	6d 89       	ldd	r22, Y+21	; 0x15
    4258:	7e 89       	ldd	r23, Y+22	; 0x16
    425a:	8f 89       	ldd	r24, Y+23	; 0x17
    425c:	98 8d       	ldd	r25, Y+24	; 0x18
    425e:	20 e0       	ldi	r18, 0x00	; 0
    4260:	30 e0       	ldi	r19, 0x00	; 0
    4262:	40 e8       	ldi	r20, 0x80	; 128
    4264:	5f e3       	ldi	r21, 0x3F	; 63
    4266:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    426a:	88 23       	and	r24, r24
    426c:	2c f4       	brge	.+10     	; 0x4278 <HAL_LCD_u8SendChar+0x90>
		__ticks = 1;
    426e:	81 e0       	ldi	r24, 0x01	; 1
    4270:	90 e0       	ldi	r25, 0x00	; 0
    4272:	9c 8b       	std	Y+20, r25	; 0x14
    4274:	8b 8b       	std	Y+19, r24	; 0x13
    4276:	3f c0       	rjmp	.+126    	; 0x42f6 <HAL_LCD_u8SendChar+0x10e>
	else if (__tmp > 65535)
    4278:	6d 89       	ldd	r22, Y+21	; 0x15
    427a:	7e 89       	ldd	r23, Y+22	; 0x16
    427c:	8f 89       	ldd	r24, Y+23	; 0x17
    427e:	98 8d       	ldd	r25, Y+24	; 0x18
    4280:	20 e0       	ldi	r18, 0x00	; 0
    4282:	3f ef       	ldi	r19, 0xFF	; 255
    4284:	4f e7       	ldi	r20, 0x7F	; 127
    4286:	57 e4       	ldi	r21, 0x47	; 71
    4288:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    428c:	18 16       	cp	r1, r24
    428e:	4c f5       	brge	.+82     	; 0x42e2 <HAL_LCD_u8SendChar+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4290:	69 8d       	ldd	r22, Y+25	; 0x19
    4292:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4294:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4296:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4298:	20 e0       	ldi	r18, 0x00	; 0
    429a:	30 e0       	ldi	r19, 0x00	; 0
    429c:	40 e2       	ldi	r20, 0x20	; 32
    429e:	51 e4       	ldi	r21, 0x41	; 65
    42a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42a4:	dc 01       	movw	r26, r24
    42a6:	cb 01       	movw	r24, r22
    42a8:	bc 01       	movw	r22, r24
    42aa:	cd 01       	movw	r24, r26
    42ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42b0:	dc 01       	movw	r26, r24
    42b2:	cb 01       	movw	r24, r22
    42b4:	9c 8b       	std	Y+20, r25	; 0x14
    42b6:	8b 8b       	std	Y+19, r24	; 0x13
    42b8:	0f c0       	rjmp	.+30     	; 0x42d8 <HAL_LCD_u8SendChar+0xf0>
    42ba:	88 ec       	ldi	r24, 0xC8	; 200
    42bc:	90 e0       	ldi	r25, 0x00	; 0
    42be:	9a 8b       	std	Y+18, r25	; 0x12
    42c0:	89 8b       	std	Y+17, r24	; 0x11
    42c2:	89 89       	ldd	r24, Y+17	; 0x11
    42c4:	9a 89       	ldd	r25, Y+18	; 0x12
    42c6:	01 97       	sbiw	r24, 0x01	; 1
    42c8:	f1 f7       	brne	.-4      	; 0x42c6 <HAL_LCD_u8SendChar+0xde>
    42ca:	9a 8b       	std	Y+18, r25	; 0x12
    42cc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42ce:	8b 89       	ldd	r24, Y+19	; 0x13
    42d0:	9c 89       	ldd	r25, Y+20	; 0x14
    42d2:	01 97       	sbiw	r24, 0x01	; 1
    42d4:	9c 8b       	std	Y+20, r25	; 0x14
    42d6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42d8:	8b 89       	ldd	r24, Y+19	; 0x13
    42da:	9c 89       	ldd	r25, Y+20	; 0x14
    42dc:	00 97       	sbiw	r24, 0x00	; 0
    42de:	69 f7       	brne	.-38     	; 0x42ba <HAL_LCD_u8SendChar+0xd2>
    42e0:	14 c0       	rjmp	.+40     	; 0x430a <HAL_LCD_u8SendChar+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42e2:	6d 89       	ldd	r22, Y+21	; 0x15
    42e4:	7e 89       	ldd	r23, Y+22	; 0x16
    42e6:	8f 89       	ldd	r24, Y+23	; 0x17
    42e8:	98 8d       	ldd	r25, Y+24	; 0x18
    42ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42ee:	dc 01       	movw	r26, r24
    42f0:	cb 01       	movw	r24, r22
    42f2:	9c 8b       	std	Y+20, r25	; 0x14
    42f4:	8b 8b       	std	Y+19, r24	; 0x13
    42f6:	8b 89       	ldd	r24, Y+19	; 0x13
    42f8:	9c 89       	ldd	r25, Y+20	; 0x14
    42fa:	98 8b       	std	Y+16, r25	; 0x10
    42fc:	8f 87       	std	Y+15, r24	; 0x0f
    42fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    4300:	98 89       	ldd	r25, Y+16	; 0x10
    4302:	01 97       	sbiw	r24, 0x01	; 1
    4304:	f1 f7       	brne	.-4      	; 0x4302 <HAL_LCD_u8SendChar+0x11a>
    4306:	98 8b       	std	Y+16, r25	; 0x10
    4308:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_Low);
    430a:	81 e0       	ldi	r24, 0x01	; 1
    430c:	63 e0       	ldi	r22, 0x03	; 3
    430e:	40 e0       	ldi	r20, 0x00	; 0
    4310:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	   HAL_LCD_voidData( Loc_u8LCD_Char);
    4314:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4316:	0e 94 84 25 	call	0x4b08	; 0x4b08 <HAL_LCD_voidData>
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_High);
    431a:	81 e0       	ldi	r24, 0x01	; 1
    431c:	63 e0       	ldi	r22, 0x03	; 3
    431e:	41 e0       	ldi	r20, 0x01	; 1
    4320:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
    4324:	80 e0       	ldi	r24, 0x00	; 0
    4326:	90 e0       	ldi	r25, 0x00	; 0
    4328:	a0 e0       	ldi	r26, 0x00	; 0
    432a:	b0 e4       	ldi	r27, 0x40	; 64
    432c:	8b 87       	std	Y+11, r24	; 0x0b
    432e:	9c 87       	std	Y+12, r25	; 0x0c
    4330:	ad 87       	std	Y+13, r26	; 0x0d
    4332:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4334:	6b 85       	ldd	r22, Y+11	; 0x0b
    4336:	7c 85       	ldd	r23, Y+12	; 0x0c
    4338:	8d 85       	ldd	r24, Y+13	; 0x0d
    433a:	9e 85       	ldd	r25, Y+14	; 0x0e
    433c:	20 e0       	ldi	r18, 0x00	; 0
    433e:	30 e0       	ldi	r19, 0x00	; 0
    4340:	4a ef       	ldi	r20, 0xFA	; 250
    4342:	54 e4       	ldi	r21, 0x44	; 68
    4344:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4348:	dc 01       	movw	r26, r24
    434a:	cb 01       	movw	r24, r22
    434c:	8f 83       	std	Y+7, r24	; 0x07
    434e:	98 87       	std	Y+8, r25	; 0x08
    4350:	a9 87       	std	Y+9, r26	; 0x09
    4352:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4354:	6f 81       	ldd	r22, Y+7	; 0x07
    4356:	78 85       	ldd	r23, Y+8	; 0x08
    4358:	89 85       	ldd	r24, Y+9	; 0x09
    435a:	9a 85       	ldd	r25, Y+10	; 0x0a
    435c:	20 e0       	ldi	r18, 0x00	; 0
    435e:	30 e0       	ldi	r19, 0x00	; 0
    4360:	40 e8       	ldi	r20, 0x80	; 128
    4362:	5f e3       	ldi	r21, 0x3F	; 63
    4364:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4368:	88 23       	and	r24, r24
    436a:	2c f4       	brge	.+10     	; 0x4376 <HAL_LCD_u8SendChar+0x18e>
		__ticks = 1;
    436c:	81 e0       	ldi	r24, 0x01	; 1
    436e:	90 e0       	ldi	r25, 0x00	; 0
    4370:	9e 83       	std	Y+6, r25	; 0x06
    4372:	8d 83       	std	Y+5, r24	; 0x05
    4374:	3f c0       	rjmp	.+126    	; 0x43f4 <HAL_LCD_u8SendChar+0x20c>
	else if (__tmp > 65535)
    4376:	6f 81       	ldd	r22, Y+7	; 0x07
    4378:	78 85       	ldd	r23, Y+8	; 0x08
    437a:	89 85       	ldd	r24, Y+9	; 0x09
    437c:	9a 85       	ldd	r25, Y+10	; 0x0a
    437e:	20 e0       	ldi	r18, 0x00	; 0
    4380:	3f ef       	ldi	r19, 0xFF	; 255
    4382:	4f e7       	ldi	r20, 0x7F	; 127
    4384:	57 e4       	ldi	r21, 0x47	; 71
    4386:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    438a:	18 16       	cp	r1, r24
    438c:	4c f5       	brge	.+82     	; 0x43e0 <HAL_LCD_u8SendChar+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    438e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4390:	7c 85       	ldd	r23, Y+12	; 0x0c
    4392:	8d 85       	ldd	r24, Y+13	; 0x0d
    4394:	9e 85       	ldd	r25, Y+14	; 0x0e
    4396:	20 e0       	ldi	r18, 0x00	; 0
    4398:	30 e0       	ldi	r19, 0x00	; 0
    439a:	40 e2       	ldi	r20, 0x20	; 32
    439c:	51 e4       	ldi	r21, 0x41	; 65
    439e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43a2:	dc 01       	movw	r26, r24
    43a4:	cb 01       	movw	r24, r22
    43a6:	bc 01       	movw	r22, r24
    43a8:	cd 01       	movw	r24, r26
    43aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43ae:	dc 01       	movw	r26, r24
    43b0:	cb 01       	movw	r24, r22
    43b2:	9e 83       	std	Y+6, r25	; 0x06
    43b4:	8d 83       	std	Y+5, r24	; 0x05
    43b6:	0f c0       	rjmp	.+30     	; 0x43d6 <HAL_LCD_u8SendChar+0x1ee>
    43b8:	88 ec       	ldi	r24, 0xC8	; 200
    43ba:	90 e0       	ldi	r25, 0x00	; 0
    43bc:	9c 83       	std	Y+4, r25	; 0x04
    43be:	8b 83       	std	Y+3, r24	; 0x03
    43c0:	8b 81       	ldd	r24, Y+3	; 0x03
    43c2:	9c 81       	ldd	r25, Y+4	; 0x04
    43c4:	01 97       	sbiw	r24, 0x01	; 1
    43c6:	f1 f7       	brne	.-4      	; 0x43c4 <HAL_LCD_u8SendChar+0x1dc>
    43c8:	9c 83       	std	Y+4, r25	; 0x04
    43ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43cc:	8d 81       	ldd	r24, Y+5	; 0x05
    43ce:	9e 81       	ldd	r25, Y+6	; 0x06
    43d0:	01 97       	sbiw	r24, 0x01	; 1
    43d2:	9e 83       	std	Y+6, r25	; 0x06
    43d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43d6:	8d 81       	ldd	r24, Y+5	; 0x05
    43d8:	9e 81       	ldd	r25, Y+6	; 0x06
    43da:	00 97       	sbiw	r24, 0x00	; 0
    43dc:	69 f7       	brne	.-38     	; 0x43b8 <HAL_LCD_u8SendChar+0x1d0>
    43de:	14 c0       	rjmp	.+40     	; 0x4408 <HAL_LCD_u8SendChar+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43e0:	6f 81       	ldd	r22, Y+7	; 0x07
    43e2:	78 85       	ldd	r23, Y+8	; 0x08
    43e4:	89 85       	ldd	r24, Y+9	; 0x09
    43e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    43e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43ec:	dc 01       	movw	r26, r24
    43ee:	cb 01       	movw	r24, r22
    43f0:	9e 83       	std	Y+6, r25	; 0x06
    43f2:	8d 83       	std	Y+5, r24	; 0x05
    43f4:	8d 81       	ldd	r24, Y+5	; 0x05
    43f6:	9e 81       	ldd	r25, Y+6	; 0x06
    43f8:	9a 83       	std	Y+2, r25	; 0x02
    43fa:	89 83       	std	Y+1, r24	; 0x01
    43fc:	89 81       	ldd	r24, Y+1	; 0x01
    43fe:	9a 81       	ldd	r25, Y+2	; 0x02
    4400:	01 97       	sbiw	r24, 0x01	; 1
    4402:	f1 f7       	brne	.-4      	; 0x4400 <HAL_LCD_u8SendChar+0x218>
    4404:	9a 83       	std	Y+2, r25	; 0x02
    4406:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_Low);
    4408:	81 e0       	ldi	r24, 0x01	; 1
    440a:	63 e0       	ldi	r22, 0x03	; 3
    440c:	40 e0       	ldi	r20, 0x00	; 0
    440e:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
}
    4412:	6d 96       	adiw	r28, 0x1d	; 29
    4414:	0f b6       	in	r0, 0x3f	; 63
    4416:	f8 94       	cli
    4418:	de bf       	out	0x3e, r29	; 62
    441a:	0f be       	out	0x3f, r0	; 63
    441c:	cd bf       	out	0x3d, r28	; 61
    441e:	cf 91       	pop	r28
    4420:	df 91       	pop	r29
    4422:	08 95       	ret

00004424 <HAL_LCD_u8SendString>:

void HAL_LCD_u8SendString(u8 * Loc_u8LCD_String) {
    4424:	df 93       	push	r29
    4426:	cf 93       	push	r28
    4428:	00 d0       	rcall	.+0      	; 0x442a <HAL_LCD_u8SendString+0x6>
    442a:	00 d0       	rcall	.+0      	; 0x442c <HAL_LCD_u8SendString+0x8>
    442c:	00 d0       	rcall	.+0      	; 0x442e <HAL_LCD_u8SendString+0xa>
    442e:	cd b7       	in	r28, 0x3d	; 61
    4430:	de b7       	in	r29, 0x3e	; 62
    4432:	9e 83       	std	Y+6, r25	; 0x06
    4434:	8d 83       	std	Y+5, r24	; 0x05
	for (u32 count = 0; Loc_u8LCD_String[count] != '\0'; count++) {
    4436:	19 82       	std	Y+1, r1	; 0x01
    4438:	1a 82       	std	Y+2, r1	; 0x02
    443a:	1b 82       	std	Y+3, r1	; 0x03
    443c:	1c 82       	std	Y+4, r1	; 0x04
    443e:	15 c0       	rjmp	.+42     	; 0x446a <HAL_LCD_u8SendString+0x46>
		HAL_LCD_u8SendChar(Loc_u8LCD_String[count]);
    4440:	29 81       	ldd	r18, Y+1	; 0x01
    4442:	3a 81       	ldd	r19, Y+2	; 0x02
    4444:	8d 81       	ldd	r24, Y+5	; 0x05
    4446:	9e 81       	ldd	r25, Y+6	; 0x06
    4448:	fc 01       	movw	r30, r24
    444a:	e2 0f       	add	r30, r18
    444c:	f3 1f       	adc	r31, r19
    444e:	80 81       	ld	r24, Z
    4450:	0e 94 f4 20 	call	0x41e8	; 0x41e8 <HAL_LCD_u8SendChar>
	_delay_ms(2);
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_Low);
}

void HAL_LCD_u8SendString(u8 * Loc_u8LCD_String) {
	for (u32 count = 0; Loc_u8LCD_String[count] != '\0'; count++) {
    4454:	89 81       	ldd	r24, Y+1	; 0x01
    4456:	9a 81       	ldd	r25, Y+2	; 0x02
    4458:	ab 81       	ldd	r26, Y+3	; 0x03
    445a:	bc 81       	ldd	r27, Y+4	; 0x04
    445c:	01 96       	adiw	r24, 0x01	; 1
    445e:	a1 1d       	adc	r26, r1
    4460:	b1 1d       	adc	r27, r1
    4462:	89 83       	std	Y+1, r24	; 0x01
    4464:	9a 83       	std	Y+2, r25	; 0x02
    4466:	ab 83       	std	Y+3, r26	; 0x03
    4468:	bc 83       	std	Y+4, r27	; 0x04
    446a:	29 81       	ldd	r18, Y+1	; 0x01
    446c:	3a 81       	ldd	r19, Y+2	; 0x02
    446e:	8d 81       	ldd	r24, Y+5	; 0x05
    4470:	9e 81       	ldd	r25, Y+6	; 0x06
    4472:	fc 01       	movw	r30, r24
    4474:	e2 0f       	add	r30, r18
    4476:	f3 1f       	adc	r31, r19
    4478:	80 81       	ld	r24, Z
    447a:	88 23       	and	r24, r24
    447c:	09 f7       	brne	.-62     	; 0x4440 <HAL_LCD_u8SendString+0x1c>
		HAL_LCD_u8SendChar(Loc_u8LCD_String[count]);
	}
}
    447e:	26 96       	adiw	r28, 0x06	; 6
    4480:	0f b6       	in	r0, 0x3f	; 63
    4482:	f8 94       	cli
    4484:	de bf       	out	0x3e, r29	; 62
    4486:	0f be       	out	0x3f, r0	; 63
    4488:	cd bf       	out	0x3d, r28	; 61
    448a:	cf 91       	pop	r28
    448c:	df 91       	pop	r29
    448e:	08 95       	ret

00004490 <HAL_LCD_u8SendNumber>:

void HAL_LCD_u8SendNumber(u16 Loc_u8LCD_Number) {
    4490:	df 93       	push	r29
    4492:	cf 93       	push	r28
    4494:	cd b7       	in	r28, 0x3d	; 61
    4496:	de b7       	in	r29, 0x3e	; 62
    4498:	2c 97       	sbiw	r28, 0x0c	; 12
    449a:	0f b6       	in	r0, 0x3f	; 63
    449c:	f8 94       	cli
    449e:	de bf       	out	0x3e, r29	; 62
    44a0:	0f be       	out	0x3f, r0	; 63
    44a2:	cd bf       	out	0x3d, r28	; 61
    44a4:	9c 87       	std	Y+12, r25	; 0x0c
    44a6:	8b 87       	std	Y+11, r24	; 0x0b
	u8 str[10];
	itoa(Loc_u8LCD_Number, str, 10);
    44a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    44aa:	9c 85       	ldd	r25, Y+12	; 0x0c
    44ac:	9e 01       	movw	r18, r28
    44ae:	2f 5f       	subi	r18, 0xFF	; 255
    44b0:	3f 4f       	sbci	r19, 0xFF	; 255
    44b2:	b9 01       	movw	r22, r18
    44b4:	4a e0       	ldi	r20, 0x0A	; 10
    44b6:	50 e0       	ldi	r21, 0x00	; 0
    44b8:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <itoa>
	HAL_LCD_u8SendString(str);
    44bc:	ce 01       	movw	r24, r28
    44be:	01 96       	adiw	r24, 0x01	; 1
    44c0:	0e 94 12 22 	call	0x4424	; 0x4424 <HAL_LCD_u8SendString>
}
    44c4:	2c 96       	adiw	r28, 0x0c	; 12
    44c6:	0f b6       	in	r0, 0x3f	; 63
    44c8:	f8 94       	cli
    44ca:	de bf       	out	0x3e, r29	; 62
    44cc:	0f be       	out	0x3f, r0	; 63
    44ce:	cd bf       	out	0x3d, r28	; 61
    44d0:	cf 91       	pop	r28
    44d2:	df 91       	pop	r29
    44d4:	08 95       	ret

000044d6 <HAL_LCD_u8GoTo>:

void HAL_LCD_u8GoTo(u8 Loc_u8TypeOfShift, u8 Loc_u8NumOfShift) {
    44d6:	df 93       	push	r29
    44d8:	cf 93       	push	r28
    44da:	cd b7       	in	r28, 0x3d	; 61
    44dc:	de b7       	in	r29, 0x3e	; 62
    44de:	c2 54       	subi	r28, 0x42	; 66
    44e0:	d0 40       	sbci	r29, 0x00	; 0
    44e2:	0f b6       	in	r0, 0x3f	; 63
    44e4:	f8 94       	cli
    44e6:	de bf       	out	0x3e, r29	; 62
    44e8:	0f be       	out	0x3f, r0	; 63
    44ea:	cd bf       	out	0x3d, r28	; 61
    44ec:	fe 01       	movw	r30, r28
    44ee:	ef 5b       	subi	r30, 0xBF	; 191
    44f0:	ff 4f       	sbci	r31, 0xFF	; 255
    44f2:	80 83       	st	Z, r24
    44f4:	fe 01       	movw	r30, r28
    44f6:	ee 5b       	subi	r30, 0xBE	; 190
    44f8:	ff 4f       	sbci	r31, 0xFF	; 255
    44fa:	60 83       	st	Z, r22
	if (Loc_u8TypeOfShift == Right_Shift) {
    44fc:	fe 01       	movw	r30, r28
    44fe:	ef 5b       	subi	r30, 0xBF	; 191
    4500:	ff 4f       	sbci	r31, 0xFF	; 255
    4502:	80 81       	ld	r24, Z
    4504:	81 30       	cpi	r24, 0x01	; 1
    4506:	09 f0       	breq	.+2      	; 0x450a <HAL_LCD_u8GoTo+0x34>
    4508:	a0 c0       	rjmp	.+320    	; 0x464a <HAL_LCD_u8GoTo+0x174>
		for (u32 count = 0; count < Loc_u8NumOfShift; count++) {
    450a:	fe 01       	movw	r30, r28
    450c:	fd 96       	adiw	r30, 0x3d	; 61
    450e:	10 82       	st	Z, r1
    4510:	11 82       	std	Z+1, r1	; 0x01
    4512:	12 82       	std	Z+2, r1	; 0x02
    4514:	13 82       	std	Z+3, r1	; 0x03
    4516:	84 c0       	rjmp	.+264    	; 0x4620 <HAL_LCD_u8GoTo+0x14a>
    4518:	80 e0       	ldi	r24, 0x00	; 0
    451a:	90 e0       	ldi	r25, 0x00	; 0
    451c:	a0 e0       	ldi	r26, 0x00	; 0
    451e:	b0 e4       	ldi	r27, 0x40	; 64
    4520:	8d ab       	std	Y+53, r24	; 0x35
    4522:	9e ab       	std	Y+54, r25	; 0x36
    4524:	af ab       	std	Y+55, r26	; 0x37
    4526:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4528:	6d a9       	ldd	r22, Y+53	; 0x35
    452a:	7e a9       	ldd	r23, Y+54	; 0x36
    452c:	8f a9       	ldd	r24, Y+55	; 0x37
    452e:	98 ad       	ldd	r25, Y+56	; 0x38
    4530:	20 e0       	ldi	r18, 0x00	; 0
    4532:	30 e0       	ldi	r19, 0x00	; 0
    4534:	4a ef       	ldi	r20, 0xFA	; 250
    4536:	54 e4       	ldi	r21, 0x44	; 68
    4538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    453c:	dc 01       	movw	r26, r24
    453e:	cb 01       	movw	r24, r22
    4540:	89 ab       	std	Y+49, r24	; 0x31
    4542:	9a ab       	std	Y+50, r25	; 0x32
    4544:	ab ab       	std	Y+51, r26	; 0x33
    4546:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4548:	69 a9       	ldd	r22, Y+49	; 0x31
    454a:	7a a9       	ldd	r23, Y+50	; 0x32
    454c:	8b a9       	ldd	r24, Y+51	; 0x33
    454e:	9c a9       	ldd	r25, Y+52	; 0x34
    4550:	20 e0       	ldi	r18, 0x00	; 0
    4552:	30 e0       	ldi	r19, 0x00	; 0
    4554:	40 e8       	ldi	r20, 0x80	; 128
    4556:	5f e3       	ldi	r21, 0x3F	; 63
    4558:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    455c:	88 23       	and	r24, r24
    455e:	2c f4       	brge	.+10     	; 0x456a <HAL_LCD_u8GoTo+0x94>
		__ticks = 1;
    4560:	81 e0       	ldi	r24, 0x01	; 1
    4562:	90 e0       	ldi	r25, 0x00	; 0
    4564:	98 ab       	std	Y+48, r25	; 0x30
    4566:	8f a7       	std	Y+47, r24	; 0x2f
    4568:	3f c0       	rjmp	.+126    	; 0x45e8 <HAL_LCD_u8GoTo+0x112>
	else if (__tmp > 65535)
    456a:	69 a9       	ldd	r22, Y+49	; 0x31
    456c:	7a a9       	ldd	r23, Y+50	; 0x32
    456e:	8b a9       	ldd	r24, Y+51	; 0x33
    4570:	9c a9       	ldd	r25, Y+52	; 0x34
    4572:	20 e0       	ldi	r18, 0x00	; 0
    4574:	3f ef       	ldi	r19, 0xFF	; 255
    4576:	4f e7       	ldi	r20, 0x7F	; 127
    4578:	57 e4       	ldi	r21, 0x47	; 71
    457a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    457e:	18 16       	cp	r1, r24
    4580:	4c f5       	brge	.+82     	; 0x45d4 <HAL_LCD_u8GoTo+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4582:	6d a9       	ldd	r22, Y+53	; 0x35
    4584:	7e a9       	ldd	r23, Y+54	; 0x36
    4586:	8f a9       	ldd	r24, Y+55	; 0x37
    4588:	98 ad       	ldd	r25, Y+56	; 0x38
    458a:	20 e0       	ldi	r18, 0x00	; 0
    458c:	30 e0       	ldi	r19, 0x00	; 0
    458e:	40 e2       	ldi	r20, 0x20	; 32
    4590:	51 e4       	ldi	r21, 0x41	; 65
    4592:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4596:	dc 01       	movw	r26, r24
    4598:	cb 01       	movw	r24, r22
    459a:	bc 01       	movw	r22, r24
    459c:	cd 01       	movw	r24, r26
    459e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45a2:	dc 01       	movw	r26, r24
    45a4:	cb 01       	movw	r24, r22
    45a6:	98 ab       	std	Y+48, r25	; 0x30
    45a8:	8f a7       	std	Y+47, r24	; 0x2f
    45aa:	0f c0       	rjmp	.+30     	; 0x45ca <HAL_LCD_u8GoTo+0xf4>
    45ac:	88 ec       	ldi	r24, 0xC8	; 200
    45ae:	90 e0       	ldi	r25, 0x00	; 0
    45b0:	9e a7       	std	Y+46, r25	; 0x2e
    45b2:	8d a7       	std	Y+45, r24	; 0x2d
    45b4:	8d a5       	ldd	r24, Y+45	; 0x2d
    45b6:	9e a5       	ldd	r25, Y+46	; 0x2e
    45b8:	01 97       	sbiw	r24, 0x01	; 1
    45ba:	f1 f7       	brne	.-4      	; 0x45b8 <HAL_LCD_u8GoTo+0xe2>
    45bc:	9e a7       	std	Y+46, r25	; 0x2e
    45be:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    45c2:	98 a9       	ldd	r25, Y+48	; 0x30
    45c4:	01 97       	sbiw	r24, 0x01	; 1
    45c6:	98 ab       	std	Y+48, r25	; 0x30
    45c8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    45cc:	98 a9       	ldd	r25, Y+48	; 0x30
    45ce:	00 97       	sbiw	r24, 0x00	; 0
    45d0:	69 f7       	brne	.-38     	; 0x45ac <HAL_LCD_u8GoTo+0xd6>
    45d2:	14 c0       	rjmp	.+40     	; 0x45fc <HAL_LCD_u8GoTo+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45d4:	69 a9       	ldd	r22, Y+49	; 0x31
    45d6:	7a a9       	ldd	r23, Y+50	; 0x32
    45d8:	8b a9       	ldd	r24, Y+51	; 0x33
    45da:	9c a9       	ldd	r25, Y+52	; 0x34
    45dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45e0:	dc 01       	movw	r26, r24
    45e2:	cb 01       	movw	r24, r22
    45e4:	98 ab       	std	Y+48, r25	; 0x30
    45e6:	8f a7       	std	Y+47, r24	; 0x2f
    45e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    45ea:	98 a9       	ldd	r25, Y+48	; 0x30
    45ec:	9c a7       	std	Y+44, r25	; 0x2c
    45ee:	8b a7       	std	Y+43, r24	; 0x2b
    45f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    45f2:	9c a5       	ldd	r25, Y+44	; 0x2c
    45f4:	01 97       	sbiw	r24, 0x01	; 1
    45f6:	f1 f7       	brne	.-4      	; 0x45f4 <HAL_LCD_u8GoTo+0x11e>
    45f8:	9c a7       	std	Y+44, r25	; 0x2c
    45fa:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(2);
			HAL_LCD_u8SendCommands(Right_Shift_Command);
    45fc:	8c e1       	ldi	r24, 0x1C	; 28
    45fe:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <HAL_LCD_u8SendCommands>
	HAL_LCD_u8SendString(str);
}

void HAL_LCD_u8GoTo(u8 Loc_u8TypeOfShift, u8 Loc_u8NumOfShift) {
	if (Loc_u8TypeOfShift == Right_Shift) {
		for (u32 count = 0; count < Loc_u8NumOfShift; count++) {
    4602:	fe 01       	movw	r30, r28
    4604:	fd 96       	adiw	r30, 0x3d	; 61
    4606:	80 81       	ld	r24, Z
    4608:	91 81       	ldd	r25, Z+1	; 0x01
    460a:	a2 81       	ldd	r26, Z+2	; 0x02
    460c:	b3 81       	ldd	r27, Z+3	; 0x03
    460e:	01 96       	adiw	r24, 0x01	; 1
    4610:	a1 1d       	adc	r26, r1
    4612:	b1 1d       	adc	r27, r1
    4614:	fe 01       	movw	r30, r28
    4616:	fd 96       	adiw	r30, 0x3d	; 61
    4618:	80 83       	st	Z, r24
    461a:	91 83       	std	Z+1, r25	; 0x01
    461c:	a2 83       	std	Z+2, r26	; 0x02
    461e:	b3 83       	std	Z+3, r27	; 0x03
    4620:	fe 01       	movw	r30, r28
    4622:	ee 5b       	subi	r30, 0xBE	; 190
    4624:	ff 4f       	sbci	r31, 0xFF	; 255
    4626:	80 81       	ld	r24, Z
    4628:	28 2f       	mov	r18, r24
    462a:	30 e0       	ldi	r19, 0x00	; 0
    462c:	40 e0       	ldi	r20, 0x00	; 0
    462e:	50 e0       	ldi	r21, 0x00	; 0
    4630:	fe 01       	movw	r30, r28
    4632:	fd 96       	adiw	r30, 0x3d	; 61
    4634:	80 81       	ld	r24, Z
    4636:	91 81       	ldd	r25, Z+1	; 0x01
    4638:	a2 81       	ldd	r26, Z+2	; 0x02
    463a:	b3 81       	ldd	r27, Z+3	; 0x03
    463c:	82 17       	cp	r24, r18
    463e:	93 07       	cpc	r25, r19
    4640:	a4 07       	cpc	r26, r20
    4642:	b5 07       	cpc	r27, r21
    4644:	08 f4       	brcc	.+2      	; 0x4648 <HAL_LCD_u8GoTo+0x172>
    4646:	68 cf       	rjmp	.-304    	; 0x4518 <HAL_LCD_u8GoTo+0x42>
    4648:	98 c1       	rjmp	.+816    	; 0x497a <HAL_LCD_u8GoTo+0x4a4>
			_delay_ms(2);
			HAL_LCD_u8SendCommands(Right_Shift_Command);
		}
	} else if (Loc_u8TypeOfShift == Left_Shift) {
    464a:	fe 01       	movw	r30, r28
    464c:	ef 5b       	subi	r30, 0xBF	; 191
    464e:	ff 4f       	sbci	r31, 0xFF	; 255
    4650:	80 81       	ld	r24, Z
    4652:	88 23       	and	r24, r24
    4654:	09 f0       	breq	.+2      	; 0x4658 <HAL_LCD_u8GoTo+0x182>
    4656:	98 c0       	rjmp	.+304    	; 0x4788 <HAL_LCD_u8GoTo+0x2b2>
		for (u32 count = 0; count < Loc_u8NumOfShift; count++) {
    4658:	19 ae       	std	Y+57, r1	; 0x39
    465a:	1a ae       	std	Y+58, r1	; 0x3a
    465c:	1b ae       	std	Y+59, r1	; 0x3b
    465e:	1c ae       	std	Y+60, r1	; 0x3c
    4660:	80 c0       	rjmp	.+256    	; 0x4762 <HAL_LCD_u8GoTo+0x28c>
    4662:	80 e0       	ldi	r24, 0x00	; 0
    4664:	90 e0       	ldi	r25, 0x00	; 0
    4666:	a0 e0       	ldi	r26, 0x00	; 0
    4668:	b0 e4       	ldi	r27, 0x40	; 64
    466a:	8f a3       	std	Y+39, r24	; 0x27
    466c:	98 a7       	std	Y+40, r25	; 0x28
    466e:	a9 a7       	std	Y+41, r26	; 0x29
    4670:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4672:	6f a1       	ldd	r22, Y+39	; 0x27
    4674:	78 a5       	ldd	r23, Y+40	; 0x28
    4676:	89 a5       	ldd	r24, Y+41	; 0x29
    4678:	9a a5       	ldd	r25, Y+42	; 0x2a
    467a:	20 e0       	ldi	r18, 0x00	; 0
    467c:	30 e0       	ldi	r19, 0x00	; 0
    467e:	4a ef       	ldi	r20, 0xFA	; 250
    4680:	54 e4       	ldi	r21, 0x44	; 68
    4682:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4686:	dc 01       	movw	r26, r24
    4688:	cb 01       	movw	r24, r22
    468a:	8b a3       	std	Y+35, r24	; 0x23
    468c:	9c a3       	std	Y+36, r25	; 0x24
    468e:	ad a3       	std	Y+37, r26	; 0x25
    4690:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4692:	6b a1       	ldd	r22, Y+35	; 0x23
    4694:	7c a1       	ldd	r23, Y+36	; 0x24
    4696:	8d a1       	ldd	r24, Y+37	; 0x25
    4698:	9e a1       	ldd	r25, Y+38	; 0x26
    469a:	20 e0       	ldi	r18, 0x00	; 0
    469c:	30 e0       	ldi	r19, 0x00	; 0
    469e:	40 e8       	ldi	r20, 0x80	; 128
    46a0:	5f e3       	ldi	r21, 0x3F	; 63
    46a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46a6:	88 23       	and	r24, r24
    46a8:	2c f4       	brge	.+10     	; 0x46b4 <HAL_LCD_u8GoTo+0x1de>
		__ticks = 1;
    46aa:	81 e0       	ldi	r24, 0x01	; 1
    46ac:	90 e0       	ldi	r25, 0x00	; 0
    46ae:	9a a3       	std	Y+34, r25	; 0x22
    46b0:	89 a3       	std	Y+33, r24	; 0x21
    46b2:	3f c0       	rjmp	.+126    	; 0x4732 <HAL_LCD_u8GoTo+0x25c>
	else if (__tmp > 65535)
    46b4:	6b a1       	ldd	r22, Y+35	; 0x23
    46b6:	7c a1       	ldd	r23, Y+36	; 0x24
    46b8:	8d a1       	ldd	r24, Y+37	; 0x25
    46ba:	9e a1       	ldd	r25, Y+38	; 0x26
    46bc:	20 e0       	ldi	r18, 0x00	; 0
    46be:	3f ef       	ldi	r19, 0xFF	; 255
    46c0:	4f e7       	ldi	r20, 0x7F	; 127
    46c2:	57 e4       	ldi	r21, 0x47	; 71
    46c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46c8:	18 16       	cp	r1, r24
    46ca:	4c f5       	brge	.+82     	; 0x471e <HAL_LCD_u8GoTo+0x248>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46cc:	6f a1       	ldd	r22, Y+39	; 0x27
    46ce:	78 a5       	ldd	r23, Y+40	; 0x28
    46d0:	89 a5       	ldd	r24, Y+41	; 0x29
    46d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    46d4:	20 e0       	ldi	r18, 0x00	; 0
    46d6:	30 e0       	ldi	r19, 0x00	; 0
    46d8:	40 e2       	ldi	r20, 0x20	; 32
    46da:	51 e4       	ldi	r21, 0x41	; 65
    46dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46e0:	dc 01       	movw	r26, r24
    46e2:	cb 01       	movw	r24, r22
    46e4:	bc 01       	movw	r22, r24
    46e6:	cd 01       	movw	r24, r26
    46e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46ec:	dc 01       	movw	r26, r24
    46ee:	cb 01       	movw	r24, r22
    46f0:	9a a3       	std	Y+34, r25	; 0x22
    46f2:	89 a3       	std	Y+33, r24	; 0x21
    46f4:	0f c0       	rjmp	.+30     	; 0x4714 <HAL_LCD_u8GoTo+0x23e>
    46f6:	88 ec       	ldi	r24, 0xC8	; 200
    46f8:	90 e0       	ldi	r25, 0x00	; 0
    46fa:	98 a3       	std	Y+32, r25	; 0x20
    46fc:	8f 8f       	std	Y+31, r24	; 0x1f
    46fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4700:	98 a1       	ldd	r25, Y+32	; 0x20
    4702:	01 97       	sbiw	r24, 0x01	; 1
    4704:	f1 f7       	brne	.-4      	; 0x4702 <HAL_LCD_u8GoTo+0x22c>
    4706:	98 a3       	std	Y+32, r25	; 0x20
    4708:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    470a:	89 a1       	ldd	r24, Y+33	; 0x21
    470c:	9a a1       	ldd	r25, Y+34	; 0x22
    470e:	01 97       	sbiw	r24, 0x01	; 1
    4710:	9a a3       	std	Y+34, r25	; 0x22
    4712:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4714:	89 a1       	ldd	r24, Y+33	; 0x21
    4716:	9a a1       	ldd	r25, Y+34	; 0x22
    4718:	00 97       	sbiw	r24, 0x00	; 0
    471a:	69 f7       	brne	.-38     	; 0x46f6 <HAL_LCD_u8GoTo+0x220>
    471c:	14 c0       	rjmp	.+40     	; 0x4746 <HAL_LCD_u8GoTo+0x270>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    471e:	6b a1       	ldd	r22, Y+35	; 0x23
    4720:	7c a1       	ldd	r23, Y+36	; 0x24
    4722:	8d a1       	ldd	r24, Y+37	; 0x25
    4724:	9e a1       	ldd	r25, Y+38	; 0x26
    4726:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    472a:	dc 01       	movw	r26, r24
    472c:	cb 01       	movw	r24, r22
    472e:	9a a3       	std	Y+34, r25	; 0x22
    4730:	89 a3       	std	Y+33, r24	; 0x21
    4732:	89 a1       	ldd	r24, Y+33	; 0x21
    4734:	9a a1       	ldd	r25, Y+34	; 0x22
    4736:	9e 8f       	std	Y+30, r25	; 0x1e
    4738:	8d 8f       	std	Y+29, r24	; 0x1d
    473a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    473c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    473e:	01 97       	sbiw	r24, 0x01	; 1
    4740:	f1 f7       	brne	.-4      	; 0x473e <HAL_LCD_u8GoTo+0x268>
    4742:	9e 8f       	std	Y+30, r25	; 0x1e
    4744:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(2);
			HAL_LCD_u8SendCommands(Left_Shift_Command);
    4746:	88 e1       	ldi	r24, 0x18	; 24
    4748:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <HAL_LCD_u8SendCommands>
		for (u32 count = 0; count < Loc_u8NumOfShift; count++) {
			_delay_ms(2);
			HAL_LCD_u8SendCommands(Right_Shift_Command);
		}
	} else if (Loc_u8TypeOfShift == Left_Shift) {
		for (u32 count = 0; count < Loc_u8NumOfShift; count++) {
    474c:	89 ad       	ldd	r24, Y+57	; 0x39
    474e:	9a ad       	ldd	r25, Y+58	; 0x3a
    4750:	ab ad       	ldd	r26, Y+59	; 0x3b
    4752:	bc ad       	ldd	r27, Y+60	; 0x3c
    4754:	01 96       	adiw	r24, 0x01	; 1
    4756:	a1 1d       	adc	r26, r1
    4758:	b1 1d       	adc	r27, r1
    475a:	89 af       	std	Y+57, r24	; 0x39
    475c:	9a af       	std	Y+58, r25	; 0x3a
    475e:	ab af       	std	Y+59, r26	; 0x3b
    4760:	bc af       	std	Y+60, r27	; 0x3c
    4762:	fe 01       	movw	r30, r28
    4764:	ee 5b       	subi	r30, 0xBE	; 190
    4766:	ff 4f       	sbci	r31, 0xFF	; 255
    4768:	80 81       	ld	r24, Z
    476a:	28 2f       	mov	r18, r24
    476c:	30 e0       	ldi	r19, 0x00	; 0
    476e:	40 e0       	ldi	r20, 0x00	; 0
    4770:	50 e0       	ldi	r21, 0x00	; 0
    4772:	89 ad       	ldd	r24, Y+57	; 0x39
    4774:	9a ad       	ldd	r25, Y+58	; 0x3a
    4776:	ab ad       	ldd	r26, Y+59	; 0x3b
    4778:	bc ad       	ldd	r27, Y+60	; 0x3c
    477a:	82 17       	cp	r24, r18
    477c:	93 07       	cpc	r25, r19
    477e:	a4 07       	cpc	r26, r20
    4780:	b5 07       	cpc	r27, r21
    4782:	08 f4       	brcc	.+2      	; 0x4786 <HAL_LCD_u8GoTo+0x2b0>
    4784:	6e cf       	rjmp	.-292    	; 0x4662 <HAL_LCD_u8GoTo+0x18c>
    4786:	f9 c0       	rjmp	.+498    	; 0x497a <HAL_LCD_u8GoTo+0x4a4>
			_delay_ms(2);
			HAL_LCD_u8SendCommands(Left_Shift_Command);
		}
	} else if (Loc_u8TypeOfShift == First_Line) {
    4788:	fe 01       	movw	r30, r28
    478a:	ef 5b       	subi	r30, 0xBF	; 191
    478c:	ff 4f       	sbci	r31, 0xFF	; 255
    478e:	80 81       	ld	r24, Z
    4790:	82 30       	cpi	r24, 0x02	; 2
    4792:	09 f0       	breq	.+2      	; 0x4796 <HAL_LCD_u8GoTo+0x2c0>
    4794:	76 c0       	rjmp	.+236    	; 0x4882 <HAL_LCD_u8GoTo+0x3ac>
    4796:	80 e0       	ldi	r24, 0x00	; 0
    4798:	90 e0       	ldi	r25, 0x00	; 0
    479a:	a0 e0       	ldi	r26, 0x00	; 0
    479c:	b0 e4       	ldi	r27, 0x40	; 64
    479e:	89 8f       	std	Y+25, r24	; 0x19
    47a0:	9a 8f       	std	Y+26, r25	; 0x1a
    47a2:	ab 8f       	std	Y+27, r26	; 0x1b
    47a4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47a6:	69 8d       	ldd	r22, Y+25	; 0x19
    47a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    47aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    47ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    47ae:	20 e0       	ldi	r18, 0x00	; 0
    47b0:	30 e0       	ldi	r19, 0x00	; 0
    47b2:	4a ef       	ldi	r20, 0xFA	; 250
    47b4:	54 e4       	ldi	r21, 0x44	; 68
    47b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47ba:	dc 01       	movw	r26, r24
    47bc:	cb 01       	movw	r24, r22
    47be:	8d 8b       	std	Y+21, r24	; 0x15
    47c0:	9e 8b       	std	Y+22, r25	; 0x16
    47c2:	af 8b       	std	Y+23, r26	; 0x17
    47c4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    47c6:	6d 89       	ldd	r22, Y+21	; 0x15
    47c8:	7e 89       	ldd	r23, Y+22	; 0x16
    47ca:	8f 89       	ldd	r24, Y+23	; 0x17
    47cc:	98 8d       	ldd	r25, Y+24	; 0x18
    47ce:	20 e0       	ldi	r18, 0x00	; 0
    47d0:	30 e0       	ldi	r19, 0x00	; 0
    47d2:	40 e8       	ldi	r20, 0x80	; 128
    47d4:	5f e3       	ldi	r21, 0x3F	; 63
    47d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    47da:	88 23       	and	r24, r24
    47dc:	2c f4       	brge	.+10     	; 0x47e8 <HAL_LCD_u8GoTo+0x312>
		__ticks = 1;
    47de:	81 e0       	ldi	r24, 0x01	; 1
    47e0:	90 e0       	ldi	r25, 0x00	; 0
    47e2:	9c 8b       	std	Y+20, r25	; 0x14
    47e4:	8b 8b       	std	Y+19, r24	; 0x13
    47e6:	3f c0       	rjmp	.+126    	; 0x4866 <HAL_LCD_u8GoTo+0x390>
	else if (__tmp > 65535)
    47e8:	6d 89       	ldd	r22, Y+21	; 0x15
    47ea:	7e 89       	ldd	r23, Y+22	; 0x16
    47ec:	8f 89       	ldd	r24, Y+23	; 0x17
    47ee:	98 8d       	ldd	r25, Y+24	; 0x18
    47f0:	20 e0       	ldi	r18, 0x00	; 0
    47f2:	3f ef       	ldi	r19, 0xFF	; 255
    47f4:	4f e7       	ldi	r20, 0x7F	; 127
    47f6:	57 e4       	ldi	r21, 0x47	; 71
    47f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47fc:	18 16       	cp	r1, r24
    47fe:	4c f5       	brge	.+82     	; 0x4852 <HAL_LCD_u8GoTo+0x37c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4800:	69 8d       	ldd	r22, Y+25	; 0x19
    4802:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4804:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4806:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4808:	20 e0       	ldi	r18, 0x00	; 0
    480a:	30 e0       	ldi	r19, 0x00	; 0
    480c:	40 e2       	ldi	r20, 0x20	; 32
    480e:	51 e4       	ldi	r21, 0x41	; 65
    4810:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4814:	dc 01       	movw	r26, r24
    4816:	cb 01       	movw	r24, r22
    4818:	bc 01       	movw	r22, r24
    481a:	cd 01       	movw	r24, r26
    481c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4820:	dc 01       	movw	r26, r24
    4822:	cb 01       	movw	r24, r22
    4824:	9c 8b       	std	Y+20, r25	; 0x14
    4826:	8b 8b       	std	Y+19, r24	; 0x13
    4828:	0f c0       	rjmp	.+30     	; 0x4848 <HAL_LCD_u8GoTo+0x372>
    482a:	88 ec       	ldi	r24, 0xC8	; 200
    482c:	90 e0       	ldi	r25, 0x00	; 0
    482e:	9a 8b       	std	Y+18, r25	; 0x12
    4830:	89 8b       	std	Y+17, r24	; 0x11
    4832:	89 89       	ldd	r24, Y+17	; 0x11
    4834:	9a 89       	ldd	r25, Y+18	; 0x12
    4836:	01 97       	sbiw	r24, 0x01	; 1
    4838:	f1 f7       	brne	.-4      	; 0x4836 <HAL_LCD_u8GoTo+0x360>
    483a:	9a 8b       	std	Y+18, r25	; 0x12
    483c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    483e:	8b 89       	ldd	r24, Y+19	; 0x13
    4840:	9c 89       	ldd	r25, Y+20	; 0x14
    4842:	01 97       	sbiw	r24, 0x01	; 1
    4844:	9c 8b       	std	Y+20, r25	; 0x14
    4846:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4848:	8b 89       	ldd	r24, Y+19	; 0x13
    484a:	9c 89       	ldd	r25, Y+20	; 0x14
    484c:	00 97       	sbiw	r24, 0x00	; 0
    484e:	69 f7       	brne	.-38     	; 0x482a <HAL_LCD_u8GoTo+0x354>
    4850:	14 c0       	rjmp	.+40     	; 0x487a <HAL_LCD_u8GoTo+0x3a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4852:	6d 89       	ldd	r22, Y+21	; 0x15
    4854:	7e 89       	ldd	r23, Y+22	; 0x16
    4856:	8f 89       	ldd	r24, Y+23	; 0x17
    4858:	98 8d       	ldd	r25, Y+24	; 0x18
    485a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    485e:	dc 01       	movw	r26, r24
    4860:	cb 01       	movw	r24, r22
    4862:	9c 8b       	std	Y+20, r25	; 0x14
    4864:	8b 8b       	std	Y+19, r24	; 0x13
    4866:	8b 89       	ldd	r24, Y+19	; 0x13
    4868:	9c 89       	ldd	r25, Y+20	; 0x14
    486a:	98 8b       	std	Y+16, r25	; 0x10
    486c:	8f 87       	std	Y+15, r24	; 0x0f
    486e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4870:	98 89       	ldd	r25, Y+16	; 0x10
    4872:	01 97       	sbiw	r24, 0x01	; 1
    4874:	f1 f7       	brne	.-4      	; 0x4872 <HAL_LCD_u8GoTo+0x39c>
    4876:	98 8b       	std	Y+16, r25	; 0x10
    4878:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		HAL_LCD_u8SendCommands(beginning_1stLine);
    487a:	80 e8       	ldi	r24, 0x80	; 128
    487c:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <HAL_LCD_u8SendCommands>
    4880:	7c c0       	rjmp	.+248    	; 0x497a <HAL_LCD_u8GoTo+0x4a4>
	} else if (Loc_u8TypeOfShift == Second_Line) {
    4882:	fe 01       	movw	r30, r28
    4884:	ef 5b       	subi	r30, 0xBF	; 191
    4886:	ff 4f       	sbci	r31, 0xFF	; 255
    4888:	80 81       	ld	r24, Z
    488a:	83 30       	cpi	r24, 0x03	; 3
    488c:	09 f0       	breq	.+2      	; 0x4890 <HAL_LCD_u8GoTo+0x3ba>
    488e:	75 c0       	rjmp	.+234    	; 0x497a <HAL_LCD_u8GoTo+0x4a4>
    4890:	80 e0       	ldi	r24, 0x00	; 0
    4892:	90 e0       	ldi	r25, 0x00	; 0
    4894:	a0 e0       	ldi	r26, 0x00	; 0
    4896:	b0 e4       	ldi	r27, 0x40	; 64
    4898:	8b 87       	std	Y+11, r24	; 0x0b
    489a:	9c 87       	std	Y+12, r25	; 0x0c
    489c:	ad 87       	std	Y+13, r26	; 0x0d
    489e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    48a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    48a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    48a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    48a8:	20 e0       	ldi	r18, 0x00	; 0
    48aa:	30 e0       	ldi	r19, 0x00	; 0
    48ac:	4a ef       	ldi	r20, 0xFA	; 250
    48ae:	54 e4       	ldi	r21, 0x44	; 68
    48b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48b4:	dc 01       	movw	r26, r24
    48b6:	cb 01       	movw	r24, r22
    48b8:	8f 83       	std	Y+7, r24	; 0x07
    48ba:	98 87       	std	Y+8, r25	; 0x08
    48bc:	a9 87       	std	Y+9, r26	; 0x09
    48be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    48c0:	6f 81       	ldd	r22, Y+7	; 0x07
    48c2:	78 85       	ldd	r23, Y+8	; 0x08
    48c4:	89 85       	ldd	r24, Y+9	; 0x09
    48c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    48c8:	20 e0       	ldi	r18, 0x00	; 0
    48ca:	30 e0       	ldi	r19, 0x00	; 0
    48cc:	40 e8       	ldi	r20, 0x80	; 128
    48ce:	5f e3       	ldi	r21, 0x3F	; 63
    48d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    48d4:	88 23       	and	r24, r24
    48d6:	2c f4       	brge	.+10     	; 0x48e2 <HAL_LCD_u8GoTo+0x40c>
		__ticks = 1;
    48d8:	81 e0       	ldi	r24, 0x01	; 1
    48da:	90 e0       	ldi	r25, 0x00	; 0
    48dc:	9e 83       	std	Y+6, r25	; 0x06
    48de:	8d 83       	std	Y+5, r24	; 0x05
    48e0:	3f c0       	rjmp	.+126    	; 0x4960 <HAL_LCD_u8GoTo+0x48a>
	else if (__tmp > 65535)
    48e2:	6f 81       	ldd	r22, Y+7	; 0x07
    48e4:	78 85       	ldd	r23, Y+8	; 0x08
    48e6:	89 85       	ldd	r24, Y+9	; 0x09
    48e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    48ea:	20 e0       	ldi	r18, 0x00	; 0
    48ec:	3f ef       	ldi	r19, 0xFF	; 255
    48ee:	4f e7       	ldi	r20, 0x7F	; 127
    48f0:	57 e4       	ldi	r21, 0x47	; 71
    48f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    48f6:	18 16       	cp	r1, r24
    48f8:	4c f5       	brge	.+82     	; 0x494c <HAL_LCD_u8GoTo+0x476>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    48fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    48fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    4900:	9e 85       	ldd	r25, Y+14	; 0x0e
    4902:	20 e0       	ldi	r18, 0x00	; 0
    4904:	30 e0       	ldi	r19, 0x00	; 0
    4906:	40 e2       	ldi	r20, 0x20	; 32
    4908:	51 e4       	ldi	r21, 0x41	; 65
    490a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    490e:	dc 01       	movw	r26, r24
    4910:	cb 01       	movw	r24, r22
    4912:	bc 01       	movw	r22, r24
    4914:	cd 01       	movw	r24, r26
    4916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    491a:	dc 01       	movw	r26, r24
    491c:	cb 01       	movw	r24, r22
    491e:	9e 83       	std	Y+6, r25	; 0x06
    4920:	8d 83       	std	Y+5, r24	; 0x05
    4922:	0f c0       	rjmp	.+30     	; 0x4942 <HAL_LCD_u8GoTo+0x46c>
    4924:	88 ec       	ldi	r24, 0xC8	; 200
    4926:	90 e0       	ldi	r25, 0x00	; 0
    4928:	9c 83       	std	Y+4, r25	; 0x04
    492a:	8b 83       	std	Y+3, r24	; 0x03
    492c:	8b 81       	ldd	r24, Y+3	; 0x03
    492e:	9c 81       	ldd	r25, Y+4	; 0x04
    4930:	01 97       	sbiw	r24, 0x01	; 1
    4932:	f1 f7       	brne	.-4      	; 0x4930 <HAL_LCD_u8GoTo+0x45a>
    4934:	9c 83       	std	Y+4, r25	; 0x04
    4936:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4938:	8d 81       	ldd	r24, Y+5	; 0x05
    493a:	9e 81       	ldd	r25, Y+6	; 0x06
    493c:	01 97       	sbiw	r24, 0x01	; 1
    493e:	9e 83       	std	Y+6, r25	; 0x06
    4940:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4942:	8d 81       	ldd	r24, Y+5	; 0x05
    4944:	9e 81       	ldd	r25, Y+6	; 0x06
    4946:	00 97       	sbiw	r24, 0x00	; 0
    4948:	69 f7       	brne	.-38     	; 0x4924 <HAL_LCD_u8GoTo+0x44e>
    494a:	14 c0       	rjmp	.+40     	; 0x4974 <HAL_LCD_u8GoTo+0x49e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    494c:	6f 81       	ldd	r22, Y+7	; 0x07
    494e:	78 85       	ldd	r23, Y+8	; 0x08
    4950:	89 85       	ldd	r24, Y+9	; 0x09
    4952:	9a 85       	ldd	r25, Y+10	; 0x0a
    4954:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4958:	dc 01       	movw	r26, r24
    495a:	cb 01       	movw	r24, r22
    495c:	9e 83       	std	Y+6, r25	; 0x06
    495e:	8d 83       	std	Y+5, r24	; 0x05
    4960:	8d 81       	ldd	r24, Y+5	; 0x05
    4962:	9e 81       	ldd	r25, Y+6	; 0x06
    4964:	9a 83       	std	Y+2, r25	; 0x02
    4966:	89 83       	std	Y+1, r24	; 0x01
    4968:	89 81       	ldd	r24, Y+1	; 0x01
    496a:	9a 81       	ldd	r25, Y+2	; 0x02
    496c:	01 97       	sbiw	r24, 0x01	; 1
    496e:	f1 f7       	brne	.-4      	; 0x496c <HAL_LCD_u8GoTo+0x496>
    4970:	9a 83       	std	Y+2, r25	; 0x02
    4972:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		HAL_LCD_u8SendCommands(beginning_2stLine);
    4974:	80 ec       	ldi	r24, 0xC0	; 192
    4976:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <HAL_LCD_u8SendCommands>
	}
}
    497a:	ce 5b       	subi	r28, 0xBE	; 190
    497c:	df 4f       	sbci	r29, 0xFF	; 255
    497e:	0f b6       	in	r0, 0x3f	; 63
    4980:	f8 94       	cli
    4982:	de bf       	out	0x3e, r29	; 62
    4984:	0f be       	out	0x3f, r0	; 63
    4986:	cd bf       	out	0x3d, r28	; 61
    4988:	cf 91       	pop	r28
    498a:	df 91       	pop	r29
    498c:	08 95       	ret

0000498e <HAL_LCD_u8Clear>:

void HAL_LCD_u8Clear() {
    498e:	df 93       	push	r29
    4990:	cf 93       	push	r28
    4992:	cd b7       	in	r28, 0x3d	; 61
    4994:	de b7       	in	r29, 0x3e	; 62
    4996:	2e 97       	sbiw	r28, 0x0e	; 14
    4998:	0f b6       	in	r0, 0x3f	; 63
    499a:	f8 94       	cli
    499c:	de bf       	out	0x3e, r29	; 62
    499e:	0f be       	out	0x3f, r0	; 63
    49a0:	cd bf       	out	0x3d, r28	; 61
    49a2:	80 e0       	ldi	r24, 0x00	; 0
    49a4:	90 e0       	ldi	r25, 0x00	; 0
    49a6:	a0 e0       	ldi	r26, 0x00	; 0
    49a8:	b0 e4       	ldi	r27, 0x40	; 64
    49aa:	8b 87       	std	Y+11, r24	; 0x0b
    49ac:	9c 87       	std	Y+12, r25	; 0x0c
    49ae:	ad 87       	std	Y+13, r26	; 0x0d
    49b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    49b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    49b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    49b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    49ba:	20 e0       	ldi	r18, 0x00	; 0
    49bc:	30 e0       	ldi	r19, 0x00	; 0
    49be:	4a ef       	ldi	r20, 0xFA	; 250
    49c0:	54 e4       	ldi	r21, 0x44	; 68
    49c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49c6:	dc 01       	movw	r26, r24
    49c8:	cb 01       	movw	r24, r22
    49ca:	8f 83       	std	Y+7, r24	; 0x07
    49cc:	98 87       	std	Y+8, r25	; 0x08
    49ce:	a9 87       	std	Y+9, r26	; 0x09
    49d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    49d2:	6f 81       	ldd	r22, Y+7	; 0x07
    49d4:	78 85       	ldd	r23, Y+8	; 0x08
    49d6:	89 85       	ldd	r24, Y+9	; 0x09
    49d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    49da:	20 e0       	ldi	r18, 0x00	; 0
    49dc:	30 e0       	ldi	r19, 0x00	; 0
    49de:	40 e8       	ldi	r20, 0x80	; 128
    49e0:	5f e3       	ldi	r21, 0x3F	; 63
    49e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    49e6:	88 23       	and	r24, r24
    49e8:	2c f4       	brge	.+10     	; 0x49f4 <HAL_LCD_u8Clear+0x66>
		__ticks = 1;
    49ea:	81 e0       	ldi	r24, 0x01	; 1
    49ec:	90 e0       	ldi	r25, 0x00	; 0
    49ee:	9e 83       	std	Y+6, r25	; 0x06
    49f0:	8d 83       	std	Y+5, r24	; 0x05
    49f2:	3f c0       	rjmp	.+126    	; 0x4a72 <HAL_LCD_u8Clear+0xe4>
	else if (__tmp > 65535)
    49f4:	6f 81       	ldd	r22, Y+7	; 0x07
    49f6:	78 85       	ldd	r23, Y+8	; 0x08
    49f8:	89 85       	ldd	r24, Y+9	; 0x09
    49fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    49fc:	20 e0       	ldi	r18, 0x00	; 0
    49fe:	3f ef       	ldi	r19, 0xFF	; 255
    4a00:	4f e7       	ldi	r20, 0x7F	; 127
    4a02:	57 e4       	ldi	r21, 0x47	; 71
    4a04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a08:	18 16       	cp	r1, r24
    4a0a:	4c f5       	brge	.+82     	; 0x4a5e <HAL_LCD_u8Clear+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a10:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a12:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a14:	20 e0       	ldi	r18, 0x00	; 0
    4a16:	30 e0       	ldi	r19, 0x00	; 0
    4a18:	40 e2       	ldi	r20, 0x20	; 32
    4a1a:	51 e4       	ldi	r21, 0x41	; 65
    4a1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a20:	dc 01       	movw	r26, r24
    4a22:	cb 01       	movw	r24, r22
    4a24:	bc 01       	movw	r22, r24
    4a26:	cd 01       	movw	r24, r26
    4a28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a2c:	dc 01       	movw	r26, r24
    4a2e:	cb 01       	movw	r24, r22
    4a30:	9e 83       	std	Y+6, r25	; 0x06
    4a32:	8d 83       	std	Y+5, r24	; 0x05
    4a34:	0f c0       	rjmp	.+30     	; 0x4a54 <HAL_LCD_u8Clear+0xc6>
    4a36:	88 ec       	ldi	r24, 0xC8	; 200
    4a38:	90 e0       	ldi	r25, 0x00	; 0
    4a3a:	9c 83       	std	Y+4, r25	; 0x04
    4a3c:	8b 83       	std	Y+3, r24	; 0x03
    4a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    4a40:	9c 81       	ldd	r25, Y+4	; 0x04
    4a42:	01 97       	sbiw	r24, 0x01	; 1
    4a44:	f1 f7       	brne	.-4      	; 0x4a42 <HAL_LCD_u8Clear+0xb4>
    4a46:	9c 83       	std	Y+4, r25	; 0x04
    4a48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a4a:	8d 81       	ldd	r24, Y+5	; 0x05
    4a4c:	9e 81       	ldd	r25, Y+6	; 0x06
    4a4e:	01 97       	sbiw	r24, 0x01	; 1
    4a50:	9e 83       	std	Y+6, r25	; 0x06
    4a52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a54:	8d 81       	ldd	r24, Y+5	; 0x05
    4a56:	9e 81       	ldd	r25, Y+6	; 0x06
    4a58:	00 97       	sbiw	r24, 0x00	; 0
    4a5a:	69 f7       	brne	.-38     	; 0x4a36 <HAL_LCD_u8Clear+0xa8>
    4a5c:	14 c0       	rjmp	.+40     	; 0x4a86 <HAL_LCD_u8Clear+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a5e:	6f 81       	ldd	r22, Y+7	; 0x07
    4a60:	78 85       	ldd	r23, Y+8	; 0x08
    4a62:	89 85       	ldd	r24, Y+9	; 0x09
    4a64:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a6a:	dc 01       	movw	r26, r24
    4a6c:	cb 01       	movw	r24, r22
    4a6e:	9e 83       	std	Y+6, r25	; 0x06
    4a70:	8d 83       	std	Y+5, r24	; 0x05
    4a72:	8d 81       	ldd	r24, Y+5	; 0x05
    4a74:	9e 81       	ldd	r25, Y+6	; 0x06
    4a76:	9a 83       	std	Y+2, r25	; 0x02
    4a78:	89 83       	std	Y+1, r24	; 0x01
    4a7a:	89 81       	ldd	r24, Y+1	; 0x01
    4a7c:	9a 81       	ldd	r25, Y+2	; 0x02
    4a7e:	01 97       	sbiw	r24, 0x01	; 1
    4a80:	f1 f7       	brne	.-4      	; 0x4a7e <HAL_LCD_u8Clear+0xf0>
    4a82:	9a 83       	std	Y+2, r25	; 0x02
    4a84:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	HAL_LCD_u8SendCommands(Display_Clear);
    4a86:	81 e0       	ldi	r24, 0x01	; 1
    4a88:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <HAL_LCD_u8SendCommands>
}
    4a8c:	2e 96       	adiw	r28, 0x0e	; 14
    4a8e:	0f b6       	in	r0, 0x3f	; 63
    4a90:	f8 94       	cli
    4a92:	de bf       	out	0x3e, r29	; 62
    4a94:	0f be       	out	0x3f, r0	; 63
    4a96:	cd bf       	out	0x3d, r28	; 61
    4a98:	cf 91       	pop	r28
    4a9a:	df 91       	pop	r29
    4a9c:	08 95       	ret

00004a9e <HAL_LCD_u8CustomChar>:

void HAL_LCD_u8CustomChar(u8 Loc_u8Location, u8* Loc_u8msg) {
    4a9e:	df 93       	push	r29
    4aa0:	cf 93       	push	r28
    4aa2:	00 d0       	rcall	.+0      	; 0x4aa4 <HAL_LCD_u8CustomChar+0x6>
    4aa4:	00 d0       	rcall	.+0      	; 0x4aa6 <HAL_LCD_u8CustomChar+0x8>
    4aa6:	cd b7       	in	r28, 0x3d	; 61
    4aa8:	de b7       	in	r29, 0x3e	; 62
    4aaa:	8a 83       	std	Y+2, r24	; 0x02
    4aac:	7c 83       	std	Y+4, r23	; 0x04
    4aae:	6b 83       	std	Y+3, r22	; 0x03
	if (Loc_u8Location < 8) {
    4ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    4ab2:	88 30       	cpi	r24, 0x08	; 8
    4ab4:	f8 f4       	brcc	.+62     	; 0x4af4 <HAL_LCD_u8CustomChar+0x56>
		HAL_LCD_u8SendCommands(0x40 + (Loc_u8Location*8));
    4ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    4ab8:	88 2f       	mov	r24, r24
    4aba:	90 e0       	ldi	r25, 0x00	; 0
    4abc:	08 96       	adiw	r24, 0x08	; 8
    4abe:	88 0f       	add	r24, r24
    4ac0:	99 1f       	adc	r25, r25
    4ac2:	88 0f       	add	r24, r24
    4ac4:	99 1f       	adc	r25, r25
    4ac6:	88 0f       	add	r24, r24
    4ac8:	99 1f       	adc	r25, r25
    4aca:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <HAL_LCD_u8SendCommands>
		for( u8 count = 0; count < 8; count++)
    4ace:	19 82       	std	Y+1, r1	; 0x01
    4ad0:	0e c0       	rjmp	.+28     	; 0x4aee <HAL_LCD_u8CustomChar+0x50>
			HAL_LCD_u8SendChar(Loc_u8msg[count]);
    4ad2:	89 81       	ldd	r24, Y+1	; 0x01
    4ad4:	28 2f       	mov	r18, r24
    4ad6:	30 e0       	ldi	r19, 0x00	; 0
    4ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    4ada:	9c 81       	ldd	r25, Y+4	; 0x04
    4adc:	fc 01       	movw	r30, r24
    4ade:	e2 0f       	add	r30, r18
    4ae0:	f3 1f       	adc	r31, r19
    4ae2:	80 81       	ld	r24, Z
    4ae4:	0e 94 f4 20 	call	0x41e8	; 0x41e8 <HAL_LCD_u8SendChar>
}

void HAL_LCD_u8CustomChar(u8 Loc_u8Location, u8* Loc_u8msg) {
	if (Loc_u8Location < 8) {
		HAL_LCD_u8SendCommands(0x40 + (Loc_u8Location*8));
		for( u8 count = 0; count < 8; count++)
    4ae8:	89 81       	ldd	r24, Y+1	; 0x01
    4aea:	8f 5f       	subi	r24, 0xFF	; 255
    4aec:	89 83       	std	Y+1, r24	; 0x01
    4aee:	89 81       	ldd	r24, Y+1	; 0x01
    4af0:	88 30       	cpi	r24, 0x08	; 8
    4af2:	78 f3       	brcs	.-34     	; 0x4ad2 <HAL_LCD_u8CustomChar+0x34>
			HAL_LCD_u8SendChar(Loc_u8msg[count]);
	}
	HAL_LCD_u8SendCommands(0x02);
    4af4:	82 e0       	ldi	r24, 0x02	; 2
    4af6:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <HAL_LCD_u8SendCommands>
}
    4afa:	0f 90       	pop	r0
    4afc:	0f 90       	pop	r0
    4afe:	0f 90       	pop	r0
    4b00:	0f 90       	pop	r0
    4b02:	cf 91       	pop	r28
    4b04:	df 91       	pop	r29
    4b06:	08 95       	ret

00004b08 <HAL_LCD_voidData>:

 void  HAL_LCD_voidData(u8 Data)
{
    4b08:	df 93       	push	r29
    4b0a:	cf 93       	push	r28
    4b0c:	0f 92       	push	r0
    4b0e:	cd b7       	in	r28, 0x3d	; 61
    4b10:	de b7       	in	r29, 0x3e	; 62
    4b12:	89 83       	std	Y+1, r24	; 0x01

  if (GET_BIT(Data,0)==1)
    4b14:	89 81       	ldd	r24, Y+1	; 0x01
    4b16:	88 2f       	mov	r24, r24
    4b18:	90 e0       	ldi	r25, 0x00	; 0
    4b1a:	81 70       	andi	r24, 0x01	; 1
    4b1c:	90 70       	andi	r25, 0x00	; 0
    4b1e:	88 23       	and	r24, r24
    4b20:	31 f0       	breq	.+12     	; 0x4b2e <HAL_LCD_voidData+0x26>
  {
    MCAL_DIO_u8SetPinValue(LCD_D_PORT,LCD_D4_PIN,Pin_High);
    4b22:	80 e0       	ldi	r24, 0x00	; 0
    4b24:	64 e0       	ldi	r22, 0x04	; 4
    4b26:	41 e0       	ldi	r20, 0x01	; 1
    4b28:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
    4b2c:	05 c0       	rjmp	.+10     	; 0x4b38 <HAL_LCD_voidData+0x30>
  }
  else
  {
	  MCAL_DIO_u8SetPinValue(LCD_D_PORT,LCD_D4_PIN,Pin_Low);
    4b2e:	80 e0       	ldi	r24, 0x00	; 0
    4b30:	64 e0       	ldi	r22, 0x04	; 4
    4b32:	40 e0       	ldi	r20, 0x00	; 0
    4b34:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
  }
  if (GET_BIT(Data,1)==1)
    4b38:	89 81       	ldd	r24, Y+1	; 0x01
    4b3a:	86 95       	lsr	r24
    4b3c:	88 2f       	mov	r24, r24
    4b3e:	90 e0       	ldi	r25, 0x00	; 0
    4b40:	81 70       	andi	r24, 0x01	; 1
    4b42:	90 70       	andi	r25, 0x00	; 0
    4b44:	88 23       	and	r24, r24
    4b46:	31 f0       	breq	.+12     	; 0x4b54 <HAL_LCD_voidData+0x4c>
  {
	  MCAL_DIO_u8SetPinValue(LCD_D_PORT,LCD_D5_PIN,Pin_High);
    4b48:	80 e0       	ldi	r24, 0x00	; 0
    4b4a:	65 e0       	ldi	r22, 0x05	; 5
    4b4c:	41 e0       	ldi	r20, 0x01	; 1
    4b4e:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
    4b52:	05 c0       	rjmp	.+10     	; 0x4b5e <HAL_LCD_voidData+0x56>
  }
  else
  {
	  MCAL_DIO_u8SetPinValue(LCD_D_PORT,LCD_D5_PIN,Pin_Low);
    4b54:	80 e0       	ldi	r24, 0x00	; 0
    4b56:	65 e0       	ldi	r22, 0x05	; 5
    4b58:	40 e0       	ldi	r20, 0x00	; 0
    4b5a:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
  }

  if (GET_BIT(Data,2)==1)
    4b5e:	89 81       	ldd	r24, Y+1	; 0x01
    4b60:	86 95       	lsr	r24
    4b62:	86 95       	lsr	r24
    4b64:	88 2f       	mov	r24, r24
    4b66:	90 e0       	ldi	r25, 0x00	; 0
    4b68:	81 70       	andi	r24, 0x01	; 1
    4b6a:	90 70       	andi	r25, 0x00	; 0
    4b6c:	88 23       	and	r24, r24
    4b6e:	31 f0       	breq	.+12     	; 0x4b7c <HAL_LCD_voidData+0x74>
  {
	  MCAL_DIO_u8SetPinValue(LCD_D_PORT,LCD_D6_PIN,Pin_High);
    4b70:	80 e0       	ldi	r24, 0x00	; 0
    4b72:	66 e0       	ldi	r22, 0x06	; 6
    4b74:	41 e0       	ldi	r20, 0x01	; 1
    4b76:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
    4b7a:	05 c0       	rjmp	.+10     	; 0x4b86 <HAL_LCD_voidData+0x7e>
  }
  else
  {
	  MCAL_DIO_u8SetPinValue(LCD_D_PORT,LCD_D6_PIN,Pin_Low);
    4b7c:	80 e0       	ldi	r24, 0x00	; 0
    4b7e:	66 e0       	ldi	r22, 0x06	; 6
    4b80:	40 e0       	ldi	r20, 0x00	; 0
    4b82:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
  }

  if (GET_BIT(Data,3)==1)
    4b86:	89 81       	ldd	r24, Y+1	; 0x01
    4b88:	86 95       	lsr	r24
    4b8a:	86 95       	lsr	r24
    4b8c:	86 95       	lsr	r24
    4b8e:	88 2f       	mov	r24, r24
    4b90:	90 e0       	ldi	r25, 0x00	; 0
    4b92:	81 70       	andi	r24, 0x01	; 1
    4b94:	90 70       	andi	r25, 0x00	; 0
    4b96:	88 23       	and	r24, r24
    4b98:	31 f0       	breq	.+12     	; 0x4ba6 <HAL_LCD_voidData+0x9e>
  {
	  MCAL_DIO_u8SetPinValue(LCD_D_PORT,LCD_D7_PIN,Pin_High);
    4b9a:	80 e0       	ldi	r24, 0x00	; 0
    4b9c:	67 e0       	ldi	r22, 0x07	; 7
    4b9e:	41 e0       	ldi	r20, 0x01	; 1
    4ba0:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
    4ba4:	05 c0       	rjmp	.+10     	; 0x4bb0 <HAL_LCD_voidData+0xa8>
  }
  else
  {
	  MCAL_DIO_u8SetPinValue(LCD_D_PORT,LCD_D7_PIN,Pin_Low);
    4ba6:	80 e0       	ldi	r24, 0x00	; 0
    4ba8:	67 e0       	ldi	r22, 0x07	; 7
    4baa:	40 e0       	ldi	r20, 0x00	; 0
    4bac:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
  }


}
    4bb0:	0f 90       	pop	r0
    4bb2:	cf 91       	pop	r28
    4bb4:	df 91       	pop	r29
    4bb6:	08 95       	ret

00004bb8 <HAL_void_H_BridgeInit>:
 *      Author: Mohamed
 */

#include "H_Bridge.h"

void HAL_void_H_BridgeInit() {
    4bb8:	df 93       	push	r29
    4bba:	cf 93       	push	r28
    4bbc:	cd b7       	in	r28, 0x3d	; 61
    4bbe:	de b7       	in	r29, 0x3e	; 62
//	MCAL_DIO_u8SetPinDirection(PortD, Pin4, Pin_High);
//	MCAL_DIO_u8SetPinDirection(PortD, Pin5, Pin_High);
	MCAL_DIO_u8SetPinDirection(PortC, 3, Pin_High);
    4bc0:	82 e0       	ldi	r24, 0x02	; 2
    4bc2:	63 e0       	ldi	r22, 0x03	; 3
    4bc4:	41 e0       	ldi	r20, 0x01	; 1
    4bc6:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(PortC, 4, Pin_High);
    4bca:	82 e0       	ldi	r24, 0x02	; 2
    4bcc:	64 e0       	ldi	r22, 0x04	; 4
    4bce:	41 e0       	ldi	r20, 0x01	; 1
    4bd0:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(PortC, 5, Pin_High);
    4bd4:	82 e0       	ldi	r24, 0x02	; 2
    4bd6:	65 e0       	ldi	r22, 0x05	; 5
    4bd8:	41 e0       	ldi	r20, 0x01	; 1
    4bda:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(PortC, 6, Pin_High);
    4bde:	82 e0       	ldi	r24, 0x02	; 2
    4be0:	66 e0       	ldi	r22, 0x06	; 6
    4be2:	41 e0       	ldi	r20, 0x01	; 1
    4be4:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <MCAL_DIO_u8SetPinDirection>
}
    4be8:	cf 91       	pop	r28
    4bea:	df 91       	pop	r29
    4bec:	08 95       	ret

00004bee <HAL_void_H_BridgeCW>:

void HAL_void_H_BridgeCW(u8 copy_u8_speed) {
    4bee:	df 93       	push	r29
    4bf0:	cf 93       	push	r28
    4bf2:	0f 92       	push	r0
    4bf4:	cd b7       	in	r28, 0x3d	; 61
    4bf6:	de b7       	in	r29, 0x3e	; 62
    4bf8:	89 83       	std	Y+1, r24	; 0x01
	MCAL_T1_FPWM_10bitRES(CHENNEL_B, copy_u8_speed);
    4bfa:	81 e0       	ldi	r24, 0x01	; 1
    4bfc:	69 81       	ldd	r22, Y+1	; 0x01
    4bfe:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MCAL_T1_FPWM_10bitRES>
	MCAL_T1_FPWM_10bitRES(CHENNEL_A, copy_u8_speed);
    4c02:	80 e0       	ldi	r24, 0x00	; 0
    4c04:	69 81       	ldd	r22, Y+1	; 0x01
    4c06:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MCAL_T1_FPWM_10bitRES>
	MCAL_DIO_u8SetPinValue(PortC, Pin3, Pin_Low);
    4c0a:	82 e0       	ldi	r24, 0x02	; 2
    4c0c:	63 e0       	ldi	r22, 0x03	; 3
    4c0e:	40 e0       	ldi	r20, 0x00	; 0
    4c10:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin4, Pin_Low);
    4c14:	82 e0       	ldi	r24, 0x02	; 2
    4c16:	64 e0       	ldi	r22, 0x04	; 4
    4c18:	40 e0       	ldi	r20, 0x00	; 0
    4c1a:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin5, Pin_Low);
    4c1e:	82 e0       	ldi	r24, 0x02	; 2
    4c20:	65 e0       	ldi	r22, 0x05	; 5
    4c22:	40 e0       	ldi	r20, 0x00	; 0
    4c24:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin6, Pin_High);
    4c28:	82 e0       	ldi	r24, 0x02	; 2
    4c2a:	66 e0       	ldi	r22, 0x06	; 6
    4c2c:	41 e0       	ldi	r20, 0x01	; 1
    4c2e:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
}
    4c32:	0f 90       	pop	r0
    4c34:	cf 91       	pop	r28
    4c36:	df 91       	pop	r29
    4c38:	08 95       	ret

00004c3a <HAL_void_H_BridgeFR>:
void HAL_void_H_BridgeFR() {
    4c3a:	df 93       	push	r29
    4c3c:	cf 93       	push	r28
    4c3e:	cd b7       	in	r28, 0x3d	; 61
    4c40:	de b7       	in	r29, 0x3e	; 62
	MCAL_T1_FPWM_10bitRES(CHENNEL_B, 70);
    4c42:	81 e0       	ldi	r24, 0x01	; 1
    4c44:	66 e4       	ldi	r22, 0x46	; 70
    4c46:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MCAL_T1_FPWM_10bitRES>
	MCAL_T1_FPWM_10bitRES(CHENNEL_A, 99);
    4c4a:	80 e0       	ldi	r24, 0x00	; 0
    4c4c:	63 e6       	ldi	r22, 0x63	; 99
    4c4e:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MCAL_T1_FPWM_10bitRES>
	MCAL_DIO_u8SetPinValue(PortC, Pin3, Pin_High);
    4c52:	82 e0       	ldi	r24, 0x02	; 2
    4c54:	63 e0       	ldi	r22, 0x03	; 3
    4c56:	41 e0       	ldi	r20, 0x01	; 1
    4c58:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin4, Pin_Low);
    4c5c:	82 e0       	ldi	r24, 0x02	; 2
    4c5e:	64 e0       	ldi	r22, 0x04	; 4
    4c60:	40 e0       	ldi	r20, 0x00	; 0
    4c62:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin5, Pin_Low);
    4c66:	82 e0       	ldi	r24, 0x02	; 2
    4c68:	65 e0       	ldi	r22, 0x05	; 5
    4c6a:	40 e0       	ldi	r20, 0x00	; 0
    4c6c:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin6, Pin_High);
    4c70:	82 e0       	ldi	r24, 0x02	; 2
    4c72:	66 e0       	ldi	r22, 0x06	; 6
    4c74:	41 e0       	ldi	r20, 0x01	; 1
    4c76:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
}
    4c7a:	cf 91       	pop	r28
    4c7c:	df 91       	pop	r29
    4c7e:	08 95       	ret

00004c80 <HAL_void_H_BridgeFront>:
void HAL_void_H_BridgeFront(u8 copy_u8_speed) {
    4c80:	df 93       	push	r29
    4c82:	cf 93       	push	r28
    4c84:	0f 92       	push	r0
    4c86:	cd b7       	in	r28, 0x3d	; 61
    4c88:	de b7       	in	r29, 0x3e	; 62
    4c8a:	89 83       	std	Y+1, r24	; 0x01
	MCAL_T1_FPWM_10bitRES(CHENNEL_A, copy_u8_speed);
    4c8c:	80 e0       	ldi	r24, 0x00	; 0
    4c8e:	69 81       	ldd	r22, Y+1	; 0x01
    4c90:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MCAL_T1_FPWM_10bitRES>
	MCAL_T1_FPWM_10bitRES(CHENNEL_B, copy_u8_speed);
    4c94:	81 e0       	ldi	r24, 0x01	; 1
    4c96:	69 81       	ldd	r22, Y+1	; 0x01
    4c98:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MCAL_T1_FPWM_10bitRES>
	MCAL_DIO_u8SetPinValue(PortD, Pin4, Pin_High);
    4c9c:	83 e0       	ldi	r24, 0x03	; 3
    4c9e:	64 e0       	ldi	r22, 0x04	; 4
    4ca0:	41 e0       	ldi	r20, 0x01	; 1
    4ca2:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortD, Pin5, Pin_High);
    4ca6:	83 e0       	ldi	r24, 0x03	; 3
    4ca8:	65 e0       	ldi	r22, 0x05	; 5
    4caa:	41 e0       	ldi	r20, 0x01	; 1
    4cac:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin3, Pin_High);
    4cb0:	82 e0       	ldi	r24, 0x02	; 2
    4cb2:	63 e0       	ldi	r22, 0x03	; 3
    4cb4:	41 e0       	ldi	r20, 0x01	; 1
    4cb6:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin4, Pin_Low);
    4cba:	82 e0       	ldi	r24, 0x02	; 2
    4cbc:	64 e0       	ldi	r22, 0x04	; 4
    4cbe:	40 e0       	ldi	r20, 0x00	; 0
    4cc0:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin5, Pin_Low);
    4cc4:	82 e0       	ldi	r24, 0x02	; 2
    4cc6:	65 e0       	ldi	r22, 0x05	; 5
    4cc8:	40 e0       	ldi	r20, 0x00	; 0
    4cca:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin6, Pin_High);
    4cce:	82 e0       	ldi	r24, 0x02	; 2
    4cd0:	66 e0       	ldi	r22, 0x06	; 6
    4cd2:	41 e0       	ldi	r20, 0x01	; 1
    4cd4:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
}
    4cd8:	0f 90       	pop	r0
    4cda:	cf 91       	pop	r28
    4cdc:	df 91       	pop	r29
    4cde:	08 95       	ret

00004ce0 <HAL_void_H_BridgeBack>:
void HAL_void_H_BridgeBack(u8 copy_u8_speed) {
    4ce0:	df 93       	push	r29
    4ce2:	cf 93       	push	r28
    4ce4:	0f 92       	push	r0
    4ce6:	cd b7       	in	r28, 0x3d	; 61
    4ce8:	de b7       	in	r29, 0x3e	; 62
    4cea:	89 83       	std	Y+1, r24	; 0x01
	MCAL_T1_FPWM_10bitRES(CHENNEL_B, copy_u8_speed);
    4cec:	81 e0       	ldi	r24, 0x01	; 1
    4cee:	69 81       	ldd	r22, Y+1	; 0x01
    4cf0:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MCAL_T1_FPWM_10bitRES>
	MCAL_T1_FPWM_10bitRES(CHENNEL_A, copy_u8_speed);
    4cf4:	80 e0       	ldi	r24, 0x00	; 0
    4cf6:	69 81       	ldd	r22, Y+1	; 0x01
    4cf8:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MCAL_T1_FPWM_10bitRES>
	MCAL_DIO_u8SetPinValue(PortC, Pin3, Pin_Low);
    4cfc:	82 e0       	ldi	r24, 0x02	; 2
    4cfe:	63 e0       	ldi	r22, 0x03	; 3
    4d00:	40 e0       	ldi	r20, 0x00	; 0
    4d02:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin4, Pin_High);
    4d06:	82 e0       	ldi	r24, 0x02	; 2
    4d08:	64 e0       	ldi	r22, 0x04	; 4
    4d0a:	41 e0       	ldi	r20, 0x01	; 1
    4d0c:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin5, Pin_High);
    4d10:	82 e0       	ldi	r24, 0x02	; 2
    4d12:	65 e0       	ldi	r22, 0x05	; 5
    4d14:	41 e0       	ldi	r20, 0x01	; 1
    4d16:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin6, Pin_Low);
    4d1a:	82 e0       	ldi	r24, 0x02	; 2
    4d1c:	66 e0       	ldi	r22, 0x06	; 6
    4d1e:	40 e0       	ldi	r20, 0x00	; 0
    4d20:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
}
    4d24:	0f 90       	pop	r0
    4d26:	cf 91       	pop	r28
    4d28:	df 91       	pop	r29
    4d2a:	08 95       	ret

00004d2c <HAL_void_H_BridgeCCW>:
void HAL_void_H_BridgeCCW(u8 copy_u8_speed) {
    4d2c:	df 93       	push	r29
    4d2e:	cf 93       	push	r28
    4d30:	0f 92       	push	r0
    4d32:	cd b7       	in	r28, 0x3d	; 61
    4d34:	de b7       	in	r29, 0x3e	; 62
    4d36:	89 83       	std	Y+1, r24	; 0x01
	MCAL_T1_FPWM_10bitRES(CHENNEL_B, copy_u8_speed);
    4d38:	81 e0       	ldi	r24, 0x01	; 1
    4d3a:	69 81       	ldd	r22, Y+1	; 0x01
    4d3c:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MCAL_T1_FPWM_10bitRES>
	MCAL_T1_FPWM_10bitRES(CHENNEL_A, copy_u8_speed);
    4d40:	80 e0       	ldi	r24, 0x00	; 0
    4d42:	69 81       	ldd	r22, Y+1	; 0x01
    4d44:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MCAL_T1_FPWM_10bitRES>
	MCAL_DIO_u8SetPinValue(PortC, Pin3, Pin_High);
    4d48:	82 e0       	ldi	r24, 0x02	; 2
    4d4a:	63 e0       	ldi	r22, 0x03	; 3
    4d4c:	41 e0       	ldi	r20, 0x01	; 1
    4d4e:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin4, Pin_Low);
    4d52:	82 e0       	ldi	r24, 0x02	; 2
    4d54:	64 e0       	ldi	r22, 0x04	; 4
    4d56:	40 e0       	ldi	r20, 0x00	; 0
    4d58:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin5, Pin_Low);
    4d5c:	82 e0       	ldi	r24, 0x02	; 2
    4d5e:	65 e0       	ldi	r22, 0x05	; 5
    4d60:	40 e0       	ldi	r20, 0x00	; 0
    4d62:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin6, Pin_Low);
    4d66:	82 e0       	ldi	r24, 0x02	; 2
    4d68:	66 e0       	ldi	r22, 0x06	; 6
    4d6a:	40 e0       	ldi	r20, 0x00	; 0
    4d6c:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
}
    4d70:	0f 90       	pop	r0
    4d72:	cf 91       	pop	r28
    4d74:	df 91       	pop	r29
    4d76:	08 95       	ret

00004d78 <HAL_void_H_BridgeStop>:

void HAL_void_H_BridgeStop(u8 copy_u8_speed) {
    4d78:	df 93       	push	r29
    4d7a:	cf 93       	push	r28
    4d7c:	0f 92       	push	r0
    4d7e:	cd b7       	in	r28, 0x3d	; 61
    4d80:	de b7       	in	r29, 0x3e	; 62
    4d82:	89 83       	std	Y+1, r24	; 0x01
	MCAL_T1_FPWM_10bitRES(CHENNEL_B, copy_u8_speed);
    4d84:	81 e0       	ldi	r24, 0x01	; 1
    4d86:	69 81       	ldd	r22, Y+1	; 0x01
    4d88:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MCAL_T1_FPWM_10bitRES>
	MCAL_T1_FPWM_10bitRES(CHENNEL_A, copy_u8_speed);
    4d8c:	80 e0       	ldi	r24, 0x00	; 0
    4d8e:	69 81       	ldd	r22, Y+1	; 0x01
    4d90:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MCAL_T1_FPWM_10bitRES>
	MCAL_DIO_u8SetPinValue(PortC, Pin3, Pin_Low);
    4d94:	82 e0       	ldi	r24, 0x02	; 2
    4d96:	63 e0       	ldi	r22, 0x03	; 3
    4d98:	40 e0       	ldi	r20, 0x00	; 0
    4d9a:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin4, Pin_Low);
    4d9e:	82 e0       	ldi	r24, 0x02	; 2
    4da0:	64 e0       	ldi	r22, 0x04	; 4
    4da2:	40 e0       	ldi	r20, 0x00	; 0
    4da4:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin5, Pin_Low);
    4da8:	82 e0       	ldi	r24, 0x02	; 2
    4daa:	65 e0       	ldi	r22, 0x05	; 5
    4dac:	40 e0       	ldi	r20, 0x00	; 0
    4dae:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin6, Pin_Low);
    4db2:	82 e0       	ldi	r24, 0x02	; 2
    4db4:	66 e0       	ldi	r22, 0x06	; 6
    4db6:	40 e0       	ldi	r20, 0x00	; 0
    4db8:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
}
    4dbc:	0f 90       	pop	r0
    4dbe:	cf 91       	pop	r28
    4dc0:	df 91       	pop	r29
    4dc2:	08 95       	ret

00004dc4 <HAL_Buzzer_u8BuzzerInit>:
 *      Author: Mohamed
 */

#include "Buzzer.h"

STD_Type HAL_Buzzer_u8BuzzerInit(u8 Loc_u8BuzzerPortID, u8 Loc_u8BuzzerPinID) {
    4dc4:	df 93       	push	r29
    4dc6:	cf 93       	push	r28
    4dc8:	00 d0       	rcall	.+0      	; 0x4dca <HAL_Buzzer_u8BuzzerInit+0x6>
    4dca:	0f 92       	push	r0
    4dcc:	cd b7       	in	r28, 0x3d	; 61
    4dce:	de b7       	in	r29, 0x3e	; 62
    4dd0:	8a 83       	std	Y+2, r24	; 0x02
    4dd2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Return_Value = E_NOT_OK;
    4dd4:	81 e0       	ldi	r24, 0x01	; 1
    4dd6:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8BuzzerPortID <= PortD && Loc_u8BuzzerPinID <= Num_Of_Pins) {
    4dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    4dda:	84 30       	cpi	r24, 0x04	; 4
    4ddc:	48 f4       	brcc	.+18     	; 0x4df0 <HAL_Buzzer_u8BuzzerInit+0x2c>
    4dde:	8b 81       	ldd	r24, Y+3	; 0x03
    4de0:	88 30       	cpi	r24, 0x08	; 8
    4de2:	30 f4       	brcc	.+12     	; 0x4df0 <HAL_Buzzer_u8BuzzerInit+0x2c>
		Loc_u8Return_Value=Loc_u8Return_Value = MCAL_DIO_u8SetPinDirection(Loc_u8BuzzerPortID,
    4de4:	8a 81       	ldd	r24, Y+2	; 0x02
    4de6:	6b 81       	ldd	r22, Y+3	; 0x03
    4de8:	41 e0       	ldi	r20, 0x01	; 1
    4dea:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <MCAL_DIO_u8SetPinDirection>
    4dee:	89 83       	std	Y+1, r24	; 0x01
				Loc_u8BuzzerPinID, Pin_High);
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    4df0:	89 81       	ldd	r24, Y+1	; 0x01
}
    4df2:	0f 90       	pop	r0
    4df4:	0f 90       	pop	r0
    4df6:	0f 90       	pop	r0
    4df8:	cf 91       	pop	r28
    4dfa:	df 91       	pop	r29
    4dfc:	08 95       	ret

00004dfe <HAL_Buzzer_u8BuzzerMode>:

STD_Type HAL_Buzzer_u8BuzzerMode(u8 Loc_u8BuzzerPortID, u8 Loc_u8BuzzerPinID,
		u8 Loc_u8BuzzerMode) {
    4dfe:	df 93       	push	r29
    4e00:	cf 93       	push	r28
    4e02:	00 d0       	rcall	.+0      	; 0x4e04 <HAL_Buzzer_u8BuzzerMode+0x6>
    4e04:	00 d0       	rcall	.+0      	; 0x4e06 <HAL_Buzzer_u8BuzzerMode+0x8>
    4e06:	cd b7       	in	r28, 0x3d	; 61
    4e08:	de b7       	in	r29, 0x3e	; 62
    4e0a:	8a 83       	std	Y+2, r24	; 0x02
    4e0c:	6b 83       	std	Y+3, r22	; 0x03
    4e0e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Return_Value = E_NOT_OK;
    4e10:	81 e0       	ldi	r24, 0x01	; 1
    4e12:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8BuzzerPortID <= PortD && Loc_u8BuzzerPinID <= Num_Of_Pins
    4e14:	8a 81       	ldd	r24, Y+2	; 0x02
    4e16:	84 30       	cpi	r24, 0x04	; 4
    4e18:	10 f5       	brcc	.+68     	; 0x4e5e <HAL_Buzzer_u8BuzzerMode+0x60>
    4e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    4e1c:	88 30       	cpi	r24, 0x08	; 8
    4e1e:	f8 f4       	brcc	.+62     	; 0x4e5e <HAL_Buzzer_u8BuzzerMode+0x60>
    4e20:	8c 81       	ldd	r24, Y+4	; 0x04
    4e22:	83 30       	cpi	r24, 0x03	; 3
    4e24:	e0 f4       	brcc	.+56     	; 0x4e5e <HAL_Buzzer_u8BuzzerMode+0x60>
			&& Loc_u8BuzzerMode <= Buzzer_TOG) {
		if (Loc_u8BuzzerMode == Buzzer_ON) {
    4e26:	8c 81       	ldd	r24, Y+4	; 0x04
    4e28:	81 30       	cpi	r24, 0x01	; 1
    4e2a:	39 f4       	brne	.+14     	; 0x4e3a <HAL_Buzzer_u8BuzzerMode+0x3c>
			Loc_u8Return_Value=MCAL_DIO_u8SetPinValue(Loc_u8BuzzerPortID, Loc_u8BuzzerPinID, Pin_High);
    4e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    4e2e:	6b 81       	ldd	r22, Y+3	; 0x03
    4e30:	41 e0       	ldi	r20, 0x01	; 1
    4e32:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
    4e36:	89 83       	std	Y+1, r24	; 0x01
    4e38:	12 c0       	rjmp	.+36     	; 0x4e5e <HAL_Buzzer_u8BuzzerMode+0x60>
		} else if (Loc_u8BuzzerMode == Buzzer_OFF) {
    4e3a:	8c 81       	ldd	r24, Y+4	; 0x04
    4e3c:	88 23       	and	r24, r24
    4e3e:	39 f4       	brne	.+14     	; 0x4e4e <HAL_Buzzer_u8BuzzerMode+0x50>
			Loc_u8Return_Value=MCAL_DIO_u8SetPinValue(Loc_u8BuzzerPortID, Loc_u8BuzzerPinID, Pin_Low);
    4e40:	8a 81       	ldd	r24, Y+2	; 0x02
    4e42:	6b 81       	ldd	r22, Y+3	; 0x03
    4e44:	40 e0       	ldi	r20, 0x00	; 0
    4e46:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
    4e4a:	89 83       	std	Y+1, r24	; 0x01
    4e4c:	08 c0       	rjmp	.+16     	; 0x4e5e <HAL_Buzzer_u8BuzzerMode+0x60>
		} else if (Loc_u8BuzzerMode == Buzzer_TOG) {
    4e4e:	8c 81       	ldd	r24, Y+4	; 0x04
    4e50:	82 30       	cpi	r24, 0x02	; 2
    4e52:	29 f4       	brne	.+10     	; 0x4e5e <HAL_Buzzer_u8BuzzerMode+0x60>
			Loc_u8Return_Value=MCAL_DIO_u8TogglePinValue(Loc_u8BuzzerPortID,Loc_u8BuzzerPinID);
    4e54:	8a 81       	ldd	r24, Y+2	; 0x02
    4e56:	6b 81       	ldd	r22, Y+3	; 0x03
    4e58:	0e 94 52 19 	call	0x32a4	; 0x32a4 <MCAL_DIO_u8TogglePinValue>
    4e5c:	89 83       	std	Y+1, r24	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    4e5e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4e60:	0f 90       	pop	r0
    4e62:	0f 90       	pop	r0
    4e64:	0f 90       	pop	r0
    4e66:	0f 90       	pop	r0
    4e68:	cf 91       	pop	r28
    4e6a:	df 91       	pop	r29
    4e6c:	08 95       	ret

00004e6e <main>:
// PID variables
float distance_previous_error = 0.0;
float PID_p, PID_i, PID_d, PID_total;
u8 i =0;

int main(void) {
    4e6e:	df 93       	push	r29
    4e70:	cf 93       	push	r28
    4e72:	00 d0       	rcall	.+0      	; 0x4e74 <main+0x6>
    4e74:	00 d0       	rcall	.+0      	; 0x4e76 <main+0x8>
    4e76:	cd b7       	in	r28, 0x3d	; 61
    4e78:	de b7       	in	r29, 0x3e	; 62
    HAL_LCD_u8LCDInit();
    4e7a:	0e 94 88 1c 	call	0x3910	; 0x3910 <HAL_LCD_u8LCDInit>

    HAL_Ultrasonic_Sensor_voidInit();
    4e7e:	0e 94 ca 19 	call	0x3394	; 0x3394 <HAL_Ultrasonic_Sensor_voidInit>
    MCAL_DIO_u8SetPinDirection(PortD,5,Pin_High);
    4e82:	83 e0       	ldi	r24, 0x03	; 3
    4e84:	65 e0       	ldi	r22, 0x05	; 5
    4e86:	41 e0       	ldi	r20, 0x01	; 1
    4e88:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <MCAL_DIO_u8SetPinDirection>
    //MCAL_DIO_u8SetPinDirection(PORTD, Pin5 Pin_High);

    f32 dis = 0.0;
    4e8c:	80 e0       	ldi	r24, 0x00	; 0
    4e8e:	90 e0       	ldi	r25, 0x00	; 0
    4e90:	a0 e0       	ldi	r26, 0x00	; 0
    4e92:	b0 e0       	ldi	r27, 0x00	; 0
    4e94:	89 83       	std	Y+1, r24	; 0x01
    4e96:	9a 83       	std	Y+2, r25	; 0x02
    4e98:	ab 83       	std	Y+3, r26	; 0x03
    4e9a:	bc 83       	std	Y+4, r27	; 0x04

    Timer1_Init();
    4e9c:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <Timer1_Init>
HAL_LCD_u8Clear();
    4ea0:	0e 94 c7 24 	call	0x498e	; 0x498e <HAL_LCD_u8Clear>
//
//        _delay_ms(50);
//
//        Set_Servo_Angle(90);
//        _delay_ms(100);
        Set_Servo_Angle(90);
    4ea4:	8a e5       	ldi	r24, 0x5A	; 90
    4ea6:	0e 94 0f 1c 	call	0x381e	; 0x381e <Set_Servo_Angle>
    4eaa:	fc cf       	rjmp	.-8      	; 0x4ea4 <main+0x36>

00004eac <__udivmodsi4>:
    4eac:	a1 e2       	ldi	r26, 0x21	; 33
    4eae:	1a 2e       	mov	r1, r26
    4eb0:	aa 1b       	sub	r26, r26
    4eb2:	bb 1b       	sub	r27, r27
    4eb4:	fd 01       	movw	r30, r26
    4eb6:	0d c0       	rjmp	.+26     	; 0x4ed2 <__udivmodsi4_ep>

00004eb8 <__udivmodsi4_loop>:
    4eb8:	aa 1f       	adc	r26, r26
    4eba:	bb 1f       	adc	r27, r27
    4ebc:	ee 1f       	adc	r30, r30
    4ebe:	ff 1f       	adc	r31, r31
    4ec0:	a2 17       	cp	r26, r18
    4ec2:	b3 07       	cpc	r27, r19
    4ec4:	e4 07       	cpc	r30, r20
    4ec6:	f5 07       	cpc	r31, r21
    4ec8:	20 f0       	brcs	.+8      	; 0x4ed2 <__udivmodsi4_ep>
    4eca:	a2 1b       	sub	r26, r18
    4ecc:	b3 0b       	sbc	r27, r19
    4ece:	e4 0b       	sbc	r30, r20
    4ed0:	f5 0b       	sbc	r31, r21

00004ed2 <__udivmodsi4_ep>:
    4ed2:	66 1f       	adc	r22, r22
    4ed4:	77 1f       	adc	r23, r23
    4ed6:	88 1f       	adc	r24, r24
    4ed8:	99 1f       	adc	r25, r25
    4eda:	1a 94       	dec	r1
    4edc:	69 f7       	brne	.-38     	; 0x4eb8 <__udivmodsi4_loop>
    4ede:	60 95       	com	r22
    4ee0:	70 95       	com	r23
    4ee2:	80 95       	com	r24
    4ee4:	90 95       	com	r25
    4ee6:	9b 01       	movw	r18, r22
    4ee8:	ac 01       	movw	r20, r24
    4eea:	bd 01       	movw	r22, r26
    4eec:	cf 01       	movw	r24, r30
    4eee:	08 95       	ret

00004ef0 <__prologue_saves__>:
    4ef0:	2f 92       	push	r2
    4ef2:	3f 92       	push	r3
    4ef4:	4f 92       	push	r4
    4ef6:	5f 92       	push	r5
    4ef8:	6f 92       	push	r6
    4efa:	7f 92       	push	r7
    4efc:	8f 92       	push	r8
    4efe:	9f 92       	push	r9
    4f00:	af 92       	push	r10
    4f02:	bf 92       	push	r11
    4f04:	cf 92       	push	r12
    4f06:	df 92       	push	r13
    4f08:	ef 92       	push	r14
    4f0a:	ff 92       	push	r15
    4f0c:	0f 93       	push	r16
    4f0e:	1f 93       	push	r17
    4f10:	cf 93       	push	r28
    4f12:	df 93       	push	r29
    4f14:	cd b7       	in	r28, 0x3d	; 61
    4f16:	de b7       	in	r29, 0x3e	; 62
    4f18:	ca 1b       	sub	r28, r26
    4f1a:	db 0b       	sbc	r29, r27
    4f1c:	0f b6       	in	r0, 0x3f	; 63
    4f1e:	f8 94       	cli
    4f20:	de bf       	out	0x3e, r29	; 62
    4f22:	0f be       	out	0x3f, r0	; 63
    4f24:	cd bf       	out	0x3d, r28	; 61
    4f26:	09 94       	ijmp

00004f28 <__epilogue_restores__>:
    4f28:	2a 88       	ldd	r2, Y+18	; 0x12
    4f2a:	39 88       	ldd	r3, Y+17	; 0x11
    4f2c:	48 88       	ldd	r4, Y+16	; 0x10
    4f2e:	5f 84       	ldd	r5, Y+15	; 0x0f
    4f30:	6e 84       	ldd	r6, Y+14	; 0x0e
    4f32:	7d 84       	ldd	r7, Y+13	; 0x0d
    4f34:	8c 84       	ldd	r8, Y+12	; 0x0c
    4f36:	9b 84       	ldd	r9, Y+11	; 0x0b
    4f38:	aa 84       	ldd	r10, Y+10	; 0x0a
    4f3a:	b9 84       	ldd	r11, Y+9	; 0x09
    4f3c:	c8 84       	ldd	r12, Y+8	; 0x08
    4f3e:	df 80       	ldd	r13, Y+7	; 0x07
    4f40:	ee 80       	ldd	r14, Y+6	; 0x06
    4f42:	fd 80       	ldd	r15, Y+5	; 0x05
    4f44:	0c 81       	ldd	r16, Y+4	; 0x04
    4f46:	1b 81       	ldd	r17, Y+3	; 0x03
    4f48:	aa 81       	ldd	r26, Y+2	; 0x02
    4f4a:	b9 81       	ldd	r27, Y+1	; 0x01
    4f4c:	ce 0f       	add	r28, r30
    4f4e:	d1 1d       	adc	r29, r1
    4f50:	0f b6       	in	r0, 0x3f	; 63
    4f52:	f8 94       	cli
    4f54:	de bf       	out	0x3e, r29	; 62
    4f56:	0f be       	out	0x3f, r0	; 63
    4f58:	cd bf       	out	0x3d, r28	; 61
    4f5a:	ed 01       	movw	r28, r26
    4f5c:	08 95       	ret

00004f5e <itoa>:
    4f5e:	fb 01       	movw	r30, r22
    4f60:	9f 01       	movw	r18, r30
    4f62:	e8 94       	clt
    4f64:	42 30       	cpi	r20, 0x02	; 2
    4f66:	c4 f0       	brlt	.+48     	; 0x4f98 <itoa+0x3a>
    4f68:	45 32       	cpi	r20, 0x25	; 37
    4f6a:	b4 f4       	brge	.+44     	; 0x4f98 <itoa+0x3a>
    4f6c:	4a 30       	cpi	r20, 0x0A	; 10
    4f6e:	29 f4       	brne	.+10     	; 0x4f7a <itoa+0x1c>
    4f70:	97 fb       	bst	r25, 7
    4f72:	1e f4       	brtc	.+6      	; 0x4f7a <itoa+0x1c>
    4f74:	90 95       	com	r25
    4f76:	81 95       	neg	r24
    4f78:	9f 4f       	sbci	r25, 0xFF	; 255
    4f7a:	64 2f       	mov	r22, r20
    4f7c:	77 27       	eor	r23, r23
    4f7e:	0e 94 e0 27 	call	0x4fc0	; 0x4fc0 <__udivmodhi4>
    4f82:	80 5d       	subi	r24, 0xD0	; 208
    4f84:	8a 33       	cpi	r24, 0x3A	; 58
    4f86:	0c f0       	brlt	.+2      	; 0x4f8a <itoa+0x2c>
    4f88:	89 5d       	subi	r24, 0xD9	; 217
    4f8a:	81 93       	st	Z+, r24
    4f8c:	cb 01       	movw	r24, r22
    4f8e:	00 97       	sbiw	r24, 0x00	; 0
    4f90:	a1 f7       	brne	.-24     	; 0x4f7a <itoa+0x1c>
    4f92:	16 f4       	brtc	.+4      	; 0x4f98 <itoa+0x3a>
    4f94:	5d e2       	ldi	r21, 0x2D	; 45
    4f96:	51 93       	st	Z+, r21
    4f98:	10 82       	st	Z, r1
    4f9a:	c9 01       	movw	r24, r18
    4f9c:	0c 94 d0 27 	jmp	0x4fa0	; 0x4fa0 <strrev>

00004fa0 <strrev>:
    4fa0:	dc 01       	movw	r26, r24
    4fa2:	fc 01       	movw	r30, r24
    4fa4:	67 2f       	mov	r22, r23
    4fa6:	71 91       	ld	r23, Z+
    4fa8:	77 23       	and	r23, r23
    4faa:	e1 f7       	brne	.-8      	; 0x4fa4 <strrev+0x4>
    4fac:	32 97       	sbiw	r30, 0x02	; 2
    4fae:	04 c0       	rjmp	.+8      	; 0x4fb8 <strrev+0x18>
    4fb0:	7c 91       	ld	r23, X
    4fb2:	6d 93       	st	X+, r22
    4fb4:	70 83       	st	Z, r23
    4fb6:	62 91       	ld	r22, -Z
    4fb8:	ae 17       	cp	r26, r30
    4fba:	bf 07       	cpc	r27, r31
    4fbc:	c8 f3       	brcs	.-14     	; 0x4fb0 <strrev+0x10>
    4fbe:	08 95       	ret

00004fc0 <__udivmodhi4>:
    4fc0:	aa 1b       	sub	r26, r26
    4fc2:	bb 1b       	sub	r27, r27
    4fc4:	51 e1       	ldi	r21, 0x11	; 17
    4fc6:	07 c0       	rjmp	.+14     	; 0x4fd6 <__udivmodhi4_ep>

00004fc8 <__udivmodhi4_loop>:
    4fc8:	aa 1f       	adc	r26, r26
    4fca:	bb 1f       	adc	r27, r27
    4fcc:	a6 17       	cp	r26, r22
    4fce:	b7 07       	cpc	r27, r23
    4fd0:	10 f0       	brcs	.+4      	; 0x4fd6 <__udivmodhi4_ep>
    4fd2:	a6 1b       	sub	r26, r22
    4fd4:	b7 0b       	sbc	r27, r23

00004fd6 <__udivmodhi4_ep>:
    4fd6:	88 1f       	adc	r24, r24
    4fd8:	99 1f       	adc	r25, r25
    4fda:	5a 95       	dec	r21
    4fdc:	a9 f7       	brne	.-22     	; 0x4fc8 <__udivmodhi4_loop>
    4fde:	80 95       	com	r24
    4fe0:	90 95       	com	r25
    4fe2:	bc 01       	movw	r22, r24
    4fe4:	cd 01       	movw	r24, r26
    4fe6:	08 95       	ret

00004fe8 <_exit>:
    4fe8:	f8 94       	cli

00004fea <__stop_program>:
    4fea:	ff cf       	rjmp	.-2      	; 0x4fea <__stop_program>
