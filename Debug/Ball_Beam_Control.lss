
Ball_Beam_Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002910  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010a  00800060  00002910  000029a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  0080016a  0080016a  00002aae  2**0
                  ALLOC
  3 .stab         00002544  00000000  00000000  00002ab0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001397  00000000  00000000  00004ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000638b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  0000650b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  000066dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  000086ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  0000984d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000a850  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  0000a9f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  0000acae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b5bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 2c 11 	jmp	0x2258	; 0x2258 <__vector_1>
       8:	0c 94 59 11 	jmp	0x22b2	; 0x22b2 <__vector_2>
       c:	0c 94 86 11 	jmp	0x230c	; 0x230c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 f0 12 	jmp	0x25e0	; 0x25e0 <__vector_10>
      2c:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 cd 07 	jmp	0xf9a	; 0xf9a <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e1       	ldi	r30, 0x10	; 16
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 37       	cpi	r26, 0x78	; 120
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 79 13 	call	0x26f2	; 0x26f2 <main>
      8a:	0c 94 86 14 	jmp	0x290c	; 0x290c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4f 14 	jmp	0x289e	; 0x289e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6b 14 	jmp	0x28d6	; 0x28d6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5b 14 	jmp	0x28b6	; 0x28b6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 77 14 	jmp	0x28ee	; 0x28ee <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5b 14 	jmp	0x28b6	; 0x28b6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 77 14 	jmp	0x28ee	; 0x28ee <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4f 14 	jmp	0x289e	; 0x289e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6b 14 	jmp	0x28d6	; 0x28d6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5b 14 	jmp	0x28b6	; 0x28b6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 77 14 	jmp	0x28ee	; 0x28ee <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 5b 14 	jmp	0x28b6	; 0x28b6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 77 14 	jmp	0x28ee	; 0x28ee <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 5b 14 	jmp	0x28b6	; 0x28b6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 77 14 	jmp	0x28ee	; 0x28ee <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 58 14 	jmp	0x28b0	; 0x28b0 <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 74 14 	jmp	0x28e8	; 0x28e8 <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 5f 14 	jmp	0x28be	; 0x28be <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 7b 14 	jmp	0x28f6	; 0x28f6 <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	e8 59       	subi	r30, 0x98	; 152
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <Mapping>:
static u16 *Global_u16Ptr =NULL;
static void (*Global_voidPtrFunc)(void) =NULL;
static u8 ADC_State=IDLE;


u32 Mapping (u32 Range1_max,u32 Range1_min,u32 Range2_max,u32 Range2_min,u32 Range1_reading){
     ca0:	af 92       	push	r10
     ca2:	bf 92       	push	r11
     ca4:	cf 92       	push	r12
     ca6:	df 92       	push	r13
     ca8:	ef 92       	push	r14
     caa:	ff 92       	push	r15
     cac:	0f 93       	push	r16
     cae:	1f 93       	push	r17
     cb0:	df 93       	push	r29
     cb2:	cf 93       	push	r28
     cb4:	cd b7       	in	r28, 0x3d	; 61
     cb6:	de b7       	in	r29, 0x3e	; 62
     cb8:	60 97       	sbiw	r28, 0x10	; 16
     cba:	0f b6       	in	r0, 0x3f	; 63
     cbc:	f8 94       	cli
     cbe:	de bf       	out	0x3e, r29	; 62
     cc0:	0f be       	out	0x3f, r0	; 63
     cc2:	cd bf       	out	0x3d, r28	; 61
     cc4:	69 83       	std	Y+1, r22	; 0x01
     cc6:	7a 83       	std	Y+2, r23	; 0x02
     cc8:	8b 83       	std	Y+3, r24	; 0x03
     cca:	9c 83       	std	Y+4, r25	; 0x04
     ccc:	2d 83       	std	Y+5, r18	; 0x05
     cce:	3e 83       	std	Y+6, r19	; 0x06
     cd0:	4f 83       	std	Y+7, r20	; 0x07
     cd2:	58 87       	std	Y+8, r21	; 0x08
     cd4:	e9 86       	std	Y+9, r14	; 0x09
     cd6:	fa 86       	std	Y+10, r15	; 0x0a
     cd8:	0b 87       	std	Y+11, r16	; 0x0b
     cda:	1c 87       	std	Y+12, r17	; 0x0c
     cdc:	ad 86       	std	Y+13, r10	; 0x0d
     cde:	be 86       	std	Y+14, r11	; 0x0e
     ce0:	cf 86       	std	Y+15, r12	; 0x0f
     ce2:	d8 8a       	std	Y+16, r13	; 0x10

	return (Range2_max-((Range2_max-Range2_min)*(Range1_max-Range1_reading)/(Range1_max-Range1_min)));
     ce4:	29 85       	ldd	r18, Y+9	; 0x09
     ce6:	3a 85       	ldd	r19, Y+10	; 0x0a
     ce8:	4b 85       	ldd	r20, Y+11	; 0x0b
     cea:	5c 85       	ldd	r21, Y+12	; 0x0c
     cec:	8d 85       	ldd	r24, Y+13	; 0x0d
     cee:	9e 85       	ldd	r25, Y+14	; 0x0e
     cf0:	af 85       	ldd	r26, Y+15	; 0x0f
     cf2:	b8 89       	ldd	r27, Y+16	; 0x10
     cf4:	79 01       	movw	r14, r18
     cf6:	8a 01       	movw	r16, r20
     cf8:	e8 1a       	sub	r14, r24
     cfa:	f9 0a       	sbc	r15, r25
     cfc:	0a 0b       	sbc	r16, r26
     cfe:	1b 0b       	sbc	r17, r27
     d00:	29 81       	ldd	r18, Y+1	; 0x01
     d02:	3a 81       	ldd	r19, Y+2	; 0x02
     d04:	4b 81       	ldd	r20, Y+3	; 0x03
     d06:	5c 81       	ldd	r21, Y+4	; 0x04
     d08:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d0a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d0c:	af 8d       	ldd	r26, Y+31	; 0x1f
     d0e:	b8 a1       	ldd	r27, Y+32	; 0x20
     d10:	28 1b       	sub	r18, r24
     d12:	39 0b       	sbc	r19, r25
     d14:	4a 0b       	sbc	r20, r26
     d16:	5b 0b       	sbc	r21, r27
     d18:	c8 01       	movw	r24, r16
     d1a:	b7 01       	movw	r22, r14
     d1c:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsi3>
     d20:	7b 01       	movw	r14, r22
     d22:	8c 01       	movw	r16, r24
     d24:	29 81       	ldd	r18, Y+1	; 0x01
     d26:	3a 81       	ldd	r19, Y+2	; 0x02
     d28:	4b 81       	ldd	r20, Y+3	; 0x03
     d2a:	5c 81       	ldd	r21, Y+4	; 0x04
     d2c:	8d 81       	ldd	r24, Y+5	; 0x05
     d2e:	9e 81       	ldd	r25, Y+6	; 0x06
     d30:	af 81       	ldd	r26, Y+7	; 0x07
     d32:	b8 85       	ldd	r27, Y+8	; 0x08
     d34:	28 1b       	sub	r18, r24
     d36:	39 0b       	sbc	r19, r25
     d38:	4a 0b       	sbc	r20, r26
     d3a:	5b 0b       	sbc	r21, r27
     d3c:	c8 01       	movw	r24, r16
     d3e:	b7 01       	movw	r22, r14
     d40:	0e 94 2d 14 	call	0x285a	; 0x285a <__udivmodsi4>
     d44:	da 01       	movw	r26, r20
     d46:	c9 01       	movw	r24, r18
     d48:	9c 01       	movw	r18, r24
     d4a:	ad 01       	movw	r20, r26
     d4c:	89 85       	ldd	r24, Y+9	; 0x09
     d4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d50:	ab 85       	ldd	r26, Y+11	; 0x0b
     d52:	bc 85       	ldd	r27, Y+12	; 0x0c
     d54:	82 1b       	sub	r24, r18
     d56:	93 0b       	sbc	r25, r19
     d58:	a4 0b       	sbc	r26, r20
     d5a:	b5 0b       	sbc	r27, r21
}
     d5c:	bc 01       	movw	r22, r24
     d5e:	cd 01       	movw	r24, r26
     d60:	60 96       	adiw	r28, 0x10	; 16
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	de bf       	out	0x3e, r29	; 62
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	cd bf       	out	0x3d, r28	; 61
     d6c:	cf 91       	pop	r28
     d6e:	df 91       	pop	r29
     d70:	1f 91       	pop	r17
     d72:	0f 91       	pop	r16
     d74:	ff 90       	pop	r15
     d76:	ef 90       	pop	r14
     d78:	df 90       	pop	r13
     d7a:	cf 90       	pop	r12
     d7c:	bf 90       	pop	r11
     d7e:	af 90       	pop	r10
     d80:	08 95       	ret

00000d82 <ADC_voidInit>:


void ADC_voidInit(void)
{
     d82:	df 93       	push	r29
     d84:	cf 93       	push	r28
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62

	//int or polling
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
     d8a:	a6 e2       	ldi	r26, 0x26	; 38
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e6 e2       	ldi	r30, 0x26	; 38
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	87 7f       	andi	r24, 0xF7	; 247
     d96:	8c 93       	st	X, r24
	//ref volt =AVCC
	SET_BIT(ADMUX,ADMUX_REFS0);
     d98:	a7 e2       	ldi	r26, 0x27	; 39
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	e7 e2       	ldi	r30, 0x27	; 39
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	80 64       	ori	r24, 0x40	; 64
     da4:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_REFS1);
     da6:	a7 e2       	ldi	r26, 0x27	; 39
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	e7 e2       	ldi	r30, 0x27	; 39
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	8f 77       	andi	r24, 0x7F	; 127
     db2:	8c 93       	st	X, r24
	//10 bits or 8 bits
	CLR_BIT(ADMUX,ADMUX_ADLAR);
     db4:	a7 e2       	ldi	r26, 0x27	; 39
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	e7 e2       	ldi	r30, 0x27	; 39
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	8f 7d       	andi	r24, 0xDF	; 223
     dc0:	8c 93       	st	X, r24
	//prescaler
	SET_BIT(ADCSRA,ADCSRA_ADPS0);
     dc2:	a6 e2       	ldi	r26, 0x26	; 38
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e6 e2       	ldi	r30, 0x26	; 38
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	81 60       	ori	r24, 0x01	; 1
     dce:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,ADCSRA_ADPS1);
     dd0:	a6 e2       	ldi	r26, 0x26	; 38
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	e6 e2       	ldi	r30, 0x26	; 38
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	82 60       	ori	r24, 0x02	; 2
     ddc:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,ADCSRA_ADPS2);
     dde:	a6 e2       	ldi	r26, 0x26	; 38
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e6 e2       	ldi	r30, 0x26	; 38
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	84 60       	ori	r24, 0x04	; 4
     dea:	8c 93       	st	X, r24
	//Enable
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     dec:	a6 e2       	ldi	r26, 0x26	; 38
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	e6 e2       	ldi	r30, 0x26	; 38
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	80 68       	ori	r24, 0x80	; 128
     df8:	8c 93       	st	X, r24

}
     dfa:	cf 91       	pop	r28
     dfc:	df 91       	pop	r29
     dfe:	08 95       	ret

00000e00 <ADC_u16GetChannelReadingSunch>:
Std_err_e ADC_u16GetChannelReadingSunch(u8 Copy_u8ChannelNum , u16 *Copy_u16Reading)
{
     e00:	df 93       	push	r29
     e02:	cf 93       	push	r28
     e04:	cd b7       	in	r28, 0x3d	; 61
     e06:	de b7       	in	r29, 0x3e	; 62
     e08:	28 97       	sbiw	r28, 0x08	; 8
     e0a:	0f b6       	in	r0, 0x3f	; 63
     e0c:	f8 94       	cli
     e0e:	de bf       	out	0x3e, r29	; 62
     e10:	0f be       	out	0x3f, r0	; 63
     e12:	cd bf       	out	0x3d, r28	; 61
     e14:	8e 83       	std	Y+6, r24	; 0x06
     e16:	78 87       	std	Y+8, r23	; 0x08
     e18:	6f 83       	std	Y+7, r22	; 0x07
	Std_err_e Local_e_ErrStatus = OK;
     e1a:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Counter=0;
     e1c:	19 82       	std	Y+1, r1	; 0x01
     e1e:	1a 82       	std	Y+2, r1	; 0x02
     e20:	1b 82       	std	Y+3, r1	; 0x03
     e22:	1c 82       	std	Y+4, r1	; 0x04
	//Set Channel
	if(NULL != Copy_u16Reading){
     e24:	8f 81       	ldd	r24, Y+7	; 0x07
     e26:	98 85       	ldd	r25, Y+8	; 0x08
     e28:	00 97       	sbiw	r24, 0x00	; 0
     e2a:	09 f4       	brne	.+2      	; 0xe2e <ADC_u16GetChannelReadingSunch+0x2e>
     e2c:	58 c0       	rjmp	.+176    	; 0xede <ADC_u16GetChannelReadingSunch+0xde>
		ADMUX&=0b11100000;
     e2e:	a7 e2       	ldi	r26, 0x27	; 39
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e7 e2       	ldi	r30, 0x27	; 39
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	80 7e       	andi	r24, 0xE0	; 224
     e3a:	8c 93       	st	X, r24
		ADMUX|=Copy_u8ChannelNum;
     e3c:	a7 e2       	ldi	r26, 0x27	; 39
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e7 e2       	ldi	r30, 0x27	; 39
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	90 81       	ld	r25, Z
     e46:	8e 81       	ldd	r24, Y+6	; 0x06
     e48:	89 2b       	or	r24, r25
     e4a:	8c 93       	st	X, r24
		//Start Conversion
		SET_BIT(ADCSRA,ADCSRA_ADSC);
     e4c:	a6 e2       	ldi	r26, 0x26	; 38
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	e6 e2       	ldi	r30, 0x26	; 38
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	80 64       	ori	r24, 0x40	; 64
     e58:	8c 93       	st	X, r24
     e5a:	0b c0       	rjmp	.+22     	; 0xe72 <ADC_u16GetChannelReadingSunch+0x72>
		//POLLING
		while((GET_BIT(ADCSRA,ADCSRA_ADIF)==0) && (Local_u32Counter < 50000)){
			Local_u32Counter++;
     e5c:	89 81       	ldd	r24, Y+1	; 0x01
     e5e:	9a 81       	ldd	r25, Y+2	; 0x02
     e60:	ab 81       	ldd	r26, Y+3	; 0x03
     e62:	bc 81       	ldd	r27, Y+4	; 0x04
     e64:	01 96       	adiw	r24, 0x01	; 1
     e66:	a1 1d       	adc	r26, r1
     e68:	b1 1d       	adc	r27, r1
     e6a:	89 83       	std	Y+1, r24	; 0x01
     e6c:	9a 83       	std	Y+2, r25	; 0x02
     e6e:	ab 83       	std	Y+3, r26	; 0x03
     e70:	bc 83       	std	Y+4, r27	; 0x04
		ADMUX&=0b11100000;
		ADMUX|=Copy_u8ChannelNum;
		//Start Conversion
		SET_BIT(ADCSRA,ADCSRA_ADSC);
		//POLLING
		while((GET_BIT(ADCSRA,ADCSRA_ADIF)==0) && (Local_u32Counter < 50000)){
     e72:	e6 e2       	ldi	r30, 0x26	; 38
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	82 95       	swap	r24
     e7a:	8f 70       	andi	r24, 0x0F	; 15
     e7c:	88 2f       	mov	r24, r24
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	81 70       	andi	r24, 0x01	; 1
     e82:	90 70       	andi	r25, 0x00	; 0
     e84:	00 97       	sbiw	r24, 0x00	; 0
     e86:	61 f4       	brne	.+24     	; 0xea0 <ADC_u16GetChannelReadingSunch+0xa0>
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	9a 81       	ldd	r25, Y+2	; 0x02
     e8c:	ab 81       	ldd	r26, Y+3	; 0x03
     e8e:	bc 81       	ldd	r27, Y+4	; 0x04
     e90:	80 35       	cpi	r24, 0x50	; 80
     e92:	23 ec       	ldi	r18, 0xC3	; 195
     e94:	92 07       	cpc	r25, r18
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	a2 07       	cpc	r26, r18
     e9a:	20 e0       	ldi	r18, 0x00	; 0
     e9c:	b2 07       	cpc	r27, r18
     e9e:	f0 f2       	brcs	.-68     	; 0xe5c <ADC_u16GetChannelReadingSunch+0x5c>
			Local_u32Counter++;
		}
		if(Local_u32Counter == 50000)
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	9a 81       	ldd	r25, Y+2	; 0x02
     ea4:	ab 81       	ldd	r26, Y+3	; 0x03
     ea6:	bc 81       	ldd	r27, Y+4	; 0x04
     ea8:	80 35       	cpi	r24, 0x50	; 80
     eaa:	23 ec       	ldi	r18, 0xC3	; 195
     eac:	92 07       	cpc	r25, r18
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	a2 07       	cpc	r26, r18
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	b2 07       	cpc	r27, r18
     eb6:	19 f4       	brne	.+6      	; 0xebe <ADC_u16GetChannelReadingSunch+0xbe>
		{
			Local_e_ErrStatus = 1;
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	8d 83       	std	Y+5, r24	; 0x05
     ebc:	12 c0       	rjmp	.+36     	; 0xee2 <ADC_u16GetChannelReadingSunch+0xe2>
		}
		else
		{
			SET_BIT(ADCSRA,ADCSRA_ADIF);
     ebe:	a6 e2       	ldi	r26, 0x26	; 38
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	e6 e2       	ldi	r30, 0x26	; 38
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	80 61       	ori	r24, 0x10	; 16
     eca:	8c 93       	st	X, r24
            *Copy_u16Reading = ADC;
     ecc:	e4 e2       	ldi	r30, 0x24	; 36
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	91 81       	ldd	r25, Z+1	; 0x01
     ed4:	ef 81       	ldd	r30, Y+7	; 0x07
     ed6:	f8 85       	ldd	r31, Y+8	; 0x08
     ed8:	91 83       	std	Z+1, r25	; 0x01
     eda:	80 83       	st	Z, r24
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <ADC_u16GetChannelReadingSunch+0xe2>
		}
	}
	else{
		Local_e_ErrStatus =NOK;
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	8d 83       	std	Y+5, r24	; 0x05
	}

	return Local_e_ErrStatus;
     ee2:	8d 81       	ldd	r24, Y+5	; 0x05

}
     ee4:	28 96       	adiw	r28, 0x08	; 8
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	f8 94       	cli
     eea:	de bf       	out	0x3e, r29	; 62
     eec:	0f be       	out	0x3f, r0	; 63
     eee:	cd bf       	out	0x3d, r28	; 61
     ef0:	cf 91       	pop	r28
     ef2:	df 91       	pop	r29
     ef4:	08 95       	ret

00000ef6 <ADC_u16GetChannelReadingASunch>:
Std_err_e ADC_u16GetChannelReadingASunch(u8 Copy_u8ChannelNum , u16 *Copy_u16Reading ,void(*PtrFuncNot)(void))
{
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	00 d0       	rcall	.+0      	; 0xefc <ADC_u16GetChannelReadingASunch+0x6>
     efc:	00 d0       	rcall	.+0      	; 0xefe <ADC_u16GetChannelReadingASunch+0x8>
     efe:	00 d0       	rcall	.+0      	; 0xf00 <ADC_u16GetChannelReadingASunch+0xa>
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
     f04:	8a 83       	std	Y+2, r24	; 0x02
     f06:	7c 83       	std	Y+4, r23	; 0x04
     f08:	6b 83       	std	Y+3, r22	; 0x03
     f0a:	5e 83       	std	Y+6, r21	; 0x06
     f0c:	4d 83       	std	Y+5, r20	; 0x05
	Std_err_e Local_e_ErrStatus = OK;
     f0e:	19 82       	std	Y+1, r1	; 0x01
	if(ADC_State==IDLE){
     f10:	80 91 68 01 	lds	r24, 0x0168
     f14:	81 30       	cpi	r24, 0x01	; 1
     f16:	b9 f5       	brne	.+110    	; 0xf86 <ADC_u16GetChannelReadingASunch+0x90>
		if((NULL != Copy_u16Reading) && (NULL != PtrFuncNot))
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	9c 81       	ldd	r25, Y+4	; 0x04
     f1c:	00 97       	sbiw	r24, 0x00	; 0
     f1e:	89 f1       	breq	.+98     	; 0xf82 <ADC_u16GetChannelReadingASunch+0x8c>
     f20:	8d 81       	ldd	r24, Y+5	; 0x05
     f22:	9e 81       	ldd	r25, Y+6	; 0x06
     f24:	00 97       	sbiw	r24, 0x00	; 0
     f26:	69 f1       	breq	.+90     	; 0xf82 <ADC_u16GetChannelReadingASunch+0x8c>
		{
			ADC_State = BUSY;
     f28:	82 e0       	ldi	r24, 0x02	; 2
     f2a:	80 93 68 01 	sts	0x0168, r24
			Global_u16Ptr = Copy_u16Reading;
     f2e:	8b 81       	ldd	r24, Y+3	; 0x03
     f30:	9c 81       	ldd	r25, Y+4	; 0x04
     f32:	90 93 6b 01 	sts	0x016B, r25
     f36:	80 93 6a 01 	sts	0x016A, r24
			Global_voidPtrFunc = PtrFuncNot;
     f3a:	8d 81       	ldd	r24, Y+5	; 0x05
     f3c:	9e 81       	ldd	r25, Y+6	; 0x06
     f3e:	90 93 6d 01 	sts	0x016D, r25
     f42:	80 93 6c 01 	sts	0x016C, r24
			ADMUX&=0b11100000;
     f46:	a7 e2       	ldi	r26, 0x27	; 39
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e7 e2       	ldi	r30, 0x27	; 39
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	80 7e       	andi	r24, 0xE0	; 224
     f52:	8c 93       	st	X, r24
			ADMUX|=Copy_u8ChannelNum;
     f54:	a7 e2       	ldi	r26, 0x27	; 39
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e7 e2       	ldi	r30, 0x27	; 39
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	90 81       	ld	r25, Z
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	89 2b       	or	r24, r25
     f62:	8c 93       	st	X, r24
			//Start Conversion
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     f64:	a6 e2       	ldi	r26, 0x26	; 38
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e6 e2       	ldi	r30, 0x26	; 38
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	80 64       	ori	r24, 0x40	; 64
     f70:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADIE);
     f72:	a6 e2       	ldi	r26, 0x26	; 38
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e6 e2       	ldi	r30, 0x26	; 38
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	88 60       	ori	r24, 0x08	; 8
     f7e:	8c 93       	st	X, r24
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <ADC_u16GetChannelReadingASunch+0x90>
		}
		else{
			Local_e_ErrStatus = NOK;
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	89 83       	std	Y+1, r24	; 0x01
		}
	}

	return Local_e_ErrStatus;
     f86:	89 81       	ldd	r24, Y+1	; 0x01
}
     f88:	26 96       	adiw	r28, 0x06	; 6
     f8a:	0f b6       	in	r0, 0x3f	; 63
     f8c:	f8 94       	cli
     f8e:	de bf       	out	0x3e, r29	; 62
     f90:	0f be       	out	0x3f, r0	; 63
     f92:	cd bf       	out	0x3d, r28	; 61
     f94:	cf 91       	pop	r28
     f96:	df 91       	pop	r29
     f98:	08 95       	ret

00000f9a <__vector_16>:
void __vector_16(void)  __attribute__((signal));
void __vector_16(void)
{
     f9a:	1f 92       	push	r1
     f9c:	0f 92       	push	r0
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	0f 92       	push	r0
     fa2:	11 24       	eor	r1, r1
     fa4:	2f 93       	push	r18
     fa6:	3f 93       	push	r19
     fa8:	4f 93       	push	r20
     faa:	5f 93       	push	r21
     fac:	6f 93       	push	r22
     fae:	7f 93       	push	r23
     fb0:	8f 93       	push	r24
     fb2:	9f 93       	push	r25
     fb4:	af 93       	push	r26
     fb6:	bf 93       	push	r27
     fb8:	ef 93       	push	r30
     fba:	ff 93       	push	r31
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
	ADC_State = IDLE;
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	80 93 68 01 	sts	0x0168, r24
	Global_u16Ptr =ADC;
     fca:	e4 e2       	ldi	r30, 0x24	; 36
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	91 81       	ldd	r25, Z+1	; 0x01
     fd2:	90 93 6b 01 	sts	0x016B, r25
     fd6:	80 93 6a 01 	sts	0x016A, r24

	Global_voidPtrFunc();
     fda:	e0 91 6c 01 	lds	r30, 0x016C
     fde:	f0 91 6d 01 	lds	r31, 0x016D
     fe2:	09 95       	icall

	CLR_BIT(ADCSRA ,ADCSRA_ADIE);
     fe4:	a6 e2       	ldi	r26, 0x26	; 38
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e6 e2       	ldi	r30, 0x26	; 38
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	87 7f       	andi	r24, 0xF7	; 247
     ff0:	8c 93       	st	X, r24
}
     ff2:	cf 91       	pop	r28
     ff4:	df 91       	pop	r29
     ff6:	ff 91       	pop	r31
     ff8:	ef 91       	pop	r30
     ffa:	bf 91       	pop	r27
     ffc:	af 91       	pop	r26
     ffe:	9f 91       	pop	r25
    1000:	8f 91       	pop	r24
    1002:	7f 91       	pop	r23
    1004:	6f 91       	pop	r22
    1006:	5f 91       	pop	r21
    1008:	4f 91       	pop	r20
    100a:	3f 91       	pop	r19
    100c:	2f 91       	pop	r18
    100e:	0f 90       	pop	r0
    1010:	0f be       	out	0x3f, r0	; 63
    1012:	0f 90       	pop	r0
    1014:	1f 90       	pop	r1
    1016:	18 95       	reti

00001018 <CLCD_voidSendData>:
#include "CLCD_config.h"

#include <util/delay.h>


static void CLCD_voidSendData(u8 Copy_u8Data){
    1018:	df 93       	push	r29
    101a:	cf 93       	push	r28
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
    1020:	2f 97       	sbiw	r28, 0x0f	; 15
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	f8 94       	cli
    1026:	de bf       	out	0x3e, r29	; 62
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	cd bf       	out	0x3d, r28	; 61
    102c:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(CTRL_PORT,RS,PIN_HIGH);
    102e:	83 e0       	ldi	r24, 0x03	; 3
    1030:	63 e0       	ldi	r22, 0x03	; 3
    1032:	41 e0       	ldi	r20, 0x01	; 1
    1034:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CTRL_PORT,RW,PIN_LOW);
    1038:	83 e0       	ldi	r24, 0x03	; 3
    103a:	64 e0       	ldi	r22, 0x04	; 4
    103c:	40 e0       	ldi	r20, 0x00	; 0
    103e:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <DIO_voidSetPinValue>
	DIO_voidSetPortValue(DATA_PORT,Copy_u8Data);
    1042:	82 e0       	ldi	r24, 0x02	; 2
    1044:	6f 85       	ldd	r22, Y+15	; 0x0f
    1046:	0e 94 0b 0c 	call	0x1816	; 0x1816 <DIO_voidSetPortValue>
	DIO_voidSetPinValue(CTRL_PORT,EN, PIN_HIGH);
    104a:	83 e0       	ldi	r24, 0x03	; 3
    104c:	62 e0       	ldi	r22, 0x02	; 2
    104e:	41 e0       	ldi	r20, 0x01	; 1
    1050:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <DIO_voidSetPinValue>
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	a0 e8       	ldi	r26, 0x80	; 128
    105a:	bf e3       	ldi	r27, 0x3F	; 63
    105c:	8b 87       	std	Y+11, r24	; 0x0b
    105e:	9c 87       	std	Y+12, r25	; 0x0c
    1060:	ad 87       	std	Y+13, r26	; 0x0d
    1062:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1064:	6b 85       	ldd	r22, Y+11	; 0x0b
    1066:	7c 85       	ldd	r23, Y+12	; 0x0c
    1068:	8d 85       	ldd	r24, Y+13	; 0x0d
    106a:	9e 85       	ldd	r25, Y+14	; 0x0e
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	4a ef       	ldi	r20, 0xFA	; 250
    1072:	54 e4       	ldi	r21, 0x44	; 68
    1074:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1078:	dc 01       	movw	r26, r24
    107a:	cb 01       	movw	r24, r22
    107c:	8f 83       	std	Y+7, r24	; 0x07
    107e:	98 87       	std	Y+8, r25	; 0x08
    1080:	a9 87       	std	Y+9, r26	; 0x09
    1082:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1084:	6f 81       	ldd	r22, Y+7	; 0x07
    1086:	78 85       	ldd	r23, Y+8	; 0x08
    1088:	89 85       	ldd	r24, Y+9	; 0x09
    108a:	9a 85       	ldd	r25, Y+10	; 0x0a
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	40 e8       	ldi	r20, 0x80	; 128
    1092:	5f e3       	ldi	r21, 0x3F	; 63
    1094:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1098:	88 23       	and	r24, r24
    109a:	2c f4       	brge	.+10     	; 0x10a6 <CLCD_voidSendData+0x8e>
		__ticks = 1;
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	9e 83       	std	Y+6, r25	; 0x06
    10a2:	8d 83       	std	Y+5, r24	; 0x05
    10a4:	3f c0       	rjmp	.+126    	; 0x1124 <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    10a6:	6f 81       	ldd	r22, Y+7	; 0x07
    10a8:	78 85       	ldd	r23, Y+8	; 0x08
    10aa:	89 85       	ldd	r24, Y+9	; 0x09
    10ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	3f ef       	ldi	r19, 0xFF	; 255
    10b2:	4f e7       	ldi	r20, 0x7F	; 127
    10b4:	57 e4       	ldi	r21, 0x47	; 71
    10b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10ba:	18 16       	cp	r1, r24
    10bc:	4c f5       	brge	.+82     	; 0x1110 <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10be:	6b 85       	ldd	r22, Y+11	; 0x0b
    10c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    10c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    10c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    10c6:	20 e0       	ldi	r18, 0x00	; 0
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	40 e2       	ldi	r20, 0x20	; 32
    10cc:	51 e4       	ldi	r21, 0x41	; 65
    10ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10d2:	dc 01       	movw	r26, r24
    10d4:	cb 01       	movw	r24, r22
    10d6:	bc 01       	movw	r22, r24
    10d8:	cd 01       	movw	r24, r26
    10da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10de:	dc 01       	movw	r26, r24
    10e0:	cb 01       	movw	r24, r22
    10e2:	9e 83       	std	Y+6, r25	; 0x06
    10e4:	8d 83       	std	Y+5, r24	; 0x05
    10e6:	0f c0       	rjmp	.+30     	; 0x1106 <CLCD_voidSendData+0xee>
    10e8:	88 ec       	ldi	r24, 0xC8	; 200
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	9c 83       	std	Y+4, r25	; 0x04
    10ee:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	9c 81       	ldd	r25, Y+4	; 0x04
    10f4:	01 97       	sbiw	r24, 0x01	; 1
    10f6:	f1 f7       	brne	.-4      	; 0x10f4 <CLCD_voidSendData+0xdc>
    10f8:	9c 83       	std	Y+4, r25	; 0x04
    10fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10fc:	8d 81       	ldd	r24, Y+5	; 0x05
    10fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1100:	01 97       	sbiw	r24, 0x01	; 1
    1102:	9e 83       	std	Y+6, r25	; 0x06
    1104:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1106:	8d 81       	ldd	r24, Y+5	; 0x05
    1108:	9e 81       	ldd	r25, Y+6	; 0x06
    110a:	00 97       	sbiw	r24, 0x00	; 0
    110c:	69 f7       	brne	.-38     	; 0x10e8 <CLCD_voidSendData+0xd0>
    110e:	14 c0       	rjmp	.+40     	; 0x1138 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1110:	6f 81       	ldd	r22, Y+7	; 0x07
    1112:	78 85       	ldd	r23, Y+8	; 0x08
    1114:	89 85       	ldd	r24, Y+9	; 0x09
    1116:	9a 85       	ldd	r25, Y+10	; 0x0a
    1118:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    111c:	dc 01       	movw	r26, r24
    111e:	cb 01       	movw	r24, r22
    1120:	9e 83       	std	Y+6, r25	; 0x06
    1122:	8d 83       	std	Y+5, r24	; 0x05
    1124:	8d 81       	ldd	r24, Y+5	; 0x05
    1126:	9e 81       	ldd	r25, Y+6	; 0x06
    1128:	9a 83       	std	Y+2, r25	; 0x02
    112a:	89 83       	std	Y+1, r24	; 0x01
    112c:	89 81       	ldd	r24, Y+1	; 0x01
    112e:	9a 81       	ldd	r25, Y+2	; 0x02
    1130:	01 97       	sbiw	r24, 0x01	; 1
    1132:	f1 f7       	brne	.-4      	; 0x1130 <CLCD_voidSendData+0x118>
    1134:	9a 83       	std	Y+2, r25	; 0x02
    1136:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
    1138:	83 e0       	ldi	r24, 0x03	; 3
    113a:	62 e0       	ldi	r22, 0x02	; 2
    113c:	40 e0       	ldi	r20, 0x00	; 0
    113e:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <DIO_voidSetPinValue>
}
    1142:	2f 96       	adiw	r28, 0x0f	; 15
    1144:	0f b6       	in	r0, 0x3f	; 63
    1146:	f8 94       	cli
    1148:	de bf       	out	0x3e, r29	; 62
    114a:	0f be       	out	0x3f, r0	; 63
    114c:	cd bf       	out	0x3d, r28	; 61
    114e:	cf 91       	pop	r28
    1150:	df 91       	pop	r29
    1152:	08 95       	ret

00001154 <CLCD_voidSendCmd>:
static void CLCD_voidSendCmd(u8 Copy_u8Cmd){
    1154:	df 93       	push	r29
    1156:	cf 93       	push	r28
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	2f 97       	sbiw	r28, 0x0f	; 15
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	f8 94       	cli
    1162:	de bf       	out	0x3e, r29	; 62
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	cd bf       	out	0x3d, r28	; 61
    1168:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(CTRL_PORT,RS,PIN_LOW);
    116a:	83 e0       	ldi	r24, 0x03	; 3
    116c:	63 e0       	ldi	r22, 0x03	; 3
    116e:	40 e0       	ldi	r20, 0x00	; 0
    1170:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CTRL_PORT,RW,PIN_LOW);
    1174:	83 e0       	ldi	r24, 0x03	; 3
    1176:	64 e0       	ldi	r22, 0x04	; 4
    1178:	40 e0       	ldi	r20, 0x00	; 0
    117a:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <DIO_voidSetPinValue>
	DIO_voidSetPortValue(DATA_PORT,Copy_u8Cmd);
    117e:	82 e0       	ldi	r24, 0x02	; 2
    1180:	6f 85       	ldd	r22, Y+15	; 0x0f
    1182:	0e 94 0b 0c 	call	0x1816	; 0x1816 <DIO_voidSetPortValue>
	DIO_voidSetPinValue(CTRL_PORT,EN, PIN_HIGH);
    1186:	83 e0       	ldi	r24, 0x03	; 3
    1188:	62 e0       	ldi	r22, 0x02	; 2
    118a:	41 e0       	ldi	r20, 0x01	; 1
    118c:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <DIO_voidSetPinValue>
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	a0 e8       	ldi	r26, 0x80	; 128
    1196:	bf e3       	ldi	r27, 0x3F	; 63
    1198:	8b 87       	std	Y+11, r24	; 0x0b
    119a:	9c 87       	std	Y+12, r25	; 0x0c
    119c:	ad 87       	std	Y+13, r26	; 0x0d
    119e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    11a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    11a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    11a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    11a8:	20 e0       	ldi	r18, 0x00	; 0
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	4a ef       	ldi	r20, 0xFA	; 250
    11ae:	54 e4       	ldi	r21, 0x44	; 68
    11b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11b4:	dc 01       	movw	r26, r24
    11b6:	cb 01       	movw	r24, r22
    11b8:	8f 83       	std	Y+7, r24	; 0x07
    11ba:	98 87       	std	Y+8, r25	; 0x08
    11bc:	a9 87       	std	Y+9, r26	; 0x09
    11be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11c0:	6f 81       	ldd	r22, Y+7	; 0x07
    11c2:	78 85       	ldd	r23, Y+8	; 0x08
    11c4:	89 85       	ldd	r24, Y+9	; 0x09
    11c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    11c8:	20 e0       	ldi	r18, 0x00	; 0
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	40 e8       	ldi	r20, 0x80	; 128
    11ce:	5f e3       	ldi	r21, 0x3F	; 63
    11d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11d4:	88 23       	and	r24, r24
    11d6:	2c f4       	brge	.+10     	; 0x11e2 <CLCD_voidSendCmd+0x8e>
		__ticks = 1;
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	9e 83       	std	Y+6, r25	; 0x06
    11de:	8d 83       	std	Y+5, r24	; 0x05
    11e0:	3f c0       	rjmp	.+126    	; 0x1260 <CLCD_voidSendCmd+0x10c>
	else if (__tmp > 65535)
    11e2:	6f 81       	ldd	r22, Y+7	; 0x07
    11e4:	78 85       	ldd	r23, Y+8	; 0x08
    11e6:	89 85       	ldd	r24, Y+9	; 0x09
    11e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ea:	20 e0       	ldi	r18, 0x00	; 0
    11ec:	3f ef       	ldi	r19, 0xFF	; 255
    11ee:	4f e7       	ldi	r20, 0x7F	; 127
    11f0:	57 e4       	ldi	r21, 0x47	; 71
    11f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11f6:	18 16       	cp	r1, r24
    11f8:	4c f5       	brge	.+82     	; 0x124c <CLCD_voidSendCmd+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    11fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    11fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1200:	9e 85       	ldd	r25, Y+14	; 0x0e
    1202:	20 e0       	ldi	r18, 0x00	; 0
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	40 e2       	ldi	r20, 0x20	; 32
    1208:	51 e4       	ldi	r21, 0x41	; 65
    120a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    120e:	dc 01       	movw	r26, r24
    1210:	cb 01       	movw	r24, r22
    1212:	bc 01       	movw	r22, r24
    1214:	cd 01       	movw	r24, r26
    1216:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    121a:	dc 01       	movw	r26, r24
    121c:	cb 01       	movw	r24, r22
    121e:	9e 83       	std	Y+6, r25	; 0x06
    1220:	8d 83       	std	Y+5, r24	; 0x05
    1222:	0f c0       	rjmp	.+30     	; 0x1242 <CLCD_voidSendCmd+0xee>
    1224:	88 ec       	ldi	r24, 0xC8	; 200
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	9c 83       	std	Y+4, r25	; 0x04
    122a:	8b 83       	std	Y+3, r24	; 0x03
    122c:	8b 81       	ldd	r24, Y+3	; 0x03
    122e:	9c 81       	ldd	r25, Y+4	; 0x04
    1230:	01 97       	sbiw	r24, 0x01	; 1
    1232:	f1 f7       	brne	.-4      	; 0x1230 <CLCD_voidSendCmd+0xdc>
    1234:	9c 83       	std	Y+4, r25	; 0x04
    1236:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1238:	8d 81       	ldd	r24, Y+5	; 0x05
    123a:	9e 81       	ldd	r25, Y+6	; 0x06
    123c:	01 97       	sbiw	r24, 0x01	; 1
    123e:	9e 83       	std	Y+6, r25	; 0x06
    1240:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1242:	8d 81       	ldd	r24, Y+5	; 0x05
    1244:	9e 81       	ldd	r25, Y+6	; 0x06
    1246:	00 97       	sbiw	r24, 0x00	; 0
    1248:	69 f7       	brne	.-38     	; 0x1224 <CLCD_voidSendCmd+0xd0>
    124a:	14 c0       	rjmp	.+40     	; 0x1274 <CLCD_voidSendCmd+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    124c:	6f 81       	ldd	r22, Y+7	; 0x07
    124e:	78 85       	ldd	r23, Y+8	; 0x08
    1250:	89 85       	ldd	r24, Y+9	; 0x09
    1252:	9a 85       	ldd	r25, Y+10	; 0x0a
    1254:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1258:	dc 01       	movw	r26, r24
    125a:	cb 01       	movw	r24, r22
    125c:	9e 83       	std	Y+6, r25	; 0x06
    125e:	8d 83       	std	Y+5, r24	; 0x05
    1260:	8d 81       	ldd	r24, Y+5	; 0x05
    1262:	9e 81       	ldd	r25, Y+6	; 0x06
    1264:	9a 83       	std	Y+2, r25	; 0x02
    1266:	89 83       	std	Y+1, r24	; 0x01
    1268:	89 81       	ldd	r24, Y+1	; 0x01
    126a:	9a 81       	ldd	r25, Y+2	; 0x02
    126c:	01 97       	sbiw	r24, 0x01	; 1
    126e:	f1 f7       	brne	.-4      	; 0x126c <CLCD_voidSendCmd+0x118>
    1270:	9a 83       	std	Y+2, r25	; 0x02
    1272:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
    1274:	83 e0       	ldi	r24, 0x03	; 3
    1276:	62 e0       	ldi	r22, 0x02	; 2
    1278:	40 e0       	ldi	r20, 0x00	; 0
    127a:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <DIO_voidSetPinValue>
}
    127e:	2f 96       	adiw	r28, 0x0f	; 15
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	f8 94       	cli
    1284:	de bf       	out	0x3e, r29	; 62
    1286:	0f be       	out	0x3f, r0	; 63
    1288:	cd bf       	out	0x3d, r28	; 61
    128a:	cf 91       	pop	r28
    128c:	df 91       	pop	r29
    128e:	08 95       	ret

00001290 <CLCD_voidInit>:
void CLCD_voidInit(void){
    1290:	df 93       	push	r29
    1292:	cf 93       	push	r28
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
    1298:	e8 97       	sbiw	r28, 0x38	; 56
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	f8 94       	cli
    129e:	de bf       	out	0x3e, r29	; 62
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	cd bf       	out	0x3d, r28	; 61
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	a0 e2       	ldi	r26, 0x20	; 32
    12aa:	b2 e4       	ldi	r27, 0x42	; 66
    12ac:	8d ab       	std	Y+53, r24	; 0x35
    12ae:	9e ab       	std	Y+54, r25	; 0x36
    12b0:	af ab       	std	Y+55, r26	; 0x37
    12b2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12b4:	6d a9       	ldd	r22, Y+53	; 0x35
    12b6:	7e a9       	ldd	r23, Y+54	; 0x36
    12b8:	8f a9       	ldd	r24, Y+55	; 0x37
    12ba:	98 ad       	ldd	r25, Y+56	; 0x38
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	4a ef       	ldi	r20, 0xFA	; 250
    12c2:	54 e4       	ldi	r21, 0x44	; 68
    12c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12c8:	dc 01       	movw	r26, r24
    12ca:	cb 01       	movw	r24, r22
    12cc:	89 ab       	std	Y+49, r24	; 0x31
    12ce:	9a ab       	std	Y+50, r25	; 0x32
    12d0:	ab ab       	std	Y+51, r26	; 0x33
    12d2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    12d4:	69 a9       	ldd	r22, Y+49	; 0x31
    12d6:	7a a9       	ldd	r23, Y+50	; 0x32
    12d8:	8b a9       	ldd	r24, Y+51	; 0x33
    12da:	9c a9       	ldd	r25, Y+52	; 0x34
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	40 e8       	ldi	r20, 0x80	; 128
    12e2:	5f e3       	ldi	r21, 0x3F	; 63
    12e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12e8:	88 23       	and	r24, r24
    12ea:	2c f4       	brge	.+10     	; 0x12f6 <CLCD_voidInit+0x66>
		__ticks = 1;
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	98 ab       	std	Y+48, r25	; 0x30
    12f2:	8f a7       	std	Y+47, r24	; 0x2f
    12f4:	3f c0       	rjmp	.+126    	; 0x1374 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    12f6:	69 a9       	ldd	r22, Y+49	; 0x31
    12f8:	7a a9       	ldd	r23, Y+50	; 0x32
    12fa:	8b a9       	ldd	r24, Y+51	; 0x33
    12fc:	9c a9       	ldd	r25, Y+52	; 0x34
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	3f ef       	ldi	r19, 0xFF	; 255
    1302:	4f e7       	ldi	r20, 0x7F	; 127
    1304:	57 e4       	ldi	r21, 0x47	; 71
    1306:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    130a:	18 16       	cp	r1, r24
    130c:	4c f5       	brge	.+82     	; 0x1360 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    130e:	6d a9       	ldd	r22, Y+53	; 0x35
    1310:	7e a9       	ldd	r23, Y+54	; 0x36
    1312:	8f a9       	ldd	r24, Y+55	; 0x37
    1314:	98 ad       	ldd	r25, Y+56	; 0x38
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	40 e2       	ldi	r20, 0x20	; 32
    131c:	51 e4       	ldi	r21, 0x41	; 65
    131e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1322:	dc 01       	movw	r26, r24
    1324:	cb 01       	movw	r24, r22
    1326:	bc 01       	movw	r22, r24
    1328:	cd 01       	movw	r24, r26
    132a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    132e:	dc 01       	movw	r26, r24
    1330:	cb 01       	movw	r24, r22
    1332:	98 ab       	std	Y+48, r25	; 0x30
    1334:	8f a7       	std	Y+47, r24	; 0x2f
    1336:	0f c0       	rjmp	.+30     	; 0x1356 <CLCD_voidInit+0xc6>
    1338:	88 ec       	ldi	r24, 0xC8	; 200
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	9e a7       	std	Y+46, r25	; 0x2e
    133e:	8d a7       	std	Y+45, r24	; 0x2d
    1340:	8d a5       	ldd	r24, Y+45	; 0x2d
    1342:	9e a5       	ldd	r25, Y+46	; 0x2e
    1344:	01 97       	sbiw	r24, 0x01	; 1
    1346:	f1 f7       	brne	.-4      	; 0x1344 <CLCD_voidInit+0xb4>
    1348:	9e a7       	std	Y+46, r25	; 0x2e
    134a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    134c:	8f a5       	ldd	r24, Y+47	; 0x2f
    134e:	98 a9       	ldd	r25, Y+48	; 0x30
    1350:	01 97       	sbiw	r24, 0x01	; 1
    1352:	98 ab       	std	Y+48, r25	; 0x30
    1354:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1356:	8f a5       	ldd	r24, Y+47	; 0x2f
    1358:	98 a9       	ldd	r25, Y+48	; 0x30
    135a:	00 97       	sbiw	r24, 0x00	; 0
    135c:	69 f7       	brne	.-38     	; 0x1338 <CLCD_voidInit+0xa8>
    135e:	14 c0       	rjmp	.+40     	; 0x1388 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1360:	69 a9       	ldd	r22, Y+49	; 0x31
    1362:	7a a9       	ldd	r23, Y+50	; 0x32
    1364:	8b a9       	ldd	r24, Y+51	; 0x33
    1366:	9c a9       	ldd	r25, Y+52	; 0x34
    1368:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    136c:	dc 01       	movw	r26, r24
    136e:	cb 01       	movw	r24, r22
    1370:	98 ab       	std	Y+48, r25	; 0x30
    1372:	8f a7       	std	Y+47, r24	; 0x2f
    1374:	8f a5       	ldd	r24, Y+47	; 0x2f
    1376:	98 a9       	ldd	r25, Y+48	; 0x30
    1378:	9c a7       	std	Y+44, r25	; 0x2c
    137a:	8b a7       	std	Y+43, r24	; 0x2b
    137c:	8b a5       	ldd	r24, Y+43	; 0x2b
    137e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1380:	01 97       	sbiw	r24, 0x01	; 1
    1382:	f1 f7       	brne	.-4      	; 0x1380 <CLCD_voidInit+0xf0>
    1384:	9c a7       	std	Y+44, r25	; 0x2c
    1386:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(40);
	CLCD_voidSendCmd(0b00111000);
    1388:	88 e3       	ldi	r24, 0x38	; 56
    138a:	0e 94 aa 08 	call	0x1154	; 0x1154 <CLCD_voidSendCmd>
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	a0 e8       	ldi	r26, 0x80	; 128
    1394:	bf e3       	ldi	r27, 0x3F	; 63
    1396:	8f a3       	std	Y+39, r24	; 0x27
    1398:	98 a7       	std	Y+40, r25	; 0x28
    139a:	a9 a7       	std	Y+41, r26	; 0x29
    139c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    139e:	6f a1       	ldd	r22, Y+39	; 0x27
    13a0:	78 a5       	ldd	r23, Y+40	; 0x28
    13a2:	89 a5       	ldd	r24, Y+41	; 0x29
    13a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    13a6:	20 e0       	ldi	r18, 0x00	; 0
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	4a ef       	ldi	r20, 0xFA	; 250
    13ac:	54 e4       	ldi	r21, 0x44	; 68
    13ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13b2:	dc 01       	movw	r26, r24
    13b4:	cb 01       	movw	r24, r22
    13b6:	8b a3       	std	Y+35, r24	; 0x23
    13b8:	9c a3       	std	Y+36, r25	; 0x24
    13ba:	ad a3       	std	Y+37, r26	; 0x25
    13bc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    13be:	6b a1       	ldd	r22, Y+35	; 0x23
    13c0:	7c a1       	ldd	r23, Y+36	; 0x24
    13c2:	8d a1       	ldd	r24, Y+37	; 0x25
    13c4:	9e a1       	ldd	r25, Y+38	; 0x26
    13c6:	20 e0       	ldi	r18, 0x00	; 0
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	40 e8       	ldi	r20, 0x80	; 128
    13cc:	5f e3       	ldi	r21, 0x3F	; 63
    13ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13d2:	88 23       	and	r24, r24
    13d4:	2c f4       	brge	.+10     	; 0x13e0 <CLCD_voidInit+0x150>
		__ticks = 1;
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	9a a3       	std	Y+34, r25	; 0x22
    13dc:	89 a3       	std	Y+33, r24	; 0x21
    13de:	3f c0       	rjmp	.+126    	; 0x145e <CLCD_voidInit+0x1ce>
	else if (__tmp > 65535)
    13e0:	6b a1       	ldd	r22, Y+35	; 0x23
    13e2:	7c a1       	ldd	r23, Y+36	; 0x24
    13e4:	8d a1       	ldd	r24, Y+37	; 0x25
    13e6:	9e a1       	ldd	r25, Y+38	; 0x26
    13e8:	20 e0       	ldi	r18, 0x00	; 0
    13ea:	3f ef       	ldi	r19, 0xFF	; 255
    13ec:	4f e7       	ldi	r20, 0x7F	; 127
    13ee:	57 e4       	ldi	r21, 0x47	; 71
    13f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13f4:	18 16       	cp	r1, r24
    13f6:	4c f5       	brge	.+82     	; 0x144a <CLCD_voidInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13f8:	6f a1       	ldd	r22, Y+39	; 0x27
    13fa:	78 a5       	ldd	r23, Y+40	; 0x28
    13fc:	89 a5       	ldd	r24, Y+41	; 0x29
    13fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	40 e2       	ldi	r20, 0x20	; 32
    1406:	51 e4       	ldi	r21, 0x41	; 65
    1408:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    140c:	dc 01       	movw	r26, r24
    140e:	cb 01       	movw	r24, r22
    1410:	bc 01       	movw	r22, r24
    1412:	cd 01       	movw	r24, r26
    1414:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1418:	dc 01       	movw	r26, r24
    141a:	cb 01       	movw	r24, r22
    141c:	9a a3       	std	Y+34, r25	; 0x22
    141e:	89 a3       	std	Y+33, r24	; 0x21
    1420:	0f c0       	rjmp	.+30     	; 0x1440 <CLCD_voidInit+0x1b0>
    1422:	88 ec       	ldi	r24, 0xC8	; 200
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	98 a3       	std	Y+32, r25	; 0x20
    1428:	8f 8f       	std	Y+31, r24	; 0x1f
    142a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    142c:	98 a1       	ldd	r25, Y+32	; 0x20
    142e:	01 97       	sbiw	r24, 0x01	; 1
    1430:	f1 f7       	brne	.-4      	; 0x142e <CLCD_voidInit+0x19e>
    1432:	98 a3       	std	Y+32, r25	; 0x20
    1434:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1436:	89 a1       	ldd	r24, Y+33	; 0x21
    1438:	9a a1       	ldd	r25, Y+34	; 0x22
    143a:	01 97       	sbiw	r24, 0x01	; 1
    143c:	9a a3       	std	Y+34, r25	; 0x22
    143e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1440:	89 a1       	ldd	r24, Y+33	; 0x21
    1442:	9a a1       	ldd	r25, Y+34	; 0x22
    1444:	00 97       	sbiw	r24, 0x00	; 0
    1446:	69 f7       	brne	.-38     	; 0x1422 <CLCD_voidInit+0x192>
    1448:	14 c0       	rjmp	.+40     	; 0x1472 <CLCD_voidInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    144a:	6b a1       	ldd	r22, Y+35	; 0x23
    144c:	7c a1       	ldd	r23, Y+36	; 0x24
    144e:	8d a1       	ldd	r24, Y+37	; 0x25
    1450:	9e a1       	ldd	r25, Y+38	; 0x26
    1452:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1456:	dc 01       	movw	r26, r24
    1458:	cb 01       	movw	r24, r22
    145a:	9a a3       	std	Y+34, r25	; 0x22
    145c:	89 a3       	std	Y+33, r24	; 0x21
    145e:	89 a1       	ldd	r24, Y+33	; 0x21
    1460:	9a a1       	ldd	r25, Y+34	; 0x22
    1462:	9e 8f       	std	Y+30, r25	; 0x1e
    1464:	8d 8f       	std	Y+29, r24	; 0x1d
    1466:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1468:	9e 8d       	ldd	r25, Y+30	; 0x1e
    146a:	01 97       	sbiw	r24, 0x01	; 1
    146c:	f1 f7       	brne	.-4      	; 0x146a <CLCD_voidInit+0x1da>
    146e:	9e 8f       	std	Y+30, r25	; 0x1e
    1470:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
		CLCD_voidSendCmd(0b00001100);
    1472:	8c e0       	ldi	r24, 0x0C	; 12
    1474:	0e 94 aa 08 	call	0x1154	; 0x1154 <CLCD_voidSendCmd>
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	a0 e8       	ldi	r26, 0x80	; 128
    147e:	bf e3       	ldi	r27, 0x3F	; 63
    1480:	89 8f       	std	Y+25, r24	; 0x19
    1482:	9a 8f       	std	Y+26, r25	; 0x1a
    1484:	ab 8f       	std	Y+27, r26	; 0x1b
    1486:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1488:	69 8d       	ldd	r22, Y+25	; 0x19
    148a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    148c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    148e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1490:	20 e0       	ldi	r18, 0x00	; 0
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	4a ef       	ldi	r20, 0xFA	; 250
    1496:	54 e4       	ldi	r21, 0x44	; 68
    1498:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    149c:	dc 01       	movw	r26, r24
    149e:	cb 01       	movw	r24, r22
    14a0:	8d 8b       	std	Y+21, r24	; 0x15
    14a2:	9e 8b       	std	Y+22, r25	; 0x16
    14a4:	af 8b       	std	Y+23, r26	; 0x17
    14a6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14a8:	6d 89       	ldd	r22, Y+21	; 0x15
    14aa:	7e 89       	ldd	r23, Y+22	; 0x16
    14ac:	8f 89       	ldd	r24, Y+23	; 0x17
    14ae:	98 8d       	ldd	r25, Y+24	; 0x18
    14b0:	20 e0       	ldi	r18, 0x00	; 0
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	40 e8       	ldi	r20, 0x80	; 128
    14b6:	5f e3       	ldi	r21, 0x3F	; 63
    14b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14bc:	88 23       	and	r24, r24
    14be:	2c f4       	brge	.+10     	; 0x14ca <CLCD_voidInit+0x23a>
		__ticks = 1;
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	9c 8b       	std	Y+20, r25	; 0x14
    14c6:	8b 8b       	std	Y+19, r24	; 0x13
    14c8:	3f c0       	rjmp	.+126    	; 0x1548 <CLCD_voidInit+0x2b8>
	else if (__tmp > 65535)
    14ca:	6d 89       	ldd	r22, Y+21	; 0x15
    14cc:	7e 89       	ldd	r23, Y+22	; 0x16
    14ce:	8f 89       	ldd	r24, Y+23	; 0x17
    14d0:	98 8d       	ldd	r25, Y+24	; 0x18
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	3f ef       	ldi	r19, 0xFF	; 255
    14d6:	4f e7       	ldi	r20, 0x7F	; 127
    14d8:	57 e4       	ldi	r21, 0x47	; 71
    14da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14de:	18 16       	cp	r1, r24
    14e0:	4c f5       	brge	.+82     	; 0x1534 <CLCD_voidInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14e2:	69 8d       	ldd	r22, Y+25	; 0x19
    14e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	40 e2       	ldi	r20, 0x20	; 32
    14f0:	51 e4       	ldi	r21, 0x41	; 65
    14f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f6:	dc 01       	movw	r26, r24
    14f8:	cb 01       	movw	r24, r22
    14fa:	bc 01       	movw	r22, r24
    14fc:	cd 01       	movw	r24, r26
    14fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1502:	dc 01       	movw	r26, r24
    1504:	cb 01       	movw	r24, r22
    1506:	9c 8b       	std	Y+20, r25	; 0x14
    1508:	8b 8b       	std	Y+19, r24	; 0x13
    150a:	0f c0       	rjmp	.+30     	; 0x152a <CLCD_voidInit+0x29a>
    150c:	88 ec       	ldi	r24, 0xC8	; 200
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	9a 8b       	std	Y+18, r25	; 0x12
    1512:	89 8b       	std	Y+17, r24	; 0x11
    1514:	89 89       	ldd	r24, Y+17	; 0x11
    1516:	9a 89       	ldd	r25, Y+18	; 0x12
    1518:	01 97       	sbiw	r24, 0x01	; 1
    151a:	f1 f7       	brne	.-4      	; 0x1518 <CLCD_voidInit+0x288>
    151c:	9a 8b       	std	Y+18, r25	; 0x12
    151e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1520:	8b 89       	ldd	r24, Y+19	; 0x13
    1522:	9c 89       	ldd	r25, Y+20	; 0x14
    1524:	01 97       	sbiw	r24, 0x01	; 1
    1526:	9c 8b       	std	Y+20, r25	; 0x14
    1528:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    152a:	8b 89       	ldd	r24, Y+19	; 0x13
    152c:	9c 89       	ldd	r25, Y+20	; 0x14
    152e:	00 97       	sbiw	r24, 0x00	; 0
    1530:	69 f7       	brne	.-38     	; 0x150c <CLCD_voidInit+0x27c>
    1532:	14 c0       	rjmp	.+40     	; 0x155c <CLCD_voidInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1534:	6d 89       	ldd	r22, Y+21	; 0x15
    1536:	7e 89       	ldd	r23, Y+22	; 0x16
    1538:	8f 89       	ldd	r24, Y+23	; 0x17
    153a:	98 8d       	ldd	r25, Y+24	; 0x18
    153c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	9c 8b       	std	Y+20, r25	; 0x14
    1546:	8b 8b       	std	Y+19, r24	; 0x13
    1548:	8b 89       	ldd	r24, Y+19	; 0x13
    154a:	9c 89       	ldd	r25, Y+20	; 0x14
    154c:	98 8b       	std	Y+16, r25	; 0x10
    154e:	8f 87       	std	Y+15, r24	; 0x0f
    1550:	8f 85       	ldd	r24, Y+15	; 0x0f
    1552:	98 89       	ldd	r25, Y+16	; 0x10
    1554:	01 97       	sbiw	r24, 0x01	; 1
    1556:	f1 f7       	brne	.-4      	; 0x1554 <CLCD_voidInit+0x2c4>
    1558:	98 8b       	std	Y+16, r25	; 0x10
    155a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
			CLCD_voidSendCmd(1);
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	0e 94 aa 08 	call	0x1154	; 0x1154 <CLCD_voidSendCmd>
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	a0 e0       	ldi	r26, 0x00	; 0
    1568:	b0 e4       	ldi	r27, 0x40	; 64
    156a:	8b 87       	std	Y+11, r24	; 0x0b
    156c:	9c 87       	std	Y+12, r25	; 0x0c
    156e:	ad 87       	std	Y+13, r26	; 0x0d
    1570:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1572:	6b 85       	ldd	r22, Y+11	; 0x0b
    1574:	7c 85       	ldd	r23, Y+12	; 0x0c
    1576:	8d 85       	ldd	r24, Y+13	; 0x0d
    1578:	9e 85       	ldd	r25, Y+14	; 0x0e
    157a:	20 e0       	ldi	r18, 0x00	; 0
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	4a ef       	ldi	r20, 0xFA	; 250
    1580:	54 e4       	ldi	r21, 0x44	; 68
    1582:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1586:	dc 01       	movw	r26, r24
    1588:	cb 01       	movw	r24, r22
    158a:	8f 83       	std	Y+7, r24	; 0x07
    158c:	98 87       	std	Y+8, r25	; 0x08
    158e:	a9 87       	std	Y+9, r26	; 0x09
    1590:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1592:	6f 81       	ldd	r22, Y+7	; 0x07
    1594:	78 85       	ldd	r23, Y+8	; 0x08
    1596:	89 85       	ldd	r24, Y+9	; 0x09
    1598:	9a 85       	ldd	r25, Y+10	; 0x0a
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	40 e8       	ldi	r20, 0x80	; 128
    15a0:	5f e3       	ldi	r21, 0x3F	; 63
    15a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15a6:	88 23       	and	r24, r24
    15a8:	2c f4       	brge	.+10     	; 0x15b4 <CLCD_voidInit+0x324>
		__ticks = 1;
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	9e 83       	std	Y+6, r25	; 0x06
    15b0:	8d 83       	std	Y+5, r24	; 0x05
    15b2:	3f c0       	rjmp	.+126    	; 0x1632 <CLCD_voidInit+0x3a2>
	else if (__tmp > 65535)
    15b4:	6f 81       	ldd	r22, Y+7	; 0x07
    15b6:	78 85       	ldd	r23, Y+8	; 0x08
    15b8:	89 85       	ldd	r24, Y+9	; 0x09
    15ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	3f ef       	ldi	r19, 0xFF	; 255
    15c0:	4f e7       	ldi	r20, 0x7F	; 127
    15c2:	57 e4       	ldi	r21, 0x47	; 71
    15c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15c8:	18 16       	cp	r1, r24
    15ca:	4c f5       	brge	.+82     	; 0x161e <CLCD_voidInit+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    15ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    15d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    15d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	40 e2       	ldi	r20, 0x20	; 32
    15da:	51 e4       	ldi	r21, 0x41	; 65
    15dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e0:	dc 01       	movw	r26, r24
    15e2:	cb 01       	movw	r24, r22
    15e4:	bc 01       	movw	r22, r24
    15e6:	cd 01       	movw	r24, r26
    15e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ec:	dc 01       	movw	r26, r24
    15ee:	cb 01       	movw	r24, r22
    15f0:	9e 83       	std	Y+6, r25	; 0x06
    15f2:	8d 83       	std	Y+5, r24	; 0x05
    15f4:	0f c0       	rjmp	.+30     	; 0x1614 <CLCD_voidInit+0x384>
    15f6:	88 ec       	ldi	r24, 0xC8	; 200
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	9c 83       	std	Y+4, r25	; 0x04
    15fc:	8b 83       	std	Y+3, r24	; 0x03
    15fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1600:	9c 81       	ldd	r25, Y+4	; 0x04
    1602:	01 97       	sbiw	r24, 0x01	; 1
    1604:	f1 f7       	brne	.-4      	; 0x1602 <CLCD_voidInit+0x372>
    1606:	9c 83       	std	Y+4, r25	; 0x04
    1608:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    160a:	8d 81       	ldd	r24, Y+5	; 0x05
    160c:	9e 81       	ldd	r25, Y+6	; 0x06
    160e:	01 97       	sbiw	r24, 0x01	; 1
    1610:	9e 83       	std	Y+6, r25	; 0x06
    1612:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1614:	8d 81       	ldd	r24, Y+5	; 0x05
    1616:	9e 81       	ldd	r25, Y+6	; 0x06
    1618:	00 97       	sbiw	r24, 0x00	; 0
    161a:	69 f7       	brne	.-38     	; 0x15f6 <CLCD_voidInit+0x366>
    161c:	14 c0       	rjmp	.+40     	; 0x1646 <CLCD_voidInit+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    161e:	6f 81       	ldd	r22, Y+7	; 0x07
    1620:	78 85       	ldd	r23, Y+8	; 0x08
    1622:	89 85       	ldd	r24, Y+9	; 0x09
    1624:	9a 85       	ldd	r25, Y+10	; 0x0a
    1626:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    162a:	dc 01       	movw	r26, r24
    162c:	cb 01       	movw	r24, r22
    162e:	9e 83       	std	Y+6, r25	; 0x06
    1630:	8d 83       	std	Y+5, r24	; 0x05
    1632:	8d 81       	ldd	r24, Y+5	; 0x05
    1634:	9e 81       	ldd	r25, Y+6	; 0x06
    1636:	9a 83       	std	Y+2, r25	; 0x02
    1638:	89 83       	std	Y+1, r24	; 0x01
    163a:	89 81       	ldd	r24, Y+1	; 0x01
    163c:	9a 81       	ldd	r25, Y+2	; 0x02
    163e:	01 97       	sbiw	r24, 0x01	; 1
    1640:	f1 f7       	brne	.-4      	; 0x163e <CLCD_voidInit+0x3ae>
    1642:	9a 83       	std	Y+2, r25	; 0x02
    1644:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2);



}
    1646:	e8 96       	adiw	r28, 0x38	; 56
    1648:	0f b6       	in	r0, 0x3f	; 63
    164a:	f8 94       	cli
    164c:	de bf       	out	0x3e, r29	; 62
    164e:	0f be       	out	0x3f, r0	; 63
    1650:	cd bf       	out	0x3d, r28	; 61
    1652:	cf 91       	pop	r28
    1654:	df 91       	pop	r29
    1656:	08 95       	ret

00001658 <CLCD_voidSendString>:
void CLCD_voidSendString(const char *PcString ){
    1658:	df 93       	push	r29
    165a:	cf 93       	push	r28
    165c:	00 d0       	rcall	.+0      	; 0x165e <CLCD_voidSendString+0x6>
    165e:	0f 92       	push	r0
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
    1664:	9b 83       	std	Y+3, r25	; 0x03
    1666:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_iterator=0;
    1668:	19 82       	std	Y+1, r1	; 0x01
    166a:	0e c0       	rjmp	.+28     	; 0x1688 <CLCD_voidSendString+0x30>
	while(PcString[Local_iterator]!='\0'){
		CLCD_voidSendData(PcString[Local_iterator]);
    166c:	89 81       	ldd	r24, Y+1	; 0x01
    166e:	28 2f       	mov	r18, r24
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	8a 81       	ldd	r24, Y+2	; 0x02
    1674:	9b 81       	ldd	r25, Y+3	; 0x03
    1676:	fc 01       	movw	r30, r24
    1678:	e2 0f       	add	r30, r18
    167a:	f3 1f       	adc	r31, r19
    167c:	80 81       	ld	r24, Z
    167e:	0e 94 0c 08 	call	0x1018	; 0x1018 <CLCD_voidSendData>
		Local_iterator++;
    1682:	89 81       	ldd	r24, Y+1	; 0x01
    1684:	8f 5f       	subi	r24, 0xFF	; 255
    1686:	89 83       	std	Y+1, r24	; 0x01


}
void CLCD_voidSendString(const char *PcString ){
	u8 Local_iterator=0;
	while(PcString[Local_iterator]!='\0'){
    1688:	89 81       	ldd	r24, Y+1	; 0x01
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	8a 81       	ldd	r24, Y+2	; 0x02
    1690:	9b 81       	ldd	r25, Y+3	; 0x03
    1692:	fc 01       	movw	r30, r24
    1694:	e2 0f       	add	r30, r18
    1696:	f3 1f       	adc	r31, r19
    1698:	80 81       	ld	r24, Z
    169a:	88 23       	and	r24, r24
    169c:	39 f7       	brne	.-50     	; 0x166c <CLCD_voidSendString+0x14>


	}


}
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	cf 91       	pop	r28
    16a6:	df 91       	pop	r29
    16a8:	08 95       	ret

000016aa <CLCD_voidSitPosition>:
void CLCD_voidSitPosition(u8 Copy_u8x,u8 Copy_u8y ){
    16aa:	df 93       	push	r29
    16ac:	cf 93       	push	r28
    16ae:	00 d0       	rcall	.+0      	; 0x16b0 <CLCD_voidSitPosition+0x6>
    16b0:	00 d0       	rcall	.+0      	; 0x16b2 <CLCD_voidSitPosition+0x8>
    16b2:	0f 92       	push	r0
    16b4:	cd b7       	in	r28, 0x3d	; 61
    16b6:	de b7       	in	r29, 0x3e	; 62
    16b8:	8a 83       	std	Y+2, r24	; 0x02
    16ba:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Position;
	switch(Copy_u8x){
    16bc:	8a 81       	ldd	r24, Y+2	; 0x02
    16be:	28 2f       	mov	r18, r24
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	3d 83       	std	Y+5, r19	; 0x05
    16c4:	2c 83       	std	Y+4, r18	; 0x04
    16c6:	8c 81       	ldd	r24, Y+4	; 0x04
    16c8:	9d 81       	ldd	r25, Y+5	; 0x05
    16ca:	00 97       	sbiw	r24, 0x00	; 0
    16cc:	31 f0       	breq	.+12     	; 0x16da <CLCD_voidSitPosition+0x30>
    16ce:	2c 81       	ldd	r18, Y+4	; 0x04
    16d0:	3d 81       	ldd	r19, Y+5	; 0x05
    16d2:	21 30       	cpi	r18, 0x01	; 1
    16d4:	31 05       	cpc	r19, r1
    16d6:	21 f0       	breq	.+8      	; 0x16e0 <CLCD_voidSitPosition+0x36>
    16d8:	06 c0       	rjmp	.+12     	; 0x16e6 <CLCD_voidSitPosition+0x3c>
	case 0:Local_u8Position=Copy_u8y;break;
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	89 83       	std	Y+1, r24	; 0x01
    16de:	03 c0       	rjmp	.+6      	; 0x16e6 <CLCD_voidSitPosition+0x3c>
	case 1:Local_u8Position=Copy_u8y+LINE1_BASE;break;
    16e0:	8b 81       	ldd	r24, Y+3	; 0x03
    16e2:	80 5c       	subi	r24, 0xC0	; 192
    16e4:	89 83       	std	Y+1, r24	; 0x01


	}
	CLCD_voidSendCmd(Local_u8Position+MSB);
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
    16e8:	80 58       	subi	r24, 0x80	; 128
    16ea:	0e 94 aa 08 	call	0x1154	; 0x1154 <CLCD_voidSendCmd>
}
    16ee:	0f 90       	pop	r0
    16f0:	0f 90       	pop	r0
    16f2:	0f 90       	pop	r0
    16f4:	0f 90       	pop	r0
    16f6:	0f 90       	pop	r0
    16f8:	cf 91       	pop	r28
    16fa:	df 91       	pop	r29
    16fc:	08 95       	ret

000016fe <CLCD_voidSendSpecialChar>:

void CLCD_voidSendSpecialChar(u8 *Pu8_arr,u8 Copy_u8BlockNum, u8 Copy_u8x,u8 Copy_u8y){
    16fe:	df 93       	push	r29
    1700:	cf 93       	push	r28
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
    1706:	27 97       	sbiw	r28, 0x07	; 7
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	f8 94       	cli
    170c:	de bf       	out	0x3e, r29	; 62
    170e:	0f be       	out	0x3f, r0	; 63
    1710:	cd bf       	out	0x3d, r28	; 61
    1712:	9c 83       	std	Y+4, r25	; 0x04
    1714:	8b 83       	std	Y+3, r24	; 0x03
    1716:	6d 83       	std	Y+5, r22	; 0x05
    1718:	4e 83       	std	Y+6, r20	; 0x06
    171a:	2f 83       	std	Y+7, r18	; 0x07

	u8 Local_u8StartingAddress =Copy_u8BlockNum*8;
    171c:	8d 81       	ldd	r24, Y+5	; 0x05
    171e:	88 2f       	mov	r24, r24
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	88 0f       	add	r24, r24
    1724:	99 1f       	adc	r25, r25
    1726:	88 0f       	add	r24, r24
    1728:	99 1f       	adc	r25, r25
    172a:	88 0f       	add	r24, r24
    172c:	99 1f       	adc	r25, r25
    172e:	8a 83       	std	Y+2, r24	; 0x02
	CLCD_voidSendCmd(Local_u8StartingAddress+CGRAM_CONS);
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
    1732:	80 5c       	subi	r24, 0xC0	; 192
    1734:	0e 94 aa 08 	call	0x1154	; 0x1154 <CLCD_voidSendCmd>

	for(u8 Localu8Iterator=0;Localu8Iterator<8;Localu8Iterator++){
    1738:	19 82       	std	Y+1, r1	; 0x01
    173a:	0e c0       	rjmp	.+28     	; 0x1758 <CLCD_voidSendSpecialChar+0x5a>
		CLCD_voidSendData(Pu8_arr[Localu8Iterator]);
    173c:	89 81       	ldd	r24, Y+1	; 0x01
    173e:	28 2f       	mov	r18, r24
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	8b 81       	ldd	r24, Y+3	; 0x03
    1744:	9c 81       	ldd	r25, Y+4	; 0x04
    1746:	fc 01       	movw	r30, r24
    1748:	e2 0f       	add	r30, r18
    174a:	f3 1f       	adc	r31, r19
    174c:	80 81       	ld	r24, Z
    174e:	0e 94 0c 08 	call	0x1018	; 0x1018 <CLCD_voidSendData>
void CLCD_voidSendSpecialChar(u8 *Pu8_arr,u8 Copy_u8BlockNum, u8 Copy_u8x,u8 Copy_u8y){

	u8 Local_u8StartingAddress =Copy_u8BlockNum*8;
	CLCD_voidSendCmd(Local_u8StartingAddress+CGRAM_CONS);

	for(u8 Localu8Iterator=0;Localu8Iterator<8;Localu8Iterator++){
    1752:	89 81       	ldd	r24, Y+1	; 0x01
    1754:	8f 5f       	subi	r24, 0xFF	; 255
    1756:	89 83       	std	Y+1, r24	; 0x01
    1758:	89 81       	ldd	r24, Y+1	; 0x01
    175a:	88 30       	cpi	r24, 0x08	; 8
    175c:	78 f3       	brcs	.-34     	; 0x173c <CLCD_voidSendSpecialChar+0x3e>
		CLCD_voidSendData(Pu8_arr[Localu8Iterator]);
	}

	CLCD_voidSitPosition(Copy_u8x,Copy_u8y);
    175e:	8e 81       	ldd	r24, Y+6	; 0x06
    1760:	6f 81       	ldd	r22, Y+7	; 0x07
    1762:	0e 94 55 0b 	call	0x16aa	; 0x16aa <CLCD_voidSitPosition>

	CLCD_voidSendData(Copy_u8BlockNum);
    1766:	8d 81       	ldd	r24, Y+5	; 0x05
    1768:	0e 94 0c 08 	call	0x1018	; 0x1018 <CLCD_voidSendData>


}
    176c:	27 96       	adiw	r28, 0x07	; 7
    176e:	0f b6       	in	r0, 0x3f	; 63
    1770:	f8 94       	cli
    1772:	de bf       	out	0x3e, r29	; 62
    1774:	0f be       	out	0x3f, r0	; 63
    1776:	cd bf       	out	0x3d, r28	; 61
    1778:	cf 91       	pop	r28
    177a:	df 91       	pop	r29
    177c:	08 95       	ret

0000177e <CLCD_voidClearDisplay>:

void CLCD_voidClearDisplay(void){
    177e:	df 93       	push	r29
    1780:	cf 93       	push	r28
    1782:	cd b7       	in	r28, 0x3d	; 61
    1784:	de b7       	in	r29, 0x3e	; 62

	CLCD_voidSendCmd(1);
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	0e 94 aa 08 	call	0x1154	; 0x1154 <CLCD_voidSendCmd>
}
    178c:	cf 91       	pop	r28
    178e:	df 91       	pop	r29
    1790:	08 95       	ret

00001792 <DIO_voidSetPortDirection>:




void DIO_voidSetPortDirection(u8 Copy_u8PortNum,u8 Copy_u8PortDir)
{
    1792:	df 93       	push	r29
    1794:	cf 93       	push	r28
    1796:	00 d0       	rcall	.+0      	; 0x1798 <DIO_voidSetPortDirection+0x6>
    1798:	00 d0       	rcall	.+0      	; 0x179a <DIO_voidSetPortDirection+0x8>
    179a:	cd b7       	in	r28, 0x3d	; 61
    179c:	de b7       	in	r29, 0x3e	; 62
    179e:	89 83       	std	Y+1, r24	; 0x01
    17a0:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortNum)
    17a2:	89 81       	ldd	r24, Y+1	; 0x01
    17a4:	28 2f       	mov	r18, r24
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	3c 83       	std	Y+4, r19	; 0x04
    17aa:	2b 83       	std	Y+3, r18	; 0x03
    17ac:	8b 81       	ldd	r24, Y+3	; 0x03
    17ae:	9c 81       	ldd	r25, Y+4	; 0x04
    17b0:	82 30       	cpi	r24, 0x02	; 2
    17b2:	91 05       	cpc	r25, r1
    17b4:	d9 f0       	breq	.+54     	; 0x17ec <DIO_voidSetPortDirection+0x5a>
    17b6:	2b 81       	ldd	r18, Y+3	; 0x03
    17b8:	3c 81       	ldd	r19, Y+4	; 0x04
    17ba:	23 30       	cpi	r18, 0x03	; 3
    17bc:	31 05       	cpc	r19, r1
    17be:	34 f4       	brge	.+12     	; 0x17cc <DIO_voidSetPortDirection+0x3a>
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	9c 81       	ldd	r25, Y+4	; 0x04
    17c4:	81 30       	cpi	r24, 0x01	; 1
    17c6:	91 05       	cpc	r25, r1
    17c8:	61 f0       	breq	.+24     	; 0x17e2 <DIO_voidSetPortDirection+0x50>
    17ca:	1e c0       	rjmp	.+60     	; 0x1808 <DIO_voidSetPortDirection+0x76>
    17cc:	2b 81       	ldd	r18, Y+3	; 0x03
    17ce:	3c 81       	ldd	r19, Y+4	; 0x04
    17d0:	23 30       	cpi	r18, 0x03	; 3
    17d2:	31 05       	cpc	r19, r1
    17d4:	81 f0       	breq	.+32     	; 0x17f6 <DIO_voidSetPortDirection+0x64>
    17d6:	8b 81       	ldd	r24, Y+3	; 0x03
    17d8:	9c 81       	ldd	r25, Y+4	; 0x04
    17da:	84 30       	cpi	r24, 0x04	; 4
    17dc:	91 05       	cpc	r25, r1
    17de:	81 f0       	breq	.+32     	; 0x1800 <DIO_voidSetPortDirection+0x6e>
    17e0:	13 c0       	rjmp	.+38     	; 0x1808 <DIO_voidSetPortDirection+0x76>
	{
		case PORT_u8A : DDRA=Copy_u8PortDir;break;
    17e2:	ea e3       	ldi	r30, 0x3A	; 58
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	8a 81       	ldd	r24, Y+2	; 0x02
    17e8:	80 83       	st	Z, r24
    17ea:	0e c0       	rjmp	.+28     	; 0x1808 <DIO_voidSetPortDirection+0x76>
		case PORT_u8B : DDRB=Copy_u8PortDir;break;
    17ec:	e7 e3       	ldi	r30, 0x37	; 55
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	8a 81       	ldd	r24, Y+2	; 0x02
    17f2:	80 83       	st	Z, r24
    17f4:	09 c0       	rjmp	.+18     	; 0x1808 <DIO_voidSetPortDirection+0x76>
		case PORT_u8C : DDRC=Copy_u8PortDir;break;
    17f6:	e4 e3       	ldi	r30, 0x34	; 52
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	8a 81       	ldd	r24, Y+2	; 0x02
    17fc:	80 83       	st	Z, r24
    17fe:	04 c0       	rjmp	.+8      	; 0x1808 <DIO_voidSetPortDirection+0x76>
		case PORT_u8D : DDRD=Copy_u8PortDir;break;
    1800:	e1 e3       	ldi	r30, 0x31	; 49
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	8a 81       	ldd	r24, Y+2	; 0x02
    1806:	80 83       	st	Z, r24
	}
	
}
    1808:	0f 90       	pop	r0
    180a:	0f 90       	pop	r0
    180c:	0f 90       	pop	r0
    180e:	0f 90       	pop	r0
    1810:	cf 91       	pop	r28
    1812:	df 91       	pop	r29
    1814:	08 95       	ret

00001816 <DIO_voidSetPortValue>:
void DIO_voidSetPortValue(u8 Copy_u8PortNum,u8 Copy_u8PortValue)
{
    1816:	df 93       	push	r29
    1818:	cf 93       	push	r28
    181a:	00 d0       	rcall	.+0      	; 0x181c <DIO_voidSetPortValue+0x6>
    181c:	00 d0       	rcall	.+0      	; 0x181e <DIO_voidSetPortValue+0x8>
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62
    1822:	89 83       	std	Y+1, r24	; 0x01
    1824:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortNum)
    1826:	89 81       	ldd	r24, Y+1	; 0x01
    1828:	28 2f       	mov	r18, r24
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	3c 83       	std	Y+4, r19	; 0x04
    182e:	2b 83       	std	Y+3, r18	; 0x03
    1830:	8b 81       	ldd	r24, Y+3	; 0x03
    1832:	9c 81       	ldd	r25, Y+4	; 0x04
    1834:	82 30       	cpi	r24, 0x02	; 2
    1836:	91 05       	cpc	r25, r1
    1838:	d9 f0       	breq	.+54     	; 0x1870 <DIO_voidSetPortValue+0x5a>
    183a:	2b 81       	ldd	r18, Y+3	; 0x03
    183c:	3c 81       	ldd	r19, Y+4	; 0x04
    183e:	23 30       	cpi	r18, 0x03	; 3
    1840:	31 05       	cpc	r19, r1
    1842:	34 f4       	brge	.+12     	; 0x1850 <DIO_voidSetPortValue+0x3a>
    1844:	8b 81       	ldd	r24, Y+3	; 0x03
    1846:	9c 81       	ldd	r25, Y+4	; 0x04
    1848:	81 30       	cpi	r24, 0x01	; 1
    184a:	91 05       	cpc	r25, r1
    184c:	61 f0       	breq	.+24     	; 0x1866 <DIO_voidSetPortValue+0x50>
    184e:	1e c0       	rjmp	.+60     	; 0x188c <DIO_voidSetPortValue+0x76>
    1850:	2b 81       	ldd	r18, Y+3	; 0x03
    1852:	3c 81       	ldd	r19, Y+4	; 0x04
    1854:	23 30       	cpi	r18, 0x03	; 3
    1856:	31 05       	cpc	r19, r1
    1858:	81 f0       	breq	.+32     	; 0x187a <DIO_voidSetPortValue+0x64>
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	9c 81       	ldd	r25, Y+4	; 0x04
    185e:	84 30       	cpi	r24, 0x04	; 4
    1860:	91 05       	cpc	r25, r1
    1862:	81 f0       	breq	.+32     	; 0x1884 <DIO_voidSetPortValue+0x6e>
    1864:	13 c0       	rjmp	.+38     	; 0x188c <DIO_voidSetPortValue+0x76>
	{
		case PORT_u8A : PORTA=Copy_u8PortValue;break;
    1866:	eb e3       	ldi	r30, 0x3B	; 59
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	8a 81       	ldd	r24, Y+2	; 0x02
    186c:	80 83       	st	Z, r24
    186e:	0e c0       	rjmp	.+28     	; 0x188c <DIO_voidSetPortValue+0x76>
		case PORT_u8B : PORTB=Copy_u8PortValue;break;
    1870:	e8 e3       	ldi	r30, 0x38	; 56
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	8a 81       	ldd	r24, Y+2	; 0x02
    1876:	80 83       	st	Z, r24
    1878:	09 c0       	rjmp	.+18     	; 0x188c <DIO_voidSetPortValue+0x76>
		case PORT_u8C : PORTC=Copy_u8PortValue;break;
    187a:	e5 e3       	ldi	r30, 0x35	; 53
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	8a 81       	ldd	r24, Y+2	; 0x02
    1880:	80 83       	st	Z, r24
    1882:	04 c0       	rjmp	.+8      	; 0x188c <DIO_voidSetPortValue+0x76>
		case PORT_u8D : PORTD=Copy_u8PortValue;break;
    1884:	e2 e3       	ldi	r30, 0x32	; 50
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	8a 81       	ldd	r24, Y+2	; 0x02
    188a:	80 83       	st	Z, r24
	}
}
    188c:	0f 90       	pop	r0
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	cf 91       	pop	r28
    1896:	df 91       	pop	r29
    1898:	08 95       	ret

0000189a <DIO_voidSetPinDirection>:

void DIO_voidSetPinDirection(u8 Copy_u8PortNum,u8 Copy_u8PinNum,u8 Copy_u8PinDir)
{
    189a:	df 93       	push	r29
    189c:	cf 93       	push	r28
    189e:	cd b7       	in	r28, 0x3d	; 61
    18a0:	de b7       	in	r29, 0x3e	; 62
    18a2:	27 97       	sbiw	r28, 0x07	; 7
    18a4:	0f b6       	in	r0, 0x3f	; 63
    18a6:	f8 94       	cli
    18a8:	de bf       	out	0x3e, r29	; 62
    18aa:	0f be       	out	0x3f, r0	; 63
    18ac:	cd bf       	out	0x3d, r28	; 61
    18ae:	89 83       	std	Y+1, r24	; 0x01
    18b0:	6a 83       	std	Y+2, r22	; 0x02
    18b2:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinNum <= MAX_PIN_NUM)
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	88 30       	cpi	r24, 0x08	; 8
    18b8:	08 f0       	brcs	.+2      	; 0x18bc <DIO_voidSetPinDirection+0x22>
    18ba:	ec c0       	rjmp	.+472    	; 0x1a94 <DIO_voidSetPinDirection+0x1fa>
	{
		if(Copy_u8PinDir == PIN_OUT)
    18bc:	8b 81       	ldd	r24, Y+3	; 0x03
    18be:	81 30       	cpi	r24, 0x01	; 1
    18c0:	09 f0       	breq	.+2      	; 0x18c4 <DIO_voidSetPinDirection+0x2a>
    18c2:	70 c0       	rjmp	.+224    	; 0x19a4 <DIO_voidSetPinDirection+0x10a>
		{
			switch(Copy_u8PortNum)
    18c4:	89 81       	ldd	r24, Y+1	; 0x01
    18c6:	28 2f       	mov	r18, r24
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	3f 83       	std	Y+7, r19	; 0x07
    18cc:	2e 83       	std	Y+6, r18	; 0x06
    18ce:	8e 81       	ldd	r24, Y+6	; 0x06
    18d0:	9f 81       	ldd	r25, Y+7	; 0x07
    18d2:	82 30       	cpi	r24, 0x02	; 2
    18d4:	91 05       	cpc	r25, r1
    18d6:	51 f1       	breq	.+84     	; 0x192c <DIO_voidSetPinDirection+0x92>
    18d8:	2e 81       	ldd	r18, Y+6	; 0x06
    18da:	3f 81       	ldd	r19, Y+7	; 0x07
    18dc:	23 30       	cpi	r18, 0x03	; 3
    18de:	31 05       	cpc	r19, r1
    18e0:	34 f4       	brge	.+12     	; 0x18ee <DIO_voidSetPinDirection+0x54>
    18e2:	8e 81       	ldd	r24, Y+6	; 0x06
    18e4:	9f 81       	ldd	r25, Y+7	; 0x07
    18e6:	81 30       	cpi	r24, 0x01	; 1
    18e8:	91 05       	cpc	r25, r1
    18ea:	61 f0       	breq	.+24     	; 0x1904 <DIO_voidSetPinDirection+0x6a>
    18ec:	d3 c0       	rjmp	.+422    	; 0x1a94 <DIO_voidSetPinDirection+0x1fa>
    18ee:	2e 81       	ldd	r18, Y+6	; 0x06
    18f0:	3f 81       	ldd	r19, Y+7	; 0x07
    18f2:	23 30       	cpi	r18, 0x03	; 3
    18f4:	31 05       	cpc	r19, r1
    18f6:	71 f1       	breq	.+92     	; 0x1954 <DIO_voidSetPinDirection+0xba>
    18f8:	8e 81       	ldd	r24, Y+6	; 0x06
    18fa:	9f 81       	ldd	r25, Y+7	; 0x07
    18fc:	84 30       	cpi	r24, 0x04	; 4
    18fe:	91 05       	cpc	r25, r1
    1900:	e9 f1       	breq	.+122    	; 0x197c <DIO_voidSetPinDirection+0xe2>
    1902:	c8 c0       	rjmp	.+400    	; 0x1a94 <DIO_voidSetPinDirection+0x1fa>
			{
				case PORT_u8A:SET_BIT(DDRA,Copy_u8PinNum);break;
    1904:	aa e3       	ldi	r26, 0x3A	; 58
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	ea e3       	ldi	r30, 0x3A	; 58
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	48 2f       	mov	r20, r24
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	28 2f       	mov	r18, r24
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	02 2e       	mov	r0, r18
    191c:	02 c0       	rjmp	.+4      	; 0x1922 <DIO_voidSetPinDirection+0x88>
    191e:	88 0f       	add	r24, r24
    1920:	99 1f       	adc	r25, r25
    1922:	0a 94       	dec	r0
    1924:	e2 f7       	brpl	.-8      	; 0x191e <DIO_voidSetPinDirection+0x84>
    1926:	84 2b       	or	r24, r20
    1928:	8c 93       	st	X, r24
    192a:	b4 c0       	rjmp	.+360    	; 0x1a94 <DIO_voidSetPinDirection+0x1fa>
				case PORT_u8B:SET_BIT(DDRB,Copy_u8PinNum);break;
    192c:	a7 e3       	ldi	r26, 0x37	; 55
    192e:	b0 e0       	ldi	r27, 0x00	; 0
    1930:	e7 e3       	ldi	r30, 0x37	; 55
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	48 2f       	mov	r20, r24
    1938:	8a 81       	ldd	r24, Y+2	; 0x02
    193a:	28 2f       	mov	r18, r24
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	02 2e       	mov	r0, r18
    1944:	02 c0       	rjmp	.+4      	; 0x194a <DIO_voidSetPinDirection+0xb0>
    1946:	88 0f       	add	r24, r24
    1948:	99 1f       	adc	r25, r25
    194a:	0a 94       	dec	r0
    194c:	e2 f7       	brpl	.-8      	; 0x1946 <DIO_voidSetPinDirection+0xac>
    194e:	84 2b       	or	r24, r20
    1950:	8c 93       	st	X, r24
    1952:	a0 c0       	rjmp	.+320    	; 0x1a94 <DIO_voidSetPinDirection+0x1fa>
				case PORT_u8C:SET_BIT(DDRC,Copy_u8PinNum);break;
    1954:	a4 e3       	ldi	r26, 0x34	; 52
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	e4 e3       	ldi	r30, 0x34	; 52
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	48 2f       	mov	r20, r24
    1960:	8a 81       	ldd	r24, Y+2	; 0x02
    1962:	28 2f       	mov	r18, r24
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	02 2e       	mov	r0, r18
    196c:	02 c0       	rjmp	.+4      	; 0x1972 <DIO_voidSetPinDirection+0xd8>
    196e:	88 0f       	add	r24, r24
    1970:	99 1f       	adc	r25, r25
    1972:	0a 94       	dec	r0
    1974:	e2 f7       	brpl	.-8      	; 0x196e <DIO_voidSetPinDirection+0xd4>
    1976:	84 2b       	or	r24, r20
    1978:	8c 93       	st	X, r24
    197a:	8c c0       	rjmp	.+280    	; 0x1a94 <DIO_voidSetPinDirection+0x1fa>
				case PORT_u8D:SET_BIT(DDRD,Copy_u8PinNum);break;
    197c:	a1 e3       	ldi	r26, 0x31	; 49
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	e1 e3       	ldi	r30, 0x31	; 49
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	48 2f       	mov	r20, r24
    1988:	8a 81       	ldd	r24, Y+2	; 0x02
    198a:	28 2f       	mov	r18, r24
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	02 2e       	mov	r0, r18
    1994:	02 c0       	rjmp	.+4      	; 0x199a <DIO_voidSetPinDirection+0x100>
    1996:	88 0f       	add	r24, r24
    1998:	99 1f       	adc	r25, r25
    199a:	0a 94       	dec	r0
    199c:	e2 f7       	brpl	.-8      	; 0x1996 <DIO_voidSetPinDirection+0xfc>
    199e:	84 2b       	or	r24, r20
    19a0:	8c 93       	st	X, r24
    19a2:	78 c0       	rjmp	.+240    	; 0x1a94 <DIO_voidSetPinDirection+0x1fa>
			}
		}
		else if(Copy_u8PinDir == PIN_IN)
    19a4:	8b 81       	ldd	r24, Y+3	; 0x03
    19a6:	88 23       	and	r24, r24
    19a8:	09 f0       	breq	.+2      	; 0x19ac <DIO_voidSetPinDirection+0x112>
    19aa:	74 c0       	rjmp	.+232    	; 0x1a94 <DIO_voidSetPinDirection+0x1fa>
		{
			switch(Copy_u8PortNum)
    19ac:	89 81       	ldd	r24, Y+1	; 0x01
    19ae:	28 2f       	mov	r18, r24
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	3d 83       	std	Y+5, r19	; 0x05
    19b4:	2c 83       	std	Y+4, r18	; 0x04
    19b6:	8c 81       	ldd	r24, Y+4	; 0x04
    19b8:	9d 81       	ldd	r25, Y+5	; 0x05
    19ba:	82 30       	cpi	r24, 0x02	; 2
    19bc:	91 05       	cpc	r25, r1
    19be:	61 f1       	breq	.+88     	; 0x1a18 <DIO_voidSetPinDirection+0x17e>
    19c0:	2c 81       	ldd	r18, Y+4	; 0x04
    19c2:	3d 81       	ldd	r19, Y+5	; 0x05
    19c4:	23 30       	cpi	r18, 0x03	; 3
    19c6:	31 05       	cpc	r19, r1
    19c8:	34 f4       	brge	.+12     	; 0x19d6 <DIO_voidSetPinDirection+0x13c>
    19ca:	8c 81       	ldd	r24, Y+4	; 0x04
    19cc:	9d 81       	ldd	r25, Y+5	; 0x05
    19ce:	81 30       	cpi	r24, 0x01	; 1
    19d0:	91 05       	cpc	r25, r1
    19d2:	69 f0       	breq	.+26     	; 0x19ee <DIO_voidSetPinDirection+0x154>
    19d4:	5f c0       	rjmp	.+190    	; 0x1a94 <DIO_voidSetPinDirection+0x1fa>
    19d6:	2c 81       	ldd	r18, Y+4	; 0x04
    19d8:	3d 81       	ldd	r19, Y+5	; 0x05
    19da:	23 30       	cpi	r18, 0x03	; 3
    19dc:	31 05       	cpc	r19, r1
    19de:	89 f1       	breq	.+98     	; 0x1a42 <DIO_voidSetPinDirection+0x1a8>
    19e0:	8c 81       	ldd	r24, Y+4	; 0x04
    19e2:	9d 81       	ldd	r25, Y+5	; 0x05
    19e4:	84 30       	cpi	r24, 0x04	; 4
    19e6:	91 05       	cpc	r25, r1
    19e8:	09 f4       	brne	.+2      	; 0x19ec <DIO_voidSetPinDirection+0x152>
    19ea:	40 c0       	rjmp	.+128    	; 0x1a6c <DIO_voidSetPinDirection+0x1d2>
    19ec:	53 c0       	rjmp	.+166    	; 0x1a94 <DIO_voidSetPinDirection+0x1fa>
			{
				case PORT_u8A:CLR_BIT(DDRA,Copy_u8PinNum);break;
    19ee:	aa e3       	ldi	r26, 0x3A	; 58
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	ea e3       	ldi	r30, 0x3A	; 58
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	48 2f       	mov	r20, r24
    19fa:	8a 81       	ldd	r24, Y+2	; 0x02
    19fc:	28 2f       	mov	r18, r24
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	02 2e       	mov	r0, r18
    1a06:	02 c0       	rjmp	.+4      	; 0x1a0c <DIO_voidSetPinDirection+0x172>
    1a08:	88 0f       	add	r24, r24
    1a0a:	99 1f       	adc	r25, r25
    1a0c:	0a 94       	dec	r0
    1a0e:	e2 f7       	brpl	.-8      	; 0x1a08 <DIO_voidSetPinDirection+0x16e>
    1a10:	80 95       	com	r24
    1a12:	84 23       	and	r24, r20
    1a14:	8c 93       	st	X, r24
    1a16:	3e c0       	rjmp	.+124    	; 0x1a94 <DIO_voidSetPinDirection+0x1fa>
				case PORT_u8B:CLR_BIT(DDRB,Copy_u8PinNum);break;
    1a18:	a7 e3       	ldi	r26, 0x37	; 55
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	e7 e3       	ldi	r30, 0x37	; 55
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	48 2f       	mov	r20, r24
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	28 2f       	mov	r18, r24
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	02 2e       	mov	r0, r18
    1a30:	02 c0       	rjmp	.+4      	; 0x1a36 <DIO_voidSetPinDirection+0x19c>
    1a32:	88 0f       	add	r24, r24
    1a34:	99 1f       	adc	r25, r25
    1a36:	0a 94       	dec	r0
    1a38:	e2 f7       	brpl	.-8      	; 0x1a32 <DIO_voidSetPinDirection+0x198>
    1a3a:	80 95       	com	r24
    1a3c:	84 23       	and	r24, r20
    1a3e:	8c 93       	st	X, r24
    1a40:	29 c0       	rjmp	.+82     	; 0x1a94 <DIO_voidSetPinDirection+0x1fa>
				case PORT_u8C:CLR_BIT(DDRC,Copy_u8PinNum);break;
    1a42:	a4 e3       	ldi	r26, 0x34	; 52
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	e4 e3       	ldi	r30, 0x34	; 52
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	48 2f       	mov	r20, r24
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	28 2f       	mov	r18, r24
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	02 2e       	mov	r0, r18
    1a5a:	02 c0       	rjmp	.+4      	; 0x1a60 <DIO_voidSetPinDirection+0x1c6>
    1a5c:	88 0f       	add	r24, r24
    1a5e:	99 1f       	adc	r25, r25
    1a60:	0a 94       	dec	r0
    1a62:	e2 f7       	brpl	.-8      	; 0x1a5c <DIO_voidSetPinDirection+0x1c2>
    1a64:	80 95       	com	r24
    1a66:	84 23       	and	r24, r20
    1a68:	8c 93       	st	X, r24
    1a6a:	14 c0       	rjmp	.+40     	; 0x1a94 <DIO_voidSetPinDirection+0x1fa>
				case PORT_u8D:CLR_BIT(DDRD,Copy_u8PinNum);break;
    1a6c:	a1 e3       	ldi	r26, 0x31	; 49
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	e1 e3       	ldi	r30, 0x31	; 49
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	48 2f       	mov	r20, r24
    1a78:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7a:	28 2f       	mov	r18, r24
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	02 2e       	mov	r0, r18
    1a84:	02 c0       	rjmp	.+4      	; 0x1a8a <DIO_voidSetPinDirection+0x1f0>
    1a86:	88 0f       	add	r24, r24
    1a88:	99 1f       	adc	r25, r25
    1a8a:	0a 94       	dec	r0
    1a8c:	e2 f7       	brpl	.-8      	; 0x1a86 <DIO_voidSetPinDirection+0x1ec>
    1a8e:	80 95       	com	r24
    1a90:	84 23       	and	r24, r20
    1a92:	8c 93       	st	X, r24
			}
		}
	}	
}
    1a94:	27 96       	adiw	r28, 0x07	; 7
    1a96:	0f b6       	in	r0, 0x3f	; 63
    1a98:	f8 94       	cli
    1a9a:	de bf       	out	0x3e, r29	; 62
    1a9c:	0f be       	out	0x3f, r0	; 63
    1a9e:	cd bf       	out	0x3d, r28	; 61
    1aa0:	cf 91       	pop	r28
    1aa2:	df 91       	pop	r29
    1aa4:	08 95       	ret

00001aa6 <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 Copy_u8PortNum,u8 Copy_u8PinNum,u8 Copy_u8PinValue)
{
    1aa6:	df 93       	push	r29
    1aa8:	cf 93       	push	r28
    1aaa:	cd b7       	in	r28, 0x3d	; 61
    1aac:	de b7       	in	r29, 0x3e	; 62
    1aae:	27 97       	sbiw	r28, 0x07	; 7
    1ab0:	0f b6       	in	r0, 0x3f	; 63
    1ab2:	f8 94       	cli
    1ab4:	de bf       	out	0x3e, r29	; 62
    1ab6:	0f be       	out	0x3f, r0	; 63
    1ab8:	cd bf       	out	0x3d, r28	; 61
    1aba:	89 83       	std	Y+1, r24	; 0x01
    1abc:	6a 83       	std	Y+2, r22	; 0x02
    1abe:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinNum <= MAX_PIN_NUM)
    1ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac2:	88 30       	cpi	r24, 0x08	; 8
    1ac4:	08 f0       	brcs	.+2      	; 0x1ac8 <DIO_voidSetPinValue+0x22>
    1ac6:	ec c0       	rjmp	.+472    	; 0x1ca0 <DIO_voidSetPinValue+0x1fa>
	{
		if(Copy_u8PinValue == PIN_HIGH)
    1ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aca:	81 30       	cpi	r24, 0x01	; 1
    1acc:	09 f0       	breq	.+2      	; 0x1ad0 <DIO_voidSetPinValue+0x2a>
    1ace:	70 c0       	rjmp	.+224    	; 0x1bb0 <DIO_voidSetPinValue+0x10a>
		{
			switch(Copy_u8PortNum)
    1ad0:	89 81       	ldd	r24, Y+1	; 0x01
    1ad2:	28 2f       	mov	r18, r24
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	3f 83       	std	Y+7, r19	; 0x07
    1ad8:	2e 83       	std	Y+6, r18	; 0x06
    1ada:	8e 81       	ldd	r24, Y+6	; 0x06
    1adc:	9f 81       	ldd	r25, Y+7	; 0x07
    1ade:	82 30       	cpi	r24, 0x02	; 2
    1ae0:	91 05       	cpc	r25, r1
    1ae2:	51 f1       	breq	.+84     	; 0x1b38 <DIO_voidSetPinValue+0x92>
    1ae4:	2e 81       	ldd	r18, Y+6	; 0x06
    1ae6:	3f 81       	ldd	r19, Y+7	; 0x07
    1ae8:	23 30       	cpi	r18, 0x03	; 3
    1aea:	31 05       	cpc	r19, r1
    1aec:	34 f4       	brge	.+12     	; 0x1afa <DIO_voidSetPinValue+0x54>
    1aee:	8e 81       	ldd	r24, Y+6	; 0x06
    1af0:	9f 81       	ldd	r25, Y+7	; 0x07
    1af2:	81 30       	cpi	r24, 0x01	; 1
    1af4:	91 05       	cpc	r25, r1
    1af6:	61 f0       	breq	.+24     	; 0x1b10 <DIO_voidSetPinValue+0x6a>
    1af8:	d3 c0       	rjmp	.+422    	; 0x1ca0 <DIO_voidSetPinValue+0x1fa>
    1afa:	2e 81       	ldd	r18, Y+6	; 0x06
    1afc:	3f 81       	ldd	r19, Y+7	; 0x07
    1afe:	23 30       	cpi	r18, 0x03	; 3
    1b00:	31 05       	cpc	r19, r1
    1b02:	71 f1       	breq	.+92     	; 0x1b60 <DIO_voidSetPinValue+0xba>
    1b04:	8e 81       	ldd	r24, Y+6	; 0x06
    1b06:	9f 81       	ldd	r25, Y+7	; 0x07
    1b08:	84 30       	cpi	r24, 0x04	; 4
    1b0a:	91 05       	cpc	r25, r1
    1b0c:	e9 f1       	breq	.+122    	; 0x1b88 <DIO_voidSetPinValue+0xe2>
    1b0e:	c8 c0       	rjmp	.+400    	; 0x1ca0 <DIO_voidSetPinValue+0x1fa>
			{
				case PORT_u8A:SET_BIT(PORTA,Copy_u8PinNum);break;
    1b10:	ab e3       	ldi	r26, 0x3B	; 59
    1b12:	b0 e0       	ldi	r27, 0x00	; 0
    1b14:	eb e3       	ldi	r30, 0x3B	; 59
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	48 2f       	mov	r20, r24
    1b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1e:	28 2f       	mov	r18, r24
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	02 2e       	mov	r0, r18
    1b28:	02 c0       	rjmp	.+4      	; 0x1b2e <DIO_voidSetPinValue+0x88>
    1b2a:	88 0f       	add	r24, r24
    1b2c:	99 1f       	adc	r25, r25
    1b2e:	0a 94       	dec	r0
    1b30:	e2 f7       	brpl	.-8      	; 0x1b2a <DIO_voidSetPinValue+0x84>
    1b32:	84 2b       	or	r24, r20
    1b34:	8c 93       	st	X, r24
    1b36:	b4 c0       	rjmp	.+360    	; 0x1ca0 <DIO_voidSetPinValue+0x1fa>
				case PORT_u8B:SET_BIT(PORTB,Copy_u8PinNum);break;
    1b38:	a8 e3       	ldi	r26, 0x38	; 56
    1b3a:	b0 e0       	ldi	r27, 0x00	; 0
    1b3c:	e8 e3       	ldi	r30, 0x38	; 56
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	80 81       	ld	r24, Z
    1b42:	48 2f       	mov	r20, r24
    1b44:	8a 81       	ldd	r24, Y+2	; 0x02
    1b46:	28 2f       	mov	r18, r24
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	02 2e       	mov	r0, r18
    1b50:	02 c0       	rjmp	.+4      	; 0x1b56 <DIO_voidSetPinValue+0xb0>
    1b52:	88 0f       	add	r24, r24
    1b54:	99 1f       	adc	r25, r25
    1b56:	0a 94       	dec	r0
    1b58:	e2 f7       	brpl	.-8      	; 0x1b52 <DIO_voidSetPinValue+0xac>
    1b5a:	84 2b       	or	r24, r20
    1b5c:	8c 93       	st	X, r24
    1b5e:	a0 c0       	rjmp	.+320    	; 0x1ca0 <DIO_voidSetPinValue+0x1fa>
				case PORT_u8C:SET_BIT(PORTC,Copy_u8PinNum);break;
    1b60:	a5 e3       	ldi	r26, 0x35	; 53
    1b62:	b0 e0       	ldi	r27, 0x00	; 0
    1b64:	e5 e3       	ldi	r30, 0x35	; 53
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	48 2f       	mov	r20, r24
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	28 2f       	mov	r18, r24
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	02 2e       	mov	r0, r18
    1b78:	02 c0       	rjmp	.+4      	; 0x1b7e <DIO_voidSetPinValue+0xd8>
    1b7a:	88 0f       	add	r24, r24
    1b7c:	99 1f       	adc	r25, r25
    1b7e:	0a 94       	dec	r0
    1b80:	e2 f7       	brpl	.-8      	; 0x1b7a <DIO_voidSetPinValue+0xd4>
    1b82:	84 2b       	or	r24, r20
    1b84:	8c 93       	st	X, r24
    1b86:	8c c0       	rjmp	.+280    	; 0x1ca0 <DIO_voidSetPinValue+0x1fa>
				case PORT_u8D:SET_BIT(PORTD,Copy_u8PinNum);break;
    1b88:	a2 e3       	ldi	r26, 0x32	; 50
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	e2 e3       	ldi	r30, 0x32	; 50
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	48 2f       	mov	r20, r24
    1b94:	8a 81       	ldd	r24, Y+2	; 0x02
    1b96:	28 2f       	mov	r18, r24
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	02 2e       	mov	r0, r18
    1ba0:	02 c0       	rjmp	.+4      	; 0x1ba6 <DIO_voidSetPinValue+0x100>
    1ba2:	88 0f       	add	r24, r24
    1ba4:	99 1f       	adc	r25, r25
    1ba6:	0a 94       	dec	r0
    1ba8:	e2 f7       	brpl	.-8      	; 0x1ba2 <DIO_voidSetPinValue+0xfc>
    1baa:	84 2b       	or	r24, r20
    1bac:	8c 93       	st	X, r24
    1bae:	78 c0       	rjmp	.+240    	; 0x1ca0 <DIO_voidSetPinValue+0x1fa>
			}
		}
		else if(Copy_u8PinValue == PIN_LOW)
    1bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb2:	88 23       	and	r24, r24
    1bb4:	09 f0       	breq	.+2      	; 0x1bb8 <DIO_voidSetPinValue+0x112>
    1bb6:	74 c0       	rjmp	.+232    	; 0x1ca0 <DIO_voidSetPinValue+0x1fa>
		{
			switch(Copy_u8PortNum)
    1bb8:	89 81       	ldd	r24, Y+1	; 0x01
    1bba:	28 2f       	mov	r18, r24
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	3d 83       	std	Y+5, r19	; 0x05
    1bc0:	2c 83       	std	Y+4, r18	; 0x04
    1bc2:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc4:	9d 81       	ldd	r25, Y+5	; 0x05
    1bc6:	82 30       	cpi	r24, 0x02	; 2
    1bc8:	91 05       	cpc	r25, r1
    1bca:	61 f1       	breq	.+88     	; 0x1c24 <DIO_voidSetPinValue+0x17e>
    1bcc:	2c 81       	ldd	r18, Y+4	; 0x04
    1bce:	3d 81       	ldd	r19, Y+5	; 0x05
    1bd0:	23 30       	cpi	r18, 0x03	; 3
    1bd2:	31 05       	cpc	r19, r1
    1bd4:	34 f4       	brge	.+12     	; 0x1be2 <DIO_voidSetPinValue+0x13c>
    1bd6:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd8:	9d 81       	ldd	r25, Y+5	; 0x05
    1bda:	81 30       	cpi	r24, 0x01	; 1
    1bdc:	91 05       	cpc	r25, r1
    1bde:	69 f0       	breq	.+26     	; 0x1bfa <DIO_voidSetPinValue+0x154>
    1be0:	5f c0       	rjmp	.+190    	; 0x1ca0 <DIO_voidSetPinValue+0x1fa>
    1be2:	2c 81       	ldd	r18, Y+4	; 0x04
    1be4:	3d 81       	ldd	r19, Y+5	; 0x05
    1be6:	23 30       	cpi	r18, 0x03	; 3
    1be8:	31 05       	cpc	r19, r1
    1bea:	89 f1       	breq	.+98     	; 0x1c4e <DIO_voidSetPinValue+0x1a8>
    1bec:	8c 81       	ldd	r24, Y+4	; 0x04
    1bee:	9d 81       	ldd	r25, Y+5	; 0x05
    1bf0:	84 30       	cpi	r24, 0x04	; 4
    1bf2:	91 05       	cpc	r25, r1
    1bf4:	09 f4       	brne	.+2      	; 0x1bf8 <DIO_voidSetPinValue+0x152>
    1bf6:	40 c0       	rjmp	.+128    	; 0x1c78 <DIO_voidSetPinValue+0x1d2>
    1bf8:	53 c0       	rjmp	.+166    	; 0x1ca0 <DIO_voidSetPinValue+0x1fa>
			{
				case PORT_u8A:CLR_BIT(PORTA,Copy_u8PinNum);break;
    1bfa:	ab e3       	ldi	r26, 0x3B	; 59
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	eb e3       	ldi	r30, 0x3B	; 59
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	48 2f       	mov	r20, r24
    1c06:	8a 81       	ldd	r24, Y+2	; 0x02
    1c08:	28 2f       	mov	r18, r24
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	02 2e       	mov	r0, r18
    1c12:	02 c0       	rjmp	.+4      	; 0x1c18 <DIO_voidSetPinValue+0x172>
    1c14:	88 0f       	add	r24, r24
    1c16:	99 1f       	adc	r25, r25
    1c18:	0a 94       	dec	r0
    1c1a:	e2 f7       	brpl	.-8      	; 0x1c14 <DIO_voidSetPinValue+0x16e>
    1c1c:	80 95       	com	r24
    1c1e:	84 23       	and	r24, r20
    1c20:	8c 93       	st	X, r24
    1c22:	3e c0       	rjmp	.+124    	; 0x1ca0 <DIO_voidSetPinValue+0x1fa>
				case PORT_u8B:CLR_BIT(PORTB,Copy_u8PinNum);break;
    1c24:	a8 e3       	ldi	r26, 0x38	; 56
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	e8 e3       	ldi	r30, 0x38	; 56
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	48 2f       	mov	r20, r24
    1c30:	8a 81       	ldd	r24, Y+2	; 0x02
    1c32:	28 2f       	mov	r18, r24
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	02 2e       	mov	r0, r18
    1c3c:	02 c0       	rjmp	.+4      	; 0x1c42 <DIO_voidSetPinValue+0x19c>
    1c3e:	88 0f       	add	r24, r24
    1c40:	99 1f       	adc	r25, r25
    1c42:	0a 94       	dec	r0
    1c44:	e2 f7       	brpl	.-8      	; 0x1c3e <DIO_voidSetPinValue+0x198>
    1c46:	80 95       	com	r24
    1c48:	84 23       	and	r24, r20
    1c4a:	8c 93       	st	X, r24
    1c4c:	29 c0       	rjmp	.+82     	; 0x1ca0 <DIO_voidSetPinValue+0x1fa>
				case PORT_u8C:CLR_BIT(PORTC,Copy_u8PinNum);break;
    1c4e:	a5 e3       	ldi	r26, 0x35	; 53
    1c50:	b0 e0       	ldi	r27, 0x00	; 0
    1c52:	e5 e3       	ldi	r30, 0x35	; 53
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	80 81       	ld	r24, Z
    1c58:	48 2f       	mov	r20, r24
    1c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5c:	28 2f       	mov	r18, r24
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	02 2e       	mov	r0, r18
    1c66:	02 c0       	rjmp	.+4      	; 0x1c6c <DIO_voidSetPinValue+0x1c6>
    1c68:	88 0f       	add	r24, r24
    1c6a:	99 1f       	adc	r25, r25
    1c6c:	0a 94       	dec	r0
    1c6e:	e2 f7       	brpl	.-8      	; 0x1c68 <DIO_voidSetPinValue+0x1c2>
    1c70:	80 95       	com	r24
    1c72:	84 23       	and	r24, r20
    1c74:	8c 93       	st	X, r24
    1c76:	14 c0       	rjmp	.+40     	; 0x1ca0 <DIO_voidSetPinValue+0x1fa>
				case PORT_u8D:CLR_BIT(PORTD,Copy_u8PinNum);break;
    1c78:	a2 e3       	ldi	r26, 0x32	; 50
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
    1c7c:	e2 e3       	ldi	r30, 0x32	; 50
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	48 2f       	mov	r20, r24
    1c84:	8a 81       	ldd	r24, Y+2	; 0x02
    1c86:	28 2f       	mov	r18, r24
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	02 2e       	mov	r0, r18
    1c90:	02 c0       	rjmp	.+4      	; 0x1c96 <DIO_voidSetPinValue+0x1f0>
    1c92:	88 0f       	add	r24, r24
    1c94:	99 1f       	adc	r25, r25
    1c96:	0a 94       	dec	r0
    1c98:	e2 f7       	brpl	.-8      	; 0x1c92 <DIO_voidSetPinValue+0x1ec>
    1c9a:	80 95       	com	r24
    1c9c:	84 23       	and	r24, r20
    1c9e:	8c 93       	st	X, r24
			}
		}
	}	
}
    1ca0:	27 96       	adiw	r28, 0x07	; 7
    1ca2:	0f b6       	in	r0, 0x3f	; 63
    1ca4:	f8 94       	cli
    1ca6:	de bf       	out	0x3e, r29	; 62
    1ca8:	0f be       	out	0x3f, r0	; 63
    1caa:	cd bf       	out	0x3d, r28	; 61
    1cac:	cf 91       	pop	r28
    1cae:	df 91       	pop	r29
    1cb0:	08 95       	ret

00001cb2 <DIO_u8GetPinValue>:


u8 DIO_u8GetPinValue(u8 Copy_u8PortNum,u8 Copy_u8PinNum)
{
    1cb2:	df 93       	push	r29
    1cb4:	cf 93       	push	r28
    1cb6:	00 d0       	rcall	.+0      	; 0x1cb8 <DIO_u8GetPinValue+0x6>
    1cb8:	00 d0       	rcall	.+0      	; 0x1cba <DIO_u8GetPinValue+0x8>
    1cba:	0f 92       	push	r0
    1cbc:	cd b7       	in	r28, 0x3d	; 61
    1cbe:	de b7       	in	r29, 0x3e	; 62
    1cc0:	8a 83       	std	Y+2, r24	; 0x02
    1cc2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8PinState=0;
    1cc4:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8PortNum)
    1cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc8:	28 2f       	mov	r18, r24
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	3d 83       	std	Y+5, r19	; 0x05
    1cce:	2c 83       	std	Y+4, r18	; 0x04
    1cd0:	4c 81       	ldd	r20, Y+4	; 0x04
    1cd2:	5d 81       	ldd	r21, Y+5	; 0x05
    1cd4:	42 30       	cpi	r20, 0x02	; 2
    1cd6:	51 05       	cpc	r21, r1
    1cd8:	41 f1       	breq	.+80     	; 0x1d2a <DIO_u8GetPinValue+0x78>
    1cda:	8c 81       	ldd	r24, Y+4	; 0x04
    1cdc:	9d 81       	ldd	r25, Y+5	; 0x05
    1cde:	83 30       	cpi	r24, 0x03	; 3
    1ce0:	91 05       	cpc	r25, r1
    1ce2:	34 f4       	brge	.+12     	; 0x1cf0 <DIO_u8GetPinValue+0x3e>
    1ce4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ce6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ce8:	21 30       	cpi	r18, 0x01	; 1
    1cea:	31 05       	cpc	r19, r1
    1cec:	61 f0       	breq	.+24     	; 0x1d06 <DIO_u8GetPinValue+0x54>
    1cee:	52 c0       	rjmp	.+164    	; 0x1d94 <DIO_u8GetPinValue+0xe2>
    1cf0:	4c 81       	ldd	r20, Y+4	; 0x04
    1cf2:	5d 81       	ldd	r21, Y+5	; 0x05
    1cf4:	43 30       	cpi	r20, 0x03	; 3
    1cf6:	51 05       	cpc	r21, r1
    1cf8:	51 f1       	breq	.+84     	; 0x1d4e <DIO_u8GetPinValue+0x9c>
    1cfa:	8c 81       	ldd	r24, Y+4	; 0x04
    1cfc:	9d 81       	ldd	r25, Y+5	; 0x05
    1cfe:	84 30       	cpi	r24, 0x04	; 4
    1d00:	91 05       	cpc	r25, r1
    1d02:	b9 f1       	breq	.+110    	; 0x1d72 <DIO_u8GetPinValue+0xc0>
    1d04:	47 c0       	rjmp	.+142    	; 0x1d94 <DIO_u8GetPinValue+0xe2>
	{
		case PORT_u8A:Local_u8PinState=GET_BIT(PINA,Copy_u8PinNum);break;
    1d06:	e9 e3       	ldi	r30, 0x39	; 57
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	80 81       	ld	r24, Z
    1d0c:	28 2f       	mov	r18, r24
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	8b 81       	ldd	r24, Y+3	; 0x03
    1d12:	88 2f       	mov	r24, r24
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	a9 01       	movw	r20, r18
    1d18:	02 c0       	rjmp	.+4      	; 0x1d1e <DIO_u8GetPinValue+0x6c>
    1d1a:	55 95       	asr	r21
    1d1c:	47 95       	ror	r20
    1d1e:	8a 95       	dec	r24
    1d20:	e2 f7       	brpl	.-8      	; 0x1d1a <DIO_u8GetPinValue+0x68>
    1d22:	ca 01       	movw	r24, r20
    1d24:	81 70       	andi	r24, 0x01	; 1
    1d26:	89 83       	std	Y+1, r24	; 0x01
    1d28:	35 c0       	rjmp	.+106    	; 0x1d94 <DIO_u8GetPinValue+0xe2>
		case PORT_u8B:Local_u8PinState=GET_BIT(PINB,Copy_u8PinNum);break;
    1d2a:	e6 e3       	ldi	r30, 0x36	; 54
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	28 2f       	mov	r18, r24
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	8b 81       	ldd	r24, Y+3	; 0x03
    1d36:	88 2f       	mov	r24, r24
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	a9 01       	movw	r20, r18
    1d3c:	02 c0       	rjmp	.+4      	; 0x1d42 <DIO_u8GetPinValue+0x90>
    1d3e:	55 95       	asr	r21
    1d40:	47 95       	ror	r20
    1d42:	8a 95       	dec	r24
    1d44:	e2 f7       	brpl	.-8      	; 0x1d3e <DIO_u8GetPinValue+0x8c>
    1d46:	ca 01       	movw	r24, r20
    1d48:	81 70       	andi	r24, 0x01	; 1
    1d4a:	89 83       	std	Y+1, r24	; 0x01
    1d4c:	23 c0       	rjmp	.+70     	; 0x1d94 <DIO_u8GetPinValue+0xe2>
		case PORT_u8C:Local_u8PinState=GET_BIT(PINC,Copy_u8PinNum);break;
    1d4e:	e3 e3       	ldi	r30, 0x33	; 51
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	80 81       	ld	r24, Z
    1d54:	28 2f       	mov	r18, r24
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5a:	88 2f       	mov	r24, r24
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	a9 01       	movw	r20, r18
    1d60:	02 c0       	rjmp	.+4      	; 0x1d66 <DIO_u8GetPinValue+0xb4>
    1d62:	55 95       	asr	r21
    1d64:	47 95       	ror	r20
    1d66:	8a 95       	dec	r24
    1d68:	e2 f7       	brpl	.-8      	; 0x1d62 <DIO_u8GetPinValue+0xb0>
    1d6a:	ca 01       	movw	r24, r20
    1d6c:	81 70       	andi	r24, 0x01	; 1
    1d6e:	89 83       	std	Y+1, r24	; 0x01
    1d70:	11 c0       	rjmp	.+34     	; 0x1d94 <DIO_u8GetPinValue+0xe2>
		case PORT_u8D:Local_u8PinState=GET_BIT(PIND,Copy_u8PinNum);break;
    1d72:	e0 e3       	ldi	r30, 0x30	; 48
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	28 2f       	mov	r18, r24
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7e:	88 2f       	mov	r24, r24
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	a9 01       	movw	r20, r18
    1d84:	02 c0       	rjmp	.+4      	; 0x1d8a <DIO_u8GetPinValue+0xd8>
    1d86:	55 95       	asr	r21
    1d88:	47 95       	ror	r20
    1d8a:	8a 95       	dec	r24
    1d8c:	e2 f7       	brpl	.-8      	; 0x1d86 <DIO_u8GetPinValue+0xd4>
    1d8e:	ca 01       	movw	r24, r20
    1d90:	81 70       	andi	r24, 0x01	; 1
    1d92:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8PinState;
    1d94:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d96:	0f 90       	pop	r0
    1d98:	0f 90       	pop	r0
    1d9a:	0f 90       	pop	r0
    1d9c:	0f 90       	pop	r0
    1d9e:	0f 90       	pop	r0
    1da0:	cf 91       	pop	r28
    1da2:	df 91       	pop	r29
    1da4:	08 95       	ret

00001da6 <DIO_voidTogglePinValue>:
void DIO_voidTogglePinValue(u8 Copy_u8PortNum , u8 Copy_u8PinNum)
{
    1da6:	df 93       	push	r29
    1da8:	cf 93       	push	r28
    1daa:	00 d0       	rcall	.+0      	; 0x1dac <DIO_voidTogglePinValue+0x6>
    1dac:	00 d0       	rcall	.+0      	; 0x1dae <DIO_voidTogglePinValue+0x8>
    1dae:	cd b7       	in	r28, 0x3d	; 61
    1db0:	de b7       	in	r29, 0x3e	; 62
    1db2:	89 83       	std	Y+1, r24	; 0x01
    1db4:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PinNum < MAX_PIN_NUM)
    1db6:	8a 81       	ldd	r24, Y+2	; 0x02
    1db8:	87 30       	cpi	r24, 0x07	; 7
    1dba:	08 f0       	brcs	.+2      	; 0x1dbe <DIO_voidTogglePinValue+0x18>
    1dbc:	6f c0       	rjmp	.+222    	; 0x1e9c <DIO_voidTogglePinValue+0xf6>
	{
		switch(Copy_u8PortNum)
    1dbe:	89 81       	ldd	r24, Y+1	; 0x01
    1dc0:	28 2f       	mov	r18, r24
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	3c 83       	std	Y+4, r19	; 0x04
    1dc6:	2b 83       	std	Y+3, r18	; 0x03
    1dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dca:	9c 81       	ldd	r25, Y+4	; 0x04
    1dcc:	82 30       	cpi	r24, 0x02	; 2
    1dce:	91 05       	cpc	r25, r1
    1dd0:	51 f1       	breq	.+84     	; 0x1e26 <DIO_voidTogglePinValue+0x80>
    1dd2:	2b 81       	ldd	r18, Y+3	; 0x03
    1dd4:	3c 81       	ldd	r19, Y+4	; 0x04
    1dd6:	23 30       	cpi	r18, 0x03	; 3
    1dd8:	31 05       	cpc	r19, r1
    1dda:	34 f4       	brge	.+12     	; 0x1de8 <DIO_voidTogglePinValue+0x42>
    1ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dde:	9c 81       	ldd	r25, Y+4	; 0x04
    1de0:	81 30       	cpi	r24, 0x01	; 1
    1de2:	91 05       	cpc	r25, r1
    1de4:	61 f0       	breq	.+24     	; 0x1dfe <DIO_voidTogglePinValue+0x58>
    1de6:	5a c0       	rjmp	.+180    	; 0x1e9c <DIO_voidTogglePinValue+0xf6>
    1de8:	2b 81       	ldd	r18, Y+3	; 0x03
    1dea:	3c 81       	ldd	r19, Y+4	; 0x04
    1dec:	23 30       	cpi	r18, 0x03	; 3
    1dee:	31 05       	cpc	r19, r1
    1df0:	71 f1       	breq	.+92     	; 0x1e4e <DIO_voidTogglePinValue+0xa8>
    1df2:	8b 81       	ldd	r24, Y+3	; 0x03
    1df4:	9c 81       	ldd	r25, Y+4	; 0x04
    1df6:	84 30       	cpi	r24, 0x04	; 4
    1df8:	91 05       	cpc	r25, r1
    1dfa:	e9 f1       	breq	.+122    	; 0x1e76 <DIO_voidTogglePinValue+0xd0>
    1dfc:	4f c0       	rjmp	.+158    	; 0x1e9c <DIO_voidTogglePinValue+0xf6>
	        {
		        case PORT_u8A:TOG_BIT(PORTA,Copy_u8PinNum);break;
    1dfe:	ab e3       	ldi	r26, 0x3B	; 59
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	eb e3       	ldi	r30, 0x3B	; 59
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	80 81       	ld	r24, Z
    1e08:	48 2f       	mov	r20, r24
    1e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0c:	28 2f       	mov	r18, r24
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	02 2e       	mov	r0, r18
    1e16:	02 c0       	rjmp	.+4      	; 0x1e1c <DIO_voidTogglePinValue+0x76>
    1e18:	88 0f       	add	r24, r24
    1e1a:	99 1f       	adc	r25, r25
    1e1c:	0a 94       	dec	r0
    1e1e:	e2 f7       	brpl	.-8      	; 0x1e18 <DIO_voidTogglePinValue+0x72>
    1e20:	84 27       	eor	r24, r20
    1e22:	8c 93       	st	X, r24
    1e24:	3b c0       	rjmp	.+118    	; 0x1e9c <DIO_voidTogglePinValue+0xf6>
		        case PORT_u8B:TOG_BIT(PORTB,Copy_u8PinNum);break;
    1e26:	a8 e3       	ldi	r26, 0x38	; 56
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	e8 e3       	ldi	r30, 0x38	; 56
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z
    1e30:	48 2f       	mov	r20, r24
    1e32:	8a 81       	ldd	r24, Y+2	; 0x02
    1e34:	28 2f       	mov	r18, r24
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	02 2e       	mov	r0, r18
    1e3e:	02 c0       	rjmp	.+4      	; 0x1e44 <DIO_voidTogglePinValue+0x9e>
    1e40:	88 0f       	add	r24, r24
    1e42:	99 1f       	adc	r25, r25
    1e44:	0a 94       	dec	r0
    1e46:	e2 f7       	brpl	.-8      	; 0x1e40 <DIO_voidTogglePinValue+0x9a>
    1e48:	84 27       	eor	r24, r20
    1e4a:	8c 93       	st	X, r24
    1e4c:	27 c0       	rjmp	.+78     	; 0x1e9c <DIO_voidTogglePinValue+0xf6>
		        case PORT_u8C:TOG_BIT(PORTC,Copy_u8PinNum);break;
    1e4e:	a5 e3       	ldi	r26, 0x35	; 53
    1e50:	b0 e0       	ldi	r27, 0x00	; 0
    1e52:	e5 e3       	ldi	r30, 0x35	; 53
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	48 2f       	mov	r20, r24
    1e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5c:	28 2f       	mov	r18, r24
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	02 2e       	mov	r0, r18
    1e66:	02 c0       	rjmp	.+4      	; 0x1e6c <DIO_voidTogglePinValue+0xc6>
    1e68:	88 0f       	add	r24, r24
    1e6a:	99 1f       	adc	r25, r25
    1e6c:	0a 94       	dec	r0
    1e6e:	e2 f7       	brpl	.-8      	; 0x1e68 <DIO_voidTogglePinValue+0xc2>
    1e70:	84 27       	eor	r24, r20
    1e72:	8c 93       	st	X, r24
    1e74:	13 c0       	rjmp	.+38     	; 0x1e9c <DIO_voidTogglePinValue+0xf6>
		        case PORT_u8D:TOG_BIT(PORTD,Copy_u8PinNum);break;
    1e76:	a2 e3       	ldi	r26, 0x32	; 50
    1e78:	b0 e0       	ldi	r27, 0x00	; 0
    1e7a:	e2 e3       	ldi	r30, 0x32	; 50
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	48 2f       	mov	r20, r24
    1e82:	8a 81       	ldd	r24, Y+2	; 0x02
    1e84:	28 2f       	mov	r18, r24
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	02 2e       	mov	r0, r18
    1e8e:	02 c0       	rjmp	.+4      	; 0x1e94 <DIO_voidTogglePinValue+0xee>
    1e90:	88 0f       	add	r24, r24
    1e92:	99 1f       	adc	r25, r25
    1e94:	0a 94       	dec	r0
    1e96:	e2 f7       	brpl	.-8      	; 0x1e90 <DIO_voidTogglePinValue+0xea>
    1e98:	84 27       	eor	r24, r20
    1e9a:	8c 93       	st	X, r24
	        }
	}

}
    1e9c:	0f 90       	pop	r0
    1e9e:	0f 90       	pop	r0
    1ea0:	0f 90       	pop	r0
    1ea2:	0f 90       	pop	r0
    1ea4:	cf 91       	pop	r28
    1ea6:	df 91       	pop	r29
    1ea8:	08 95       	ret

00001eaa <EXIT_voidEnableDisable>:




void EXIT_voidEnableDisable(Int_num_e Copy_e_Int_Num,Int_Mode_e Copy_e_Mode)
{
    1eaa:	df 93       	push	r29
    1eac:	cf 93       	push	r28
    1eae:	cd b7       	in	r28, 0x3d	; 61
    1eb0:	de b7       	in	r29, 0x3e	; 62
    1eb2:	2a 97       	sbiw	r28, 0x0a	; 10
    1eb4:	0f b6       	in	r0, 0x3f	; 63
    1eb6:	f8 94       	cli
    1eb8:	de bf       	out	0x3e, r29	; 62
    1eba:	0f be       	out	0x3f, r0	; 63
    1ebc:	cd bf       	out	0x3d, r28	; 61
    1ebe:	89 83       	std	Y+1, r24	; 0x01
    1ec0:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_e_Int_Num)
    1ec2:	89 81       	ldd	r24, Y+1	; 0x01
    1ec4:	28 2f       	mov	r18, r24
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	3a 87       	std	Y+10, r19	; 0x0a
    1eca:	29 87       	std	Y+9, r18	; 0x09
    1ecc:	89 85       	ldd	r24, Y+9	; 0x09
    1ece:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed0:	81 30       	cpi	r24, 0x01	; 1
    1ed2:	91 05       	cpc	r25, r1
    1ed4:	51 f1       	breq	.+84     	; 0x1f2a <EXIT_voidEnableDisable+0x80>
    1ed6:	29 85       	ldd	r18, Y+9	; 0x09
    1ed8:	3a 85       	ldd	r19, Y+10	; 0x0a
    1eda:	22 30       	cpi	r18, 0x02	; 2
    1edc:	31 05       	cpc	r19, r1
    1ede:	09 f4       	brne	.+2      	; 0x1ee2 <EXIT_voidEnableDisable+0x38>
    1ee0:	43 c0       	rjmp	.+134    	; 0x1f68 <EXIT_voidEnableDisable+0xbe>
    1ee2:	89 85       	ldd	r24, Y+9	; 0x09
    1ee4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee6:	00 97       	sbiw	r24, 0x00	; 0
    1ee8:	09 f0       	breq	.+2      	; 0x1eec <EXIT_voidEnableDisable+0x42>
    1eea:	5c c0       	rjmp	.+184    	; 0x1fa4 <EXIT_voidEnableDisable+0xfa>
	{
	case INT_0:
		switch(Copy_e_Mode)
    1eec:	8a 81       	ldd	r24, Y+2	; 0x02
    1eee:	28 2f       	mov	r18, r24
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	38 87       	std	Y+8, r19	; 0x08
    1ef4:	2f 83       	std	Y+7, r18	; 0x07
    1ef6:	8f 81       	ldd	r24, Y+7	; 0x07
    1ef8:	98 85       	ldd	r25, Y+8	; 0x08
    1efa:	00 97       	sbiw	r24, 0x00	; 0
    1efc:	31 f0       	breq	.+12     	; 0x1f0a <EXIT_voidEnableDisable+0x60>
    1efe:	2f 81       	ldd	r18, Y+7	; 0x07
    1f00:	38 85       	ldd	r19, Y+8	; 0x08
    1f02:	21 30       	cpi	r18, 0x01	; 1
    1f04:	31 05       	cpc	r19, r1
    1f06:	49 f0       	breq	.+18     	; 0x1f1a <EXIT_voidEnableDisable+0x70>
    1f08:	4d c0       	rjmp	.+154    	; 0x1fa4 <EXIT_voidEnableDisable+0xfa>
		{
		case Enabled:SET_BIT(GICR,GICR_INT0);
    1f0a:	ab e5       	ldi	r26, 0x5B	; 91
    1f0c:	b0 e0       	ldi	r27, 0x00	; 0
    1f0e:	eb e5       	ldi	r30, 0x5B	; 91
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	80 81       	ld	r24, Z
    1f14:	80 64       	ori	r24, 0x40	; 64
    1f16:	8c 93       	st	X, r24
    1f18:	45 c0       	rjmp	.+138    	; 0x1fa4 <EXIT_voidEnableDisable+0xfa>
		break;
		case Disabled:CLR_BIT(GICR,GICR_INT0);
    1f1a:	ab e5       	ldi	r26, 0x5B	; 91
    1f1c:	b0 e0       	ldi	r27, 0x00	; 0
    1f1e:	eb e5       	ldi	r30, 0x5B	; 91
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	80 81       	ld	r24, Z
    1f24:	8f 7b       	andi	r24, 0xBF	; 191
    1f26:	8c 93       	st	X, r24
    1f28:	3d c0       	rjmp	.+122    	; 0x1fa4 <EXIT_voidEnableDisable+0xfa>
		break;
		}
		;break;
		case INT_1: switch(Copy_e_Mode)
    1f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2c:	28 2f       	mov	r18, r24
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	3e 83       	std	Y+6, r19	; 0x06
    1f32:	2d 83       	std	Y+5, r18	; 0x05
    1f34:	8d 81       	ldd	r24, Y+5	; 0x05
    1f36:	9e 81       	ldd	r25, Y+6	; 0x06
    1f38:	00 97       	sbiw	r24, 0x00	; 0
    1f3a:	31 f0       	breq	.+12     	; 0x1f48 <EXIT_voidEnableDisable+0x9e>
    1f3c:	2d 81       	ldd	r18, Y+5	; 0x05
    1f3e:	3e 81       	ldd	r19, Y+6	; 0x06
    1f40:	21 30       	cpi	r18, 0x01	; 1
    1f42:	31 05       	cpc	r19, r1
    1f44:	49 f0       	breq	.+18     	; 0x1f58 <EXIT_voidEnableDisable+0xae>
    1f46:	2e c0       	rjmp	.+92     	; 0x1fa4 <EXIT_voidEnableDisable+0xfa>
		{
		case Enabled:SET_BIT(GICR,GICR_INT1);
    1f48:	ab e5       	ldi	r26, 0x5B	; 91
    1f4a:	b0 e0       	ldi	r27, 0x00	; 0
    1f4c:	eb e5       	ldi	r30, 0x5B	; 91
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	80 81       	ld	r24, Z
    1f52:	80 68       	ori	r24, 0x80	; 128
    1f54:	8c 93       	st	X, r24
    1f56:	26 c0       	rjmp	.+76     	; 0x1fa4 <EXIT_voidEnableDisable+0xfa>
		break;
		case Disabled:CLR_BIT(GICR,GICR_INT1);
    1f58:	ab e5       	ldi	r26, 0x5B	; 91
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	eb e5       	ldi	r30, 0x5B	; 91
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	80 81       	ld	r24, Z
    1f62:	8f 77       	andi	r24, 0x7F	; 127
    1f64:	8c 93       	st	X, r24
    1f66:	1e c0       	rjmp	.+60     	; 0x1fa4 <EXIT_voidEnableDisable+0xfa>
		break;
		};break;
		case INT_2:      switch(Copy_e_Mode)
    1f68:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6a:	28 2f       	mov	r18, r24
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	3c 83       	std	Y+4, r19	; 0x04
    1f70:	2b 83       	std	Y+3, r18	; 0x03
    1f72:	8b 81       	ldd	r24, Y+3	; 0x03
    1f74:	9c 81       	ldd	r25, Y+4	; 0x04
    1f76:	00 97       	sbiw	r24, 0x00	; 0
    1f78:	31 f0       	breq	.+12     	; 0x1f86 <EXIT_voidEnableDisable+0xdc>
    1f7a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f7c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f7e:	21 30       	cpi	r18, 0x01	; 1
    1f80:	31 05       	cpc	r19, r1
    1f82:	49 f0       	breq	.+18     	; 0x1f96 <EXIT_voidEnableDisable+0xec>
    1f84:	0f c0       	rjmp	.+30     	; 0x1fa4 <EXIT_voidEnableDisable+0xfa>
		{
		case Enabled:SET_BIT(GICR,GICR_INT2);
    1f86:	ab e5       	ldi	r26, 0x5B	; 91
    1f88:	b0 e0       	ldi	r27, 0x00	; 0
    1f8a:	eb e5       	ldi	r30, 0x5B	; 91
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	80 81       	ld	r24, Z
    1f90:	80 62       	ori	r24, 0x20	; 32
    1f92:	8c 93       	st	X, r24
    1f94:	07 c0       	rjmp	.+14     	; 0x1fa4 <EXIT_voidEnableDisable+0xfa>
		break;
		case Disabled:CLR_BIT(GICR,GICR_INT2);
    1f96:	ab e5       	ldi	r26, 0x5B	; 91
    1f98:	b0 e0       	ldi	r27, 0x00	; 0
    1f9a:	eb e5       	ldi	r30, 0x5B	; 91
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	80 81       	ld	r24, Z
    1fa0:	8f 7d       	andi	r24, 0xDF	; 223
    1fa2:	8c 93       	st	X, r24
		break;
		};break;
	}
}
    1fa4:	2a 96       	adiw	r28, 0x0a	; 10
    1fa6:	0f b6       	in	r0, 0x3f	; 63
    1fa8:	f8 94       	cli
    1faa:	de bf       	out	0x3e, r29	; 62
    1fac:	0f be       	out	0x3f, r0	; 63
    1fae:	cd bf       	out	0x3d, r28	; 61
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	08 95       	ret

00001fb6 <EXIT_voidSetSenseControl>:
void EXIT_voidSetSenseControl(Int_num_e Copy_e_Int_Num,Int_SenseCtrl_e Copy_e_SenseCtrl)
{
    1fb6:	df 93       	push	r29
    1fb8:	cf 93       	push	r28
    1fba:	cd b7       	in	r28, 0x3d	; 61
    1fbc:	de b7       	in	r29, 0x3e	; 62
    1fbe:	2a 97       	sbiw	r28, 0x0a	; 10
    1fc0:	0f b6       	in	r0, 0x3f	; 63
    1fc2:	f8 94       	cli
    1fc4:	de bf       	out	0x3e, r29	; 62
    1fc6:	0f be       	out	0x3f, r0	; 63
    1fc8:	cd bf       	out	0x3d, r28	; 61
    1fca:	89 83       	std	Y+1, r24	; 0x01
    1fcc:	6a 83       	std	Y+2, r22	; 0x02
switch(Copy_e_Int_Num)
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
    1fd0:	28 2f       	mov	r18, r24
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	3a 87       	std	Y+10, r19	; 0x0a
    1fd6:	29 87       	std	Y+9, r18	; 0x09
    1fd8:	89 85       	ldd	r24, Y+9	; 0x09
    1fda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fdc:	81 30       	cpi	r24, 0x01	; 1
    1fde:	91 05       	cpc	r25, r1
    1fe0:	09 f4       	brne	.+2      	; 0x1fe4 <EXIT_voidSetSenseControl+0x2e>
    1fe2:	66 c0       	rjmp	.+204    	; 0x20b0 <EXIT_voidSetSenseControl+0xfa>
    1fe4:	29 85       	ldd	r18, Y+9	; 0x09
    1fe6:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fe8:	22 30       	cpi	r18, 0x02	; 2
    1fea:	31 05       	cpc	r19, r1
    1fec:	09 f4       	brne	.+2      	; 0x1ff0 <EXIT_voidSetSenseControl+0x3a>
    1fee:	bb c0       	rjmp	.+374    	; 0x2166 <EXIT_voidSetSenseControl+0x1b0>
    1ff0:	89 85       	ldd	r24, Y+9	; 0x09
    1ff2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff4:	00 97       	sbiw	r24, 0x00	; 0
    1ff6:	09 f0       	breq	.+2      	; 0x1ffa <EXIT_voidSetSenseControl+0x44>
    1ff8:	d5 c0       	rjmp	.+426    	; 0x21a4 <EXIT_voidSetSenseControl+0x1ee>
{
case INT_0:
	switch(Copy_e_SenseCtrl)
    1ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffc:	28 2f       	mov	r18, r24
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	38 87       	std	Y+8, r19	; 0x08
    2002:	2f 83       	std	Y+7, r18	; 0x07
    2004:	8f 81       	ldd	r24, Y+7	; 0x07
    2006:	98 85       	ldd	r25, Y+8	; 0x08
    2008:	81 30       	cpi	r24, 0x01	; 1
    200a:	91 05       	cpc	r25, r1
    200c:	21 f1       	breq	.+72     	; 0x2056 <EXIT_voidSetSenseControl+0xa0>
    200e:	2f 81       	ldd	r18, Y+7	; 0x07
    2010:	38 85       	ldd	r19, Y+8	; 0x08
    2012:	22 30       	cpi	r18, 0x02	; 2
    2014:	31 05       	cpc	r19, r1
    2016:	2c f4       	brge	.+10     	; 0x2022 <EXIT_voidSetSenseControl+0x6c>
    2018:	8f 81       	ldd	r24, Y+7	; 0x07
    201a:	98 85       	ldd	r25, Y+8	; 0x08
    201c:	00 97       	sbiw	r24, 0x00	; 0
    201e:	61 f0       	breq	.+24     	; 0x2038 <EXIT_voidSetSenseControl+0x82>
    2020:	c1 c0       	rjmp	.+386    	; 0x21a4 <EXIT_voidSetSenseControl+0x1ee>
    2022:	2f 81       	ldd	r18, Y+7	; 0x07
    2024:	38 85       	ldd	r19, Y+8	; 0x08
    2026:	22 30       	cpi	r18, 0x02	; 2
    2028:	31 05       	cpc	r19, r1
    202a:	21 f1       	breq	.+72     	; 0x2074 <EXIT_voidSetSenseControl+0xbe>
    202c:	8f 81       	ldd	r24, Y+7	; 0x07
    202e:	98 85       	ldd	r25, Y+8	; 0x08
    2030:	83 30       	cpi	r24, 0x03	; 3
    2032:	91 05       	cpc	r25, r1
    2034:	71 f1       	breq	.+92     	; 0x2092 <EXIT_voidSetSenseControl+0xdc>
    2036:	b6 c0       	rjmp	.+364    	; 0x21a4 <EXIT_voidSetSenseControl+0x1ee>
	{
	case low_level :
		CLR_BIT(MCUCR,MCUCR_ISC00);
    2038:	a5 e5       	ldi	r26, 0x55	; 85
    203a:	b0 e0       	ldi	r27, 0x00	; 0
    203c:	e5 e5       	ldi	r30, 0x55	; 85
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	80 81       	ld	r24, Z
    2042:	8e 7f       	andi	r24, 0xFE	; 254
    2044:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,MCUCR_ISC01);
    2046:	a5 e5       	ldi	r26, 0x55	; 85
    2048:	b0 e0       	ldi	r27, 0x00	; 0
    204a:	e5 e5       	ldi	r30, 0x55	; 85
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	80 81       	ld	r24, Z
    2050:	8d 7f       	andi	r24, 0xFD	; 253
    2052:	8c 93       	st	X, r24
    2054:	a7 c0       	rjmp	.+334    	; 0x21a4 <EXIT_voidSetSenseControl+0x1ee>
		break;
	case logical_change :
		SET_BIT(MCUCR,MCUCR_ISC00);
    2056:	a5 e5       	ldi	r26, 0x55	; 85
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	e5 e5       	ldi	r30, 0x55	; 85
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	81 60       	ori	r24, 0x01	; 1
    2062:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,MCUCR_ISC01);
    2064:	a5 e5       	ldi	r26, 0x55	; 85
    2066:	b0 e0       	ldi	r27, 0x00	; 0
    2068:	e5 e5       	ldi	r30, 0x55	; 85
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	8d 7f       	andi	r24, 0xFD	; 253
    2070:	8c 93       	st	X, r24
    2072:	98 c0       	rjmp	.+304    	; 0x21a4 <EXIT_voidSetSenseControl+0x1ee>
		break;
	case falling_age :
		CLR_BIT(MCUCR,MCUCR_ISC00);
    2074:	a5 e5       	ldi	r26, 0x55	; 85
    2076:	b0 e0       	ldi	r27, 0x00	; 0
    2078:	e5 e5       	ldi	r30, 0x55	; 85
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	80 81       	ld	r24, Z
    207e:	8e 7f       	andi	r24, 0xFE	; 254
    2080:	8c 93       	st	X, r24
		SET_BIT(MCUCR,MCUCR_ISC01);
    2082:	a5 e5       	ldi	r26, 0x55	; 85
    2084:	b0 e0       	ldi	r27, 0x00	; 0
    2086:	e5 e5       	ldi	r30, 0x55	; 85
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	80 81       	ld	r24, Z
    208c:	82 60       	ori	r24, 0x02	; 2
    208e:	8c 93       	st	X, r24
    2090:	89 c0       	rjmp	.+274    	; 0x21a4 <EXIT_voidSetSenseControl+0x1ee>
		break;
	case rising_age :
		SET_BIT(MCUCR,MCUCR_ISC00);
    2092:	a5 e5       	ldi	r26, 0x55	; 85
    2094:	b0 e0       	ldi	r27, 0x00	; 0
    2096:	e5 e5       	ldi	r30, 0x55	; 85
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
    209c:	81 60       	ori	r24, 0x01	; 1
    209e:	8c 93       	st	X, r24
		SET_BIT(MCUCR,MCUCR_ISC01);
    20a0:	a5 e5       	ldi	r26, 0x55	; 85
    20a2:	b0 e0       	ldi	r27, 0x00	; 0
    20a4:	e5 e5       	ldi	r30, 0x55	; 85
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	80 81       	ld	r24, Z
    20aa:	82 60       	ori	r24, 0x02	; 2
    20ac:	8c 93       	st	X, r24
    20ae:	7a c0       	rjmp	.+244    	; 0x21a4 <EXIT_voidSetSenseControl+0x1ee>
		break;
	}
	break;
case INT_1:
	switch(Copy_e_SenseCtrl)
    20b0:	8a 81       	ldd	r24, Y+2	; 0x02
    20b2:	28 2f       	mov	r18, r24
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	3e 83       	std	Y+6, r19	; 0x06
    20b8:	2d 83       	std	Y+5, r18	; 0x05
    20ba:	8d 81       	ldd	r24, Y+5	; 0x05
    20bc:	9e 81       	ldd	r25, Y+6	; 0x06
    20be:	81 30       	cpi	r24, 0x01	; 1
    20c0:	91 05       	cpc	r25, r1
    20c2:	21 f1       	breq	.+72     	; 0x210c <EXIT_voidSetSenseControl+0x156>
    20c4:	2d 81       	ldd	r18, Y+5	; 0x05
    20c6:	3e 81       	ldd	r19, Y+6	; 0x06
    20c8:	22 30       	cpi	r18, 0x02	; 2
    20ca:	31 05       	cpc	r19, r1
    20cc:	2c f4       	brge	.+10     	; 0x20d8 <EXIT_voidSetSenseControl+0x122>
    20ce:	8d 81       	ldd	r24, Y+5	; 0x05
    20d0:	9e 81       	ldd	r25, Y+6	; 0x06
    20d2:	00 97       	sbiw	r24, 0x00	; 0
    20d4:	61 f0       	breq	.+24     	; 0x20ee <EXIT_voidSetSenseControl+0x138>
    20d6:	66 c0       	rjmp	.+204    	; 0x21a4 <EXIT_voidSetSenseControl+0x1ee>
    20d8:	2d 81       	ldd	r18, Y+5	; 0x05
    20da:	3e 81       	ldd	r19, Y+6	; 0x06
    20dc:	22 30       	cpi	r18, 0x02	; 2
    20de:	31 05       	cpc	r19, r1
    20e0:	21 f1       	breq	.+72     	; 0x212a <EXIT_voidSetSenseControl+0x174>
    20e2:	8d 81       	ldd	r24, Y+5	; 0x05
    20e4:	9e 81       	ldd	r25, Y+6	; 0x06
    20e6:	83 30       	cpi	r24, 0x03	; 3
    20e8:	91 05       	cpc	r25, r1
    20ea:	71 f1       	breq	.+92     	; 0x2148 <EXIT_voidSetSenseControl+0x192>
    20ec:	5b c0       	rjmp	.+182    	; 0x21a4 <EXIT_voidSetSenseControl+0x1ee>
		{
		case low_level :
			CLR_BIT(MCUCR,MCUCR_ISC10);
    20ee:	a5 e5       	ldi	r26, 0x55	; 85
    20f0:	b0 e0       	ldi	r27, 0x00	; 0
    20f2:	e5 e5       	ldi	r30, 0x55	; 85
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	80 81       	ld	r24, Z
    20f8:	8b 7f       	andi	r24, 0xFB	; 251
    20fa:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC11);
    20fc:	a5 e5       	ldi	r26, 0x55	; 85
    20fe:	b0 e0       	ldi	r27, 0x00	; 0
    2100:	e5 e5       	ldi	r30, 0x55	; 85
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	80 81       	ld	r24, Z
    2106:	87 7f       	andi	r24, 0xF7	; 247
    2108:	8c 93       	st	X, r24
    210a:	4c c0       	rjmp	.+152    	; 0x21a4 <EXIT_voidSetSenseControl+0x1ee>
			break;
		case logical_change :
			SET_BIT(MCUCR,MCUCR_ISC10);
    210c:	a5 e5       	ldi	r26, 0x55	; 85
    210e:	b0 e0       	ldi	r27, 0x00	; 0
    2110:	e5 e5       	ldi	r30, 0x55	; 85
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	80 81       	ld	r24, Z
    2116:	84 60       	ori	r24, 0x04	; 4
    2118:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC11);
    211a:	a5 e5       	ldi	r26, 0x55	; 85
    211c:	b0 e0       	ldi	r27, 0x00	; 0
    211e:	e5 e5       	ldi	r30, 0x55	; 85
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	80 81       	ld	r24, Z
    2124:	87 7f       	andi	r24, 0xF7	; 247
    2126:	8c 93       	st	X, r24
    2128:	3d c0       	rjmp	.+122    	; 0x21a4 <EXIT_voidSetSenseControl+0x1ee>
			break;
		case falling_age :
			CLR_BIT(MCUCR,MCUCR_ISC10);
    212a:	a5 e5       	ldi	r26, 0x55	; 85
    212c:	b0 e0       	ldi	r27, 0x00	; 0
    212e:	e5 e5       	ldi	r30, 0x55	; 85
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	80 81       	ld	r24, Z
    2134:	8b 7f       	andi	r24, 0xFB	; 251
    2136:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC11);
    2138:	a5 e5       	ldi	r26, 0x55	; 85
    213a:	b0 e0       	ldi	r27, 0x00	; 0
    213c:	e5 e5       	ldi	r30, 0x55	; 85
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	80 81       	ld	r24, Z
    2142:	88 60       	ori	r24, 0x08	; 8
    2144:	8c 93       	st	X, r24
    2146:	2e c0       	rjmp	.+92     	; 0x21a4 <EXIT_voidSetSenseControl+0x1ee>
			break;
		case rising_age :
			SET_BIT(MCUCR,MCUCR_ISC10);
    2148:	a5 e5       	ldi	r26, 0x55	; 85
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	e5 e5       	ldi	r30, 0x55	; 85
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	84 60       	ori	r24, 0x04	; 4
    2154:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC11);
    2156:	a5 e5       	ldi	r26, 0x55	; 85
    2158:	b0 e0       	ldi	r27, 0x00	; 0
    215a:	e5 e5       	ldi	r30, 0x55	; 85
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	80 81       	ld	r24, Z
    2160:	88 60       	ori	r24, 0x08	; 8
    2162:	8c 93       	st	X, r24
    2164:	1f c0       	rjmp	.+62     	; 0x21a4 <EXIT_voidSetSenseControl+0x1ee>
			break;
		}
	break;
case INT_2:
	switch(Copy_e_SenseCtrl)
    2166:	8a 81       	ldd	r24, Y+2	; 0x02
    2168:	28 2f       	mov	r18, r24
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	3c 83       	std	Y+4, r19	; 0x04
    216e:	2b 83       	std	Y+3, r18	; 0x03
    2170:	8b 81       	ldd	r24, Y+3	; 0x03
    2172:	9c 81       	ldd	r25, Y+4	; 0x04
    2174:	82 30       	cpi	r24, 0x02	; 2
    2176:	91 05       	cpc	r25, r1
    2178:	31 f0       	breq	.+12     	; 0x2186 <EXIT_voidSetSenseControl+0x1d0>
    217a:	2b 81       	ldd	r18, Y+3	; 0x03
    217c:	3c 81       	ldd	r19, Y+4	; 0x04
    217e:	23 30       	cpi	r18, 0x03	; 3
    2180:	31 05       	cpc	r19, r1
    2182:	49 f0       	breq	.+18     	; 0x2196 <EXIT_voidSetSenseControl+0x1e0>
    2184:	0f c0       	rjmp	.+30     	; 0x21a4 <EXIT_voidSetSenseControl+0x1ee>
		{

		case falling_age :
			CLR_BIT(MCUCSR,MCUCSR_ISC2);
    2186:	a4 e5       	ldi	r26, 0x54	; 84
    2188:	b0 e0       	ldi	r27, 0x00	; 0
    218a:	e4 e5       	ldi	r30, 0x54	; 84
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	80 81       	ld	r24, Z
    2190:	8f 7b       	andi	r24, 0xBF	; 191
    2192:	8c 93       	st	X, r24
    2194:	07 c0       	rjmp	.+14     	; 0x21a4 <EXIT_voidSetSenseControl+0x1ee>

			break;
		case rising_age :
			SET_BIT(MCUCSR,MCUCSR_ISC2);
    2196:	a4 e5       	ldi	r26, 0x54	; 84
    2198:	b0 e0       	ldi	r27, 0x00	; 0
    219a:	e4 e5       	ldi	r30, 0x54	; 84
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	80 81       	ld	r24, Z
    21a0:	80 64       	ori	r24, 0x40	; 64
    21a2:	8c 93       	st	X, r24
			break;
		}
	break;
}

}
    21a4:	2a 96       	adiw	r28, 0x0a	; 10
    21a6:	0f b6       	in	r0, 0x3f	; 63
    21a8:	f8 94       	cli
    21aa:	de bf       	out	0x3e, r29	; 62
    21ac:	0f be       	out	0x3f, r0	; 63
    21ae:	cd bf       	out	0x3d, r28	; 61
    21b0:	cf 91       	pop	r28
    21b2:	df 91       	pop	r29
    21b4:	08 95       	ret

000021b6 <EXTI_voidSetCallBack>:

Std_err_e EXTI_voidSetCallBack(Int_num_e Copy_e_IntNum,void (*PvoidFunc)(void))
{
    21b6:	df 93       	push	r29
    21b8:	cf 93       	push	r28
    21ba:	00 d0       	rcall	.+0      	; 0x21bc <EXTI_voidSetCallBack+0x6>
    21bc:	00 d0       	rcall	.+0      	; 0x21be <EXTI_voidSetCallBack+0x8>
    21be:	00 d0       	rcall	.+0      	; 0x21c0 <EXTI_voidSetCallBack+0xa>
    21c0:	cd b7       	in	r28, 0x3d	; 61
    21c2:	de b7       	in	r29, 0x3e	; 62
    21c4:	8a 83       	std	Y+2, r24	; 0x02
    21c6:	7c 83       	std	Y+4, r23	; 0x04
    21c8:	6b 83       	std	Y+3, r22	; 0x03
	Std_err_e Local_eState=OK;
    21ca:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_e_IntNum)
    21cc:	8a 81       	ldd	r24, Y+2	; 0x02
    21ce:	28 2f       	mov	r18, r24
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	3e 83       	std	Y+6, r19	; 0x06
    21d4:	2d 83       	std	Y+5, r18	; 0x05
    21d6:	8d 81       	ldd	r24, Y+5	; 0x05
    21d8:	9e 81       	ldd	r25, Y+6	; 0x06
    21da:	81 30       	cpi	r24, 0x01	; 1
    21dc:	91 05       	cpc	r25, r1
    21de:	b9 f0       	breq	.+46     	; 0x220e <EXTI_voidSetCallBack+0x58>
    21e0:	2d 81       	ldd	r18, Y+5	; 0x05
    21e2:	3e 81       	ldd	r19, Y+6	; 0x06
    21e4:	22 30       	cpi	r18, 0x02	; 2
    21e6:	31 05       	cpc	r19, r1
    21e8:	01 f1       	breq	.+64     	; 0x222a <EXTI_voidSetCallBack+0x74>
    21ea:	8d 81       	ldd	r24, Y+5	; 0x05
    21ec:	9e 81       	ldd	r25, Y+6	; 0x06
    21ee:	00 97       	sbiw	r24, 0x00	; 0
    21f0:	49 f5       	brne	.+82     	; 0x2244 <EXTI_voidSetCallBack+0x8e>
	{
	case INT_0:
		if(PvoidFunc !=NULL)
    21f2:	8b 81       	ldd	r24, Y+3	; 0x03
    21f4:	9c 81       	ldd	r25, Y+4	; 0x04
    21f6:	00 97       	sbiw	r24, 0x00	; 0
    21f8:	39 f0       	breq	.+14     	; 0x2208 <EXTI_voidSetCallBack+0x52>
		{
			GlobalPtrTofunc[0]=PvoidFunc;
    21fa:	8b 81       	ldd	r24, Y+3	; 0x03
    21fc:	9c 81       	ldd	r25, Y+4	; 0x04
    21fe:	90 93 6f 01 	sts	0x016F, r25
    2202:	80 93 6e 01 	sts	0x016E, r24
    2206:	1e c0       	rjmp	.+60     	; 0x2244 <EXTI_voidSetCallBack+0x8e>
		}
		else
		{
			Local_eState=NOK;
    2208:	81 e0       	ldi	r24, 0x01	; 1
    220a:	89 83       	std	Y+1, r24	; 0x01
    220c:	1b c0       	rjmp	.+54     	; 0x2244 <EXTI_voidSetCallBack+0x8e>
		}
		break;

	case INT_1:
		if(PvoidFunc !=NULL)
    220e:	8b 81       	ldd	r24, Y+3	; 0x03
    2210:	9c 81       	ldd	r25, Y+4	; 0x04
    2212:	00 97       	sbiw	r24, 0x00	; 0
    2214:	39 f0       	breq	.+14     	; 0x2224 <EXTI_voidSetCallBack+0x6e>
		{
			GlobalPtrTofunc[1]=PvoidFunc;
    2216:	8b 81       	ldd	r24, Y+3	; 0x03
    2218:	9c 81       	ldd	r25, Y+4	; 0x04
    221a:	90 93 71 01 	sts	0x0171, r25
    221e:	80 93 70 01 	sts	0x0170, r24
    2222:	10 c0       	rjmp	.+32     	; 0x2244 <EXTI_voidSetCallBack+0x8e>
		}
		else
		{
			Local_eState=NOK;
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	89 83       	std	Y+1, r24	; 0x01
    2228:	0d c0       	rjmp	.+26     	; 0x2244 <EXTI_voidSetCallBack+0x8e>
		}
		break;
	case INT_2:
		if(PvoidFunc !=NULL)
    222a:	8b 81       	ldd	r24, Y+3	; 0x03
    222c:	9c 81       	ldd	r25, Y+4	; 0x04
    222e:	00 97       	sbiw	r24, 0x00	; 0
    2230:	39 f0       	breq	.+14     	; 0x2240 <EXTI_voidSetCallBack+0x8a>
		{
			GlobalPtrTofunc[2]=PvoidFunc;
    2232:	8b 81       	ldd	r24, Y+3	; 0x03
    2234:	9c 81       	ldd	r25, Y+4	; 0x04
    2236:	90 93 73 01 	sts	0x0173, r25
    223a:	80 93 72 01 	sts	0x0172, r24
    223e:	02 c0       	rjmp	.+4      	; 0x2244 <EXTI_voidSetCallBack+0x8e>
		}
		else
		{
			Local_eState=NOK;
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	89 83       	std	Y+1, r24	; 0x01
		}
		break;
	}

	return Local_eState;
    2244:	89 81       	ldd	r24, Y+1	; 0x01
}
    2246:	26 96       	adiw	r28, 0x06	; 6
    2248:	0f b6       	in	r0, 0x3f	; 63
    224a:	f8 94       	cli
    224c:	de bf       	out	0x3e, r29	; 62
    224e:	0f be       	out	0x3f, r0	; 63
    2250:	cd bf       	out	0x3d, r28	; 61
    2252:	cf 91       	pop	r28
    2254:	df 91       	pop	r29
    2256:	08 95       	ret

00002258 <__vector_1>:


void __vector_1(void)  __attribute__((signal));
void __vector_1(void)
{
    2258:	1f 92       	push	r1
    225a:	0f 92       	push	r0
    225c:	0f b6       	in	r0, 0x3f	; 63
    225e:	0f 92       	push	r0
    2260:	11 24       	eor	r1, r1
    2262:	2f 93       	push	r18
    2264:	3f 93       	push	r19
    2266:	4f 93       	push	r20
    2268:	5f 93       	push	r21
    226a:	6f 93       	push	r22
    226c:	7f 93       	push	r23
    226e:	8f 93       	push	r24
    2270:	9f 93       	push	r25
    2272:	af 93       	push	r26
    2274:	bf 93       	push	r27
    2276:	ef 93       	push	r30
    2278:	ff 93       	push	r31
    227a:	df 93       	push	r29
    227c:	cf 93       	push	r28
    227e:	cd b7       	in	r28, 0x3d	; 61
    2280:	de b7       	in	r29, 0x3e	; 62
   //INVOKE FUNCTION TO BE RUN INSIDE INT0
	GlobalPtrTofunc[0]();
    2282:	e0 91 6e 01 	lds	r30, 0x016E
    2286:	f0 91 6f 01 	lds	r31, 0x016F
    228a:	09 95       	icall
}
    228c:	cf 91       	pop	r28
    228e:	df 91       	pop	r29
    2290:	ff 91       	pop	r31
    2292:	ef 91       	pop	r30
    2294:	bf 91       	pop	r27
    2296:	af 91       	pop	r26
    2298:	9f 91       	pop	r25
    229a:	8f 91       	pop	r24
    229c:	7f 91       	pop	r23
    229e:	6f 91       	pop	r22
    22a0:	5f 91       	pop	r21
    22a2:	4f 91       	pop	r20
    22a4:	3f 91       	pop	r19
    22a6:	2f 91       	pop	r18
    22a8:	0f 90       	pop	r0
    22aa:	0f be       	out	0x3f, r0	; 63
    22ac:	0f 90       	pop	r0
    22ae:	1f 90       	pop	r1
    22b0:	18 95       	reti

000022b2 <__vector_2>:

void __vector_2(void)  __attribute__((signal));
void __vector_2(void)
{
    22b2:	1f 92       	push	r1
    22b4:	0f 92       	push	r0
    22b6:	0f b6       	in	r0, 0x3f	; 63
    22b8:	0f 92       	push	r0
    22ba:	11 24       	eor	r1, r1
    22bc:	2f 93       	push	r18
    22be:	3f 93       	push	r19
    22c0:	4f 93       	push	r20
    22c2:	5f 93       	push	r21
    22c4:	6f 93       	push	r22
    22c6:	7f 93       	push	r23
    22c8:	8f 93       	push	r24
    22ca:	9f 93       	push	r25
    22cc:	af 93       	push	r26
    22ce:	bf 93       	push	r27
    22d0:	ef 93       	push	r30
    22d2:	ff 93       	push	r31
    22d4:	df 93       	push	r29
    22d6:	cf 93       	push	r28
    22d8:	cd b7       	in	r28, 0x3d	; 61
    22da:	de b7       	in	r29, 0x3e	; 62
	GlobalPtrTofunc[1]();
    22dc:	e0 91 70 01 	lds	r30, 0x0170
    22e0:	f0 91 71 01 	lds	r31, 0x0171
    22e4:	09 95       	icall
}
    22e6:	cf 91       	pop	r28
    22e8:	df 91       	pop	r29
    22ea:	ff 91       	pop	r31
    22ec:	ef 91       	pop	r30
    22ee:	bf 91       	pop	r27
    22f0:	af 91       	pop	r26
    22f2:	9f 91       	pop	r25
    22f4:	8f 91       	pop	r24
    22f6:	7f 91       	pop	r23
    22f8:	6f 91       	pop	r22
    22fa:	5f 91       	pop	r21
    22fc:	4f 91       	pop	r20
    22fe:	3f 91       	pop	r19
    2300:	2f 91       	pop	r18
    2302:	0f 90       	pop	r0
    2304:	0f be       	out	0x3f, r0	; 63
    2306:	0f 90       	pop	r0
    2308:	1f 90       	pop	r1
    230a:	18 95       	reti

0000230c <__vector_3>:

void __vector_3(void)  __attribute__((signal));
void __vector_3(void)
{
    230c:	1f 92       	push	r1
    230e:	0f 92       	push	r0
    2310:	0f b6       	in	r0, 0x3f	; 63
    2312:	0f 92       	push	r0
    2314:	11 24       	eor	r1, r1
    2316:	2f 93       	push	r18
    2318:	3f 93       	push	r19
    231a:	4f 93       	push	r20
    231c:	5f 93       	push	r21
    231e:	6f 93       	push	r22
    2320:	7f 93       	push	r23
    2322:	8f 93       	push	r24
    2324:	9f 93       	push	r25
    2326:	af 93       	push	r26
    2328:	bf 93       	push	r27
    232a:	ef 93       	push	r30
    232c:	ff 93       	push	r31
    232e:	df 93       	push	r29
    2330:	cf 93       	push	r28
    2332:	cd b7       	in	r28, 0x3d	; 61
    2334:	de b7       	in	r29, 0x3e	; 62
	GlobalPtrTofunc[2]();
    2336:	e0 91 72 01 	lds	r30, 0x0172
    233a:	f0 91 73 01 	lds	r31, 0x0173
    233e:	09 95       	icall
}
    2340:	cf 91       	pop	r28
    2342:	df 91       	pop	r29
    2344:	ff 91       	pop	r31
    2346:	ef 91       	pop	r30
    2348:	bf 91       	pop	r27
    234a:	af 91       	pop	r26
    234c:	9f 91       	pop	r25
    234e:	8f 91       	pop	r24
    2350:	7f 91       	pop	r23
    2352:	6f 91       	pop	r22
    2354:	5f 91       	pop	r21
    2356:	4f 91       	pop	r20
    2358:	3f 91       	pop	r19
    235a:	2f 91       	pop	r18
    235c:	0f 90       	pop	r0
    235e:	0f be       	out	0x3f, r0	; 63
    2360:	0f 90       	pop	r0
    2362:	1f 90       	pop	r1
    2364:	18 95       	reti

00002366 <GI_voidEnable>:

#include "GI_interface.h"

#include "GI_private.h"

void GI_voidEnable(void){
    2366:	df 93       	push	r29
    2368:	cf 93       	push	r28
    236a:	cd b7       	in	r28, 0x3d	; 61
    236c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    236e:	af e5       	ldi	r26, 0x5F	; 95
    2370:	b0 e0       	ldi	r27, 0x00	; 0
    2372:	ef e5       	ldi	r30, 0x5F	; 95
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	80 81       	ld	r24, Z
    2378:	80 68       	ori	r24, 0x80	; 128
    237a:	8c 93       	st	X, r24
}
    237c:	cf 91       	pop	r28
    237e:	df 91       	pop	r29
    2380:	08 95       	ret

00002382 <GI_voidDisable>:
void GI_voidDisable(void){
    2382:	df 93       	push	r29
    2384:	cf 93       	push	r28
    2386:	cd b7       	in	r28, 0x3d	; 61
    2388:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    238a:	af e5       	ldi	r26, 0x5F	; 95
    238c:	b0 e0       	ldi	r27, 0x00	; 0
    238e:	ef e5       	ldi	r30, 0x5F	; 95
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	80 81       	ld	r24, Z
    2394:	8f 77       	andi	r24, 0x7F	; 127
    2396:	8c 93       	st	X, r24
}
    2398:	cf 91       	pop	r28
    239a:	df 91       	pop	r29
    239c:	08 95       	ret

0000239e <Timer1_Init>:


#include "Servo.h"

// Function to initialize Timer1 for PWM
void Timer1_Init() {
    239e:	df 93       	push	r29
    23a0:	cf 93       	push	r28
    23a2:	cd b7       	in	r28, 0x3d	; 61
    23a4:	de b7       	in	r29, 0x3e	; 62
	// Set Fast PWM mode using ICR1 as TOP
	TCCR1A = (1 << WGM11) | (1 << COM1A1);
    23a6:	ef e4       	ldi	r30, 0x4F	; 79
    23a8:	f0 e0       	ldi	r31, 0x00	; 0
    23aa:	82 e8       	ldi	r24, 0x82	; 130
    23ac:	80 83       	st	Z, r24
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);
    23ae:	ee e4       	ldi	r30, 0x4E	; 78
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	8a e1       	ldi	r24, 0x1A	; 26
    23b4:	80 83       	st	Z, r24

	// Set TOP value for 50Hz PWM frequency
	ICR1 = 19999; // 20ms period (50Hz)
    23b6:	e6 e4       	ldi	r30, 0x46	; 70
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	8f e1       	ldi	r24, 0x1F	; 31
    23bc:	9e e4       	ldi	r25, 0x4E	; 78
    23be:	91 83       	std	Z+1, r25	; 0x01
    23c0:	80 83       	st	Z, r24

	// Set PD5 (OC1A) as output
	DDRD |= (1 << PD5);
    23c2:	a1 e3       	ldi	r26, 0x31	; 49
    23c4:	b0 e0       	ldi	r27, 0x00	; 0
    23c6:	e1 e3       	ldi	r30, 0x31	; 49
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	80 81       	ld	r24, Z
    23cc:	80 62       	ori	r24, 0x20	; 32
    23ce:	8c 93       	st	X, r24
}
    23d0:	cf 91       	pop	r28
    23d2:	df 91       	pop	r29
    23d4:	08 95       	ret

000023d6 <Set_Servo_Angle>:

// Function to set the angle of the servo (0-180 degrees)
void Set_Servo_Angle(uint8_t angle) {
    23d6:	df 93       	push	r29
    23d8:	cf 93       	push	r28
    23da:	00 d0       	rcall	.+0      	; 0x23dc <Set_Servo_Angle+0x6>
    23dc:	0f 92       	push	r0
    23de:	cd b7       	in	r28, 0x3d	; 61
    23e0:	de b7       	in	r29, 0x3e	; 62
    23e2:	8b 83       	std	Y+3, r24	; 0x03

	void Timer1_Init();

	// Calculate duty cycle value for the given angle
	uint16_t duty_cycle = ((angle * 5.555) + 1000); // 1ms to 2ms pulse width
    23e4:	8b 81       	ldd	r24, Y+3	; 0x03
    23e6:	88 2f       	mov	r24, r24
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	aa 27       	eor	r26, r26
    23ec:	97 fd       	sbrc	r25, 7
    23ee:	a0 95       	com	r26
    23f0:	ba 2f       	mov	r27, r26
    23f2:	bc 01       	movw	r22, r24
    23f4:	cd 01       	movw	r24, r26
    23f6:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    23fa:	dc 01       	movw	r26, r24
    23fc:	cb 01       	movw	r24, r22
    23fe:	bc 01       	movw	r22, r24
    2400:	cd 01       	movw	r24, r26
    2402:	2f e8       	ldi	r18, 0x8F	; 143
    2404:	32 ec       	ldi	r19, 0xC2	; 194
    2406:	41 eb       	ldi	r20, 0xB1	; 177
    2408:	50 e4       	ldi	r21, 0x40	; 64
    240a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	bc 01       	movw	r22, r24
    2414:	cd 01       	movw	r24, r26
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	4a e7       	ldi	r20, 0x7A	; 122
    241c:	54 e4       	ldi	r21, 0x44	; 68
    241e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22
    2426:	bc 01       	movw	r22, r24
    2428:	cd 01       	movw	r24, r26
    242a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242e:	dc 01       	movw	r26, r24
    2430:	cb 01       	movw	r24, r22
    2432:	9a 83       	std	Y+2, r25	; 0x02
    2434:	89 83       	std	Y+1, r24	; 0x01

	// Set duty cycle for the given angle
	OCR1A = duty_cycle;
    2436:	ea e4       	ldi	r30, 0x4A	; 74
    2438:	f0 e0       	ldi	r31, 0x00	; 0
    243a:	89 81       	ldd	r24, Y+1	; 0x01
    243c:	9a 81       	ldd	r25, Y+2	; 0x02
    243e:	91 83       	std	Z+1, r25	; 0x01
    2440:	80 83       	st	Z, r24
}
    2442:	0f 90       	pop	r0
    2444:	0f 90       	pop	r0
    2446:	0f 90       	pop	r0
    2448:	cf 91       	pop	r28
    244a:	df 91       	pop	r29
    244c:	08 95       	ret

0000244e <TIMER0_voidInit>:

static void(*GlobalPtrFuncCMP)(void)=NULL;
static void(*GlobalPtrFuncOVF)(void)=NULL;

void TIMER0_voidInit(void)
{
    244e:	df 93       	push	r29
    2450:	cf 93       	push	r28
    2452:	cd b7       	in	r28, 0x3d	; 61
    2454:	de b7       	in	r29, 0x3e	; 62
	//  CTC OR OVF
#if TIMER0_MODE == OVF_MODE
	CLR_BIT(TCCR0,TCCR0_WGM00);
	CLR_BIT(TCCR0,TCCR0_WGM01);
#elif TIMER0_MODE == CTC_MODE
	CLR_BIT(TCCR0,TCCR0_WGM00);
    2456:	a3 e5       	ldi	r26, 0x53	; 83
    2458:	b0 e0       	ldi	r27, 0x00	; 0
    245a:	e3 e5       	ldi	r30, 0x53	; 83
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	80 81       	ld	r24, Z
    2460:	8f 7b       	andi	r24, 0xBF	; 191
    2462:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
    2464:	a3 e5       	ldi	r26, 0x53	; 83
    2466:	b0 e0       	ldi	r27, 0x00	; 0
    2468:	e3 e5       	ldi	r30, 0x53	; 83
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	80 81       	ld	r24, Z
    246e:	88 60       	ori	r24, 0x08	; 8
    2470:	8c 93       	st	X, r24
#endif
	// ENABLE INT -> MODE
#if INT_SRC == OVF_MODE
	SET_BIT(TIMSK,TIMSK_TOIE0);
#elif INT_SRC == CTC_MODE
	SET_BIT(TIMSK,TIMSK_OCIE0);
    2472:	a9 e5       	ldi	r26, 0x59	; 89
    2474:	b0 e0       	ldi	r27, 0x00	; 0
    2476:	e9 e5       	ldi	r30, 0x59	; 89
    2478:	f0 e0       	ldi	r31, 0x00	; 0
    247a:	80 81       	ld	r24, Z
    247c:	82 60       	ori	r24, 0x02	; 2
    247e:	8c 93       	st	X, r24
	TCCR0 |= NO_DIV;
#elif PRE_SCALLER == DIV_8
	TCCR0 &= 0b11111000;
	TCCR0 |= DIV_8;
#elif PRE_SCALLER == DIV_64
	TCCR0 &= 0b11111000;
    2480:	a3 e5       	ldi	r26, 0x53	; 83
    2482:	b0 e0       	ldi	r27, 0x00	; 0
    2484:	e3 e5       	ldi	r30, 0x53	; 83
    2486:	f0 e0       	ldi	r31, 0x00	; 0
    2488:	80 81       	ld	r24, Z
    248a:	88 7f       	andi	r24, 0xF8	; 248
    248c:	8c 93       	st	X, r24
	TCCR0 |= DIV_64;
    248e:	a3 e5       	ldi	r26, 0x53	; 83
    2490:	b0 e0       	ldi	r27, 0x00	; 0
    2492:	e3 e5       	ldi	r30, 0x53	; 83
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	80 81       	ld	r24, Z
    2498:	83 60       	ori	r24, 0x03	; 3
    249a:	8c 93       	st	X, r24
	TCCR0 &= 0b11111000;
	TCCR0 |= DIV_1024;
#else
#error("Wrong PreScaler")
#endif
}
    249c:	cf 91       	pop	r28
    249e:	df 91       	pop	r29
    24a0:	08 95       	ret

000024a2 <TIMER0_voidSetPreLoadValue>:
void TIMER0_voidSetPreLoadValue(u8 Copy_u8Ticks)
{
    24a2:	df 93       	push	r29
    24a4:	cf 93       	push	r28
    24a6:	0f 92       	push	r0
    24a8:	cd b7       	in	r28, 0x3d	; 61
    24aa:	de b7       	in	r29, 0x3e	; 62
    24ac:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=Copy_u8Ticks;
    24ae:	e2 e5       	ldi	r30, 0x52	; 82
    24b0:	f0 e0       	ldi	r31, 0x00	; 0
    24b2:	89 81       	ldd	r24, Y+1	; 0x01
    24b4:	80 83       	st	Z, r24
}
    24b6:	0f 90       	pop	r0
    24b8:	cf 91       	pop	r28
    24ba:	df 91       	pop	r29
    24bc:	08 95       	ret

000024be <TIMER0_voidSetCmpValue>:
void TIMER0_voidSetCmpValue(u8 Copy_u8Ticks)
{
    24be:	df 93       	push	r29
    24c0:	cf 93       	push	r28
    24c2:	0f 92       	push	r0
    24c4:	cd b7       	in	r28, 0x3d	; 61
    24c6:	de b7       	in	r29, 0x3e	; 62
    24c8:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Copy_u8Ticks;
    24ca:	ec e5       	ldi	r30, 0x5C	; 92
    24cc:	f0 e0       	ldi	r31, 0x00	; 0
    24ce:	89 81       	ldd	r24, Y+1	; 0x01
    24d0:	80 83       	st	Z, r24
}
    24d2:	0f 90       	pop	r0
    24d4:	cf 91       	pop	r28
    24d6:	df 91       	pop	r29
    24d8:	08 95       	ret

000024da <TIMER0_e_SetCallBackOVF>:
Std_err_e TIMER0_e_SetCallBackOVF(void(*PtrFunc)(void))
{
    24da:	df 93       	push	r29
    24dc:	cf 93       	push	r28
    24de:	00 d0       	rcall	.+0      	; 0x24e0 <TIMER0_e_SetCallBackOVF+0x6>
    24e0:	0f 92       	push	r0
    24e2:	cd b7       	in	r28, 0x3d	; 61
    24e4:	de b7       	in	r29, 0x3e	; 62
    24e6:	9b 83       	std	Y+3, r25	; 0x03
    24e8:	8a 83       	std	Y+2, r24	; 0x02
	Std_err_e Local_e_ErrorStatus=OK;
    24ea:	19 82       	std	Y+1, r1	; 0x01
	if(PtrFunc != NULL)
    24ec:	8a 81       	ldd	r24, Y+2	; 0x02
    24ee:	9b 81       	ldd	r25, Y+3	; 0x03
    24f0:	00 97       	sbiw	r24, 0x00	; 0
    24f2:	39 f0       	breq	.+14     	; 0x2502 <TIMER0_e_SetCallBackOVF+0x28>
	{
		GlobalPtrFuncOVF=PtrFunc;
    24f4:	8a 81       	ldd	r24, Y+2	; 0x02
    24f6:	9b 81       	ldd	r25, Y+3	; 0x03
    24f8:	90 93 77 01 	sts	0x0177, r25
    24fc:	80 93 76 01 	sts	0x0176, r24
    2500:	02 c0       	rjmp	.+4      	; 0x2506 <TIMER0_e_SetCallBackOVF+0x2c>
	}
	else
	{
		Local_e_ErrorStatus=NOK;
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_e_ErrorStatus;
    2506:	89 81       	ldd	r24, Y+1	; 0x01
}
    2508:	0f 90       	pop	r0
    250a:	0f 90       	pop	r0
    250c:	0f 90       	pop	r0
    250e:	cf 91       	pop	r28
    2510:	df 91       	pop	r29
    2512:	08 95       	ret

00002514 <TIMER0_e_SetCallBackCMP>:

Std_err_e TIMER0_e_SetCallBackCMP(void(*PtrFunc)(void))
{
    2514:	df 93       	push	r29
    2516:	cf 93       	push	r28
    2518:	00 d0       	rcall	.+0      	; 0x251a <TIMER0_e_SetCallBackCMP+0x6>
    251a:	0f 92       	push	r0
    251c:	cd b7       	in	r28, 0x3d	; 61
    251e:	de b7       	in	r29, 0x3e	; 62
    2520:	9b 83       	std	Y+3, r25	; 0x03
    2522:	8a 83       	std	Y+2, r24	; 0x02
	Std_err_e Local_e_ErrorStatus=OK;
    2524:	19 82       	std	Y+1, r1	; 0x01
	if(PtrFunc != NULL)
    2526:	8a 81       	ldd	r24, Y+2	; 0x02
    2528:	9b 81       	ldd	r25, Y+3	; 0x03
    252a:	00 97       	sbiw	r24, 0x00	; 0
    252c:	39 f0       	breq	.+14     	; 0x253c <TIMER0_e_SetCallBackCMP+0x28>
	{
		GlobalPtrFuncCMP=PtrFunc;
    252e:	8a 81       	ldd	r24, Y+2	; 0x02
    2530:	9b 81       	ldd	r25, Y+3	; 0x03
    2532:	90 93 75 01 	sts	0x0175, r25
    2536:	80 93 74 01 	sts	0x0174, r24
    253a:	02 c0       	rjmp	.+4      	; 0x2540 <TIMER0_e_SetCallBackCMP+0x2c>
	}
	else
	{
		Local_e_ErrorStatus=NOK;
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_e_ErrorStatus;
    2540:	89 81       	ldd	r24, Y+1	; 0x01
}
    2542:	0f 90       	pop	r0
    2544:	0f 90       	pop	r0
    2546:	0f 90       	pop	r0
    2548:	cf 91       	pop	r28
    254a:	df 91       	pop	r29
    254c:	08 95       	ret

0000254e <TIMER0_voidCTCEnable>:
void TIMER0_voidCTCEnable(void)
{
    254e:	df 93       	push	r29
    2550:	cf 93       	push	r28
    2552:	cd b7       	in	r28, 0x3d	; 61
    2554:	de b7       	in	r29, 0x3e	; 62
  SET_BIT(TIMSK,TIMSK_OCIE0);
    2556:	a9 e5       	ldi	r26, 0x59	; 89
    2558:	b0 e0       	ldi	r27, 0x00	; 0
    255a:	e9 e5       	ldi	r30, 0x59	; 89
    255c:	f0 e0       	ldi	r31, 0x00	; 0
    255e:	80 81       	ld	r24, Z
    2560:	82 60       	ori	r24, 0x02	; 2
    2562:	8c 93       	st	X, r24
}
    2564:	cf 91       	pop	r28
    2566:	df 91       	pop	r29
    2568:	08 95       	ret

0000256a <TIMER0_voidCTCDisable>:
void TIMER0_voidCTCDisable(void)
{
    256a:	df 93       	push	r29
    256c:	cf 93       	push	r28
    256e:	cd b7       	in	r28, 0x3d	; 61
    2570:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_OCIE0);
    2572:	a9 e5       	ldi	r26, 0x59	; 89
    2574:	b0 e0       	ldi	r27, 0x00	; 0
    2576:	e9 e5       	ldi	r30, 0x59	; 89
    2578:	f0 e0       	ldi	r31, 0x00	; 0
    257a:	80 81       	ld	r24, Z
    257c:	8d 7f       	andi	r24, 0xFD	; 253
    257e:	8c 93       	st	X, r24
}
    2580:	cf 91       	pop	r28
    2582:	df 91       	pop	r29
    2584:	08 95       	ret

00002586 <__vector_11>:
// ISR OVF
void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
    2586:	1f 92       	push	r1
    2588:	0f 92       	push	r0
    258a:	0f b6       	in	r0, 0x3f	; 63
    258c:	0f 92       	push	r0
    258e:	11 24       	eor	r1, r1
    2590:	2f 93       	push	r18
    2592:	3f 93       	push	r19
    2594:	4f 93       	push	r20
    2596:	5f 93       	push	r21
    2598:	6f 93       	push	r22
    259a:	7f 93       	push	r23
    259c:	8f 93       	push	r24
    259e:	9f 93       	push	r25
    25a0:	af 93       	push	r26
    25a2:	bf 93       	push	r27
    25a4:	ef 93       	push	r30
    25a6:	ff 93       	push	r31
    25a8:	df 93       	push	r29
    25aa:	cf 93       	push	r28
    25ac:	cd b7       	in	r28, 0x3d	; 61
    25ae:	de b7       	in	r29, 0x3e	; 62
	// INVOKE FUNCTION
	GlobalPtrFuncOVF();
    25b0:	e0 91 76 01 	lds	r30, 0x0176
    25b4:	f0 91 77 01 	lds	r31, 0x0177
    25b8:	09 95       	icall
}
    25ba:	cf 91       	pop	r28
    25bc:	df 91       	pop	r29
    25be:	ff 91       	pop	r31
    25c0:	ef 91       	pop	r30
    25c2:	bf 91       	pop	r27
    25c4:	af 91       	pop	r26
    25c6:	9f 91       	pop	r25
    25c8:	8f 91       	pop	r24
    25ca:	7f 91       	pop	r23
    25cc:	6f 91       	pop	r22
    25ce:	5f 91       	pop	r21
    25d0:	4f 91       	pop	r20
    25d2:	3f 91       	pop	r19
    25d4:	2f 91       	pop	r18
    25d6:	0f 90       	pop	r0
    25d8:	0f be       	out	0x3f, r0	; 63
    25da:	0f 90       	pop	r0
    25dc:	1f 90       	pop	r1
    25de:	18 95       	reti

000025e0 <__vector_10>:
//ISR CTC
void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    25e0:	1f 92       	push	r1
    25e2:	0f 92       	push	r0
    25e4:	0f b6       	in	r0, 0x3f	; 63
    25e6:	0f 92       	push	r0
    25e8:	11 24       	eor	r1, r1
    25ea:	2f 93       	push	r18
    25ec:	3f 93       	push	r19
    25ee:	4f 93       	push	r20
    25f0:	5f 93       	push	r21
    25f2:	6f 93       	push	r22
    25f4:	7f 93       	push	r23
    25f6:	8f 93       	push	r24
    25f8:	9f 93       	push	r25
    25fa:	af 93       	push	r26
    25fc:	bf 93       	push	r27
    25fe:	ef 93       	push	r30
    2600:	ff 93       	push	r31
    2602:	df 93       	push	r29
    2604:	cf 93       	push	r28
    2606:	cd b7       	in	r28, 0x3d	; 61
    2608:	de b7       	in	r29, 0x3e	; 62
	GlobalPtrFuncCMP();
    260a:	e0 91 74 01 	lds	r30, 0x0174
    260e:	f0 91 75 01 	lds	r31, 0x0175
    2612:	09 95       	icall
}
    2614:	cf 91       	pop	r28
    2616:	df 91       	pop	r29
    2618:	ff 91       	pop	r31
    261a:	ef 91       	pop	r30
    261c:	bf 91       	pop	r27
    261e:	af 91       	pop	r26
    2620:	9f 91       	pop	r25
    2622:	8f 91       	pop	r24
    2624:	7f 91       	pop	r23
    2626:	6f 91       	pop	r22
    2628:	5f 91       	pop	r21
    262a:	4f 91       	pop	r20
    262c:	3f 91       	pop	r19
    262e:	2f 91       	pop	r18
    2630:	0f 90       	pop	r0
    2632:	0f be       	out	0x3f, r0	; 63
    2634:	0f 90       	pop	r0
    2636:	1f 90       	pop	r1
    2638:	18 95       	reti

0000263a <UART_voidInit>:
#include "UART_interface.h"
#include "UART_config.h"
#include "UART_private.h"

void UART_voidInit()
{
    263a:	df 93       	push	r29
    263c:	cf 93       	push	r28
    263e:	0f 92       	push	r0
    2640:	cd b7       	in	r28, 0x3d	; 61
    2642:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8CtrlCvalue=0;
    2644:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(Local_u8CtrlCvalue,7);
    2646:	89 81       	ldd	r24, Y+1	; 0x01
    2648:	80 68       	ori	r24, 0x80	; 128
    264a:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8CtrlCvalue,1);
    264c:	89 81       	ldd	r24, Y+1	; 0x01
    264e:	82 60       	ori	r24, 0x02	; 2
    2650:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8CtrlCvalue,2);
    2652:	89 81       	ldd	r24, Y+1	; 0x01
    2654:	84 60       	ori	r24, 0x04	; 4
    2656:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8CtrlCvalue,3);
    2658:	89 81       	ldd	r24, Y+1	; 0x01
    265a:	87 7f       	andi	r24, 0xF7	; 247
    265c:	89 83       	std	Y+1, r24	; 0x01
	UCSRC=Local_u8CtrlCvalue;
    265e:	e0 e4       	ldi	r30, 0x40	; 64
    2660:	f0 e0       	ldi	r31, 0x00	; 0
    2662:	89 81       	ldd	r24, Y+1	; 0x01
    2664:	80 83       	st	Z, r24
	//NO INT
	//NO PARITY
	//UART
	//9600 BaudRate
	UBRRL=51;
    2666:	e9 e2       	ldi	r30, 0x29	; 41
    2668:	f0 e0       	ldi	r31, 0x00	; 0
    266a:	83 e3       	ldi	r24, 0x33	; 51
    266c:	80 83       	st	Z, r24
	//Ch size -> 8 bits
	CLR_BIT(UCSRB,2);
    266e:	aa e2       	ldi	r26, 0x2A	; 42
    2670:	b0 e0       	ldi	r27, 0x00	; 0
    2672:	ea e2       	ldi	r30, 0x2A	; 42
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	80 81       	ld	r24, Z
    2678:	8b 7f       	andi	r24, 0xFB	; 251
    267a:	8c 93       	st	X, r24
	//full duplex
	SET_BIT(UCSRB,3);
    267c:	aa e2       	ldi	r26, 0x2A	; 42
    267e:	b0 e0       	ldi	r27, 0x00	; 0
    2680:	ea e2       	ldi	r30, 0x2A	; 42
    2682:	f0 e0       	ldi	r31, 0x00	; 0
    2684:	80 81       	ld	r24, Z
    2686:	88 60       	ori	r24, 0x08	; 8
    2688:	8c 93       	st	X, r24
	SET_BIT(UCSRB,4);
    268a:	aa e2       	ldi	r26, 0x2A	; 42
    268c:	b0 e0       	ldi	r27, 0x00	; 0
    268e:	ea e2       	ldi	r30, 0x2A	; 42
    2690:	f0 e0       	ldi	r31, 0x00	; 0
    2692:	80 81       	ld	r24, Z
    2694:	80 61       	ori	r24, 0x10	; 16
    2696:	8c 93       	st	X, r24
}
    2698:	0f 90       	pop	r0
    269a:	cf 91       	pop	r28
    269c:	df 91       	pop	r29
    269e:	08 95       	ret

000026a0 <UART_voidSendData>:
void UART_voidSendData(u8 Copy_u8Data)
{
    26a0:	df 93       	push	r29
    26a2:	cf 93       	push	r28
    26a4:	0f 92       	push	r0
    26a6:	cd b7       	in	r28, 0x3d	; 61
    26a8:	de b7       	in	r29, 0x3e	; 62
    26aa:	89 83       	std	Y+1, r24	; 0x01
	//Polling UDRE -> Send Data
	while(!GET_BIT(UCSRA,5));
    26ac:	eb e2       	ldi	r30, 0x2B	; 43
    26ae:	f0 e0       	ldi	r31, 0x00	; 0
    26b0:	80 81       	ld	r24, Z
    26b2:	82 95       	swap	r24
    26b4:	86 95       	lsr	r24
    26b6:	87 70       	andi	r24, 0x07	; 7
    26b8:	88 2f       	mov	r24, r24
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	81 70       	andi	r24, 0x01	; 1
    26be:	90 70       	andi	r25, 0x00	; 0
    26c0:	00 97       	sbiw	r24, 0x00	; 0
    26c2:	a1 f3       	breq	.-24     	; 0x26ac <UART_voidSendData+0xc>
	UDR=Copy_u8Data;
    26c4:	ec e2       	ldi	r30, 0x2C	; 44
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	89 81       	ldd	r24, Y+1	; 0x01
    26ca:	80 83       	st	Z, r24
}
    26cc:	0f 90       	pop	r0
    26ce:	cf 91       	pop	r28
    26d0:	df 91       	pop	r29
    26d2:	08 95       	ret

000026d4 <UART_u8ReceiveData>:
u8 UART_u8ReceiveData()
{
    26d4:	df 93       	push	r29
    26d6:	cf 93       	push	r28
    26d8:	cd b7       	in	r28, 0x3d	; 61
    26da:	de b7       	in	r29, 0x3e	; 62
	while(!GET_BIT(UCSRA,7));
    26dc:	eb e2       	ldi	r30, 0x2B	; 43
    26de:	f0 e0       	ldi	r31, 0x00	; 0
    26e0:	80 81       	ld	r24, Z
    26e2:	88 23       	and	r24, r24
    26e4:	dc f7       	brge	.-10     	; 0x26dc <UART_u8ReceiveData+0x8>
	return UDR;
    26e6:	ec e2       	ldi	r30, 0x2C	; 44
    26e8:	f0 e0       	ldi	r31, 0x00	; 0
    26ea:	80 81       	ld	r24, Z
}
    26ec:	cf 91       	pop	r28
    26ee:	df 91       	pop	r29
    26f0:	08 95       	ret

000026f2 <main>:




int main(void)
{
    26f2:	df 93       	push	r29
    26f4:	cf 93       	push	r28
    26f6:	cd b7       	in	r28, 0x3d	; 61
    26f8:	de b7       	in	r29, 0x3e	; 62
    26fa:	64 97       	sbiw	r28, 0x14	; 20
    26fc:	0f b6       	in	r0, 0x3f	; 63
    26fe:	f8 94       	cli
    2700:	de bf       	out	0x3e, r29	; 62
    2702:	0f be       	out	0x3f, r0	; 63
    2704:	cd bf       	out	0x3d, r28	; 61
	float x=0;
    2706:	80 e0       	ldi	r24, 0x00	; 0
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	a0 e0       	ldi	r26, 0x00	; 0
    270c:	b0 e0       	ldi	r27, 0x00	; 0
    270e:	89 8b       	std	Y+17, r24	; 0x11
    2710:	9a 8b       	std	Y+18, r25	; 0x12
    2712:	ab 8b       	std	Y+19, r26	; 0x13
    2714:	bc 8b       	std	Y+20, r27	; 0x14
	DIO_voidSetPortDirection(PORT_u8D,PORT_OUT);
    2716:	84 e0       	ldi	r24, 0x04	; 4
    2718:	6f ef       	ldi	r22, 0xFF	; 255
    271a:	0e 94 c9 0b 	call	0x1792	; 0x1792 <DIO_voidSetPortDirection>
Timer1_Init();
    271e:	0e 94 cf 11 	call	0x239e	; 0x239e <Timer1_Init>
int i =0;
    2722:	18 8a       	std	Y+16, r1	; 0x10
    2724:	1f 86       	std	Y+15, r1	; 0x0f
	while(1)
	{
// US_voidGetDistance(PORT_u8A,PIN_0,x);
// i=(int)x;
		Set_Servo_Angle(i);
    2726:	8f 85       	ldd	r24, Y+15	; 0x0f
    2728:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <Set_Servo_Angle>
		i++;
    272c:	8f 85       	ldd	r24, Y+15	; 0x0f
    272e:	98 89       	ldd	r25, Y+16	; 0x10
    2730:	01 96       	adiw	r24, 0x01	; 1
    2732:	98 8b       	std	Y+16, r25	; 0x10
    2734:	8f 87       	std	Y+15, r24	; 0x0f
    2736:	80 e0       	ldi	r24, 0x00	; 0
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	aa e7       	ldi	r26, 0x7A	; 122
    273c:	b4 e4       	ldi	r27, 0x44	; 68
    273e:	8b 87       	std	Y+11, r24	; 0x0b
    2740:	9c 87       	std	Y+12, r25	; 0x0c
    2742:	ad 87       	std	Y+13, r26	; 0x0d
    2744:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2746:	6b 85       	ldd	r22, Y+11	; 0x0b
    2748:	7c 85       	ldd	r23, Y+12	; 0x0c
    274a:	8d 85       	ldd	r24, Y+13	; 0x0d
    274c:	9e 85       	ldd	r25, Y+14	; 0x0e
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	4a ef       	ldi	r20, 0xFA	; 250
    2754:	54 e4       	ldi	r21, 0x44	; 68
    2756:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    275a:	dc 01       	movw	r26, r24
    275c:	cb 01       	movw	r24, r22
    275e:	8f 83       	std	Y+7, r24	; 0x07
    2760:	98 87       	std	Y+8, r25	; 0x08
    2762:	a9 87       	std	Y+9, r26	; 0x09
    2764:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2766:	6f 81       	ldd	r22, Y+7	; 0x07
    2768:	78 85       	ldd	r23, Y+8	; 0x08
    276a:	89 85       	ldd	r24, Y+9	; 0x09
    276c:	9a 85       	ldd	r25, Y+10	; 0x0a
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	40 e8       	ldi	r20, 0x80	; 128
    2774:	5f e3       	ldi	r21, 0x3F	; 63
    2776:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    277a:	88 23       	and	r24, r24
    277c:	2c f4       	brge	.+10     	; 0x2788 <main+0x96>
		__ticks = 1;
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	9e 83       	std	Y+6, r25	; 0x06
    2784:	8d 83       	std	Y+5, r24	; 0x05
    2786:	3f c0       	rjmp	.+126    	; 0x2806 <main+0x114>
	else if (__tmp > 65535)
    2788:	6f 81       	ldd	r22, Y+7	; 0x07
    278a:	78 85       	ldd	r23, Y+8	; 0x08
    278c:	89 85       	ldd	r24, Y+9	; 0x09
    278e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	3f ef       	ldi	r19, 0xFF	; 255
    2794:	4f e7       	ldi	r20, 0x7F	; 127
    2796:	57 e4       	ldi	r21, 0x47	; 71
    2798:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    279c:	18 16       	cp	r1, r24
    279e:	4c f5       	brge	.+82     	; 0x27f2 <main+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    27a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    27a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    27a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    27a8:	20 e0       	ldi	r18, 0x00	; 0
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	40 e2       	ldi	r20, 0x20	; 32
    27ae:	51 e4       	ldi	r21, 0x41	; 65
    27b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b4:	dc 01       	movw	r26, r24
    27b6:	cb 01       	movw	r24, r22
    27b8:	bc 01       	movw	r22, r24
    27ba:	cd 01       	movw	r24, r26
    27bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	9e 83       	std	Y+6, r25	; 0x06
    27c6:	8d 83       	std	Y+5, r24	; 0x05
    27c8:	0f c0       	rjmp	.+30     	; 0x27e8 <main+0xf6>
    27ca:	88 ec       	ldi	r24, 0xC8	; 200
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	9c 83       	std	Y+4, r25	; 0x04
    27d0:	8b 83       	std	Y+3, r24	; 0x03
    27d2:	8b 81       	ldd	r24, Y+3	; 0x03
    27d4:	9c 81       	ldd	r25, Y+4	; 0x04
    27d6:	01 97       	sbiw	r24, 0x01	; 1
    27d8:	f1 f7       	brne	.-4      	; 0x27d6 <main+0xe4>
    27da:	9c 83       	std	Y+4, r25	; 0x04
    27dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27de:	8d 81       	ldd	r24, Y+5	; 0x05
    27e0:	9e 81       	ldd	r25, Y+6	; 0x06
    27e2:	01 97       	sbiw	r24, 0x01	; 1
    27e4:	9e 83       	std	Y+6, r25	; 0x06
    27e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27e8:	8d 81       	ldd	r24, Y+5	; 0x05
    27ea:	9e 81       	ldd	r25, Y+6	; 0x06
    27ec:	00 97       	sbiw	r24, 0x00	; 0
    27ee:	69 f7       	brne	.-38     	; 0x27ca <main+0xd8>
    27f0:	9a cf       	rjmp	.-204    	; 0x2726 <main+0x34>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27f2:	6f 81       	ldd	r22, Y+7	; 0x07
    27f4:	78 85       	ldd	r23, Y+8	; 0x08
    27f6:	89 85       	ldd	r24, Y+9	; 0x09
    27f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	9e 83       	std	Y+6, r25	; 0x06
    2804:	8d 83       	std	Y+5, r24	; 0x05
    2806:	8d 81       	ldd	r24, Y+5	; 0x05
    2808:	9e 81       	ldd	r25, Y+6	; 0x06
    280a:	9a 83       	std	Y+2, r25	; 0x02
    280c:	89 83       	std	Y+1, r24	; 0x01
    280e:	89 81       	ldd	r24, Y+1	; 0x01
    2810:	9a 81       	ldd	r25, Y+2	; 0x02
    2812:	01 97       	sbiw	r24, 0x01	; 1
    2814:	f1 f7       	brne	.-4      	; 0x2812 <main+0x120>
    2816:	9a 83       	std	Y+2, r25	; 0x02
    2818:	89 83       	std	Y+1, r24	; 0x01
    281a:	85 cf       	rjmp	.-246    	; 0x2726 <main+0x34>

0000281c <__mulsi3>:
    281c:	62 9f       	mul	r22, r18
    281e:	d0 01       	movw	r26, r0
    2820:	73 9f       	mul	r23, r19
    2822:	f0 01       	movw	r30, r0
    2824:	82 9f       	mul	r24, r18
    2826:	e0 0d       	add	r30, r0
    2828:	f1 1d       	adc	r31, r1
    282a:	64 9f       	mul	r22, r20
    282c:	e0 0d       	add	r30, r0
    282e:	f1 1d       	adc	r31, r1
    2830:	92 9f       	mul	r25, r18
    2832:	f0 0d       	add	r31, r0
    2834:	83 9f       	mul	r24, r19
    2836:	f0 0d       	add	r31, r0
    2838:	74 9f       	mul	r23, r20
    283a:	f0 0d       	add	r31, r0
    283c:	65 9f       	mul	r22, r21
    283e:	f0 0d       	add	r31, r0
    2840:	99 27       	eor	r25, r25
    2842:	72 9f       	mul	r23, r18
    2844:	b0 0d       	add	r27, r0
    2846:	e1 1d       	adc	r30, r1
    2848:	f9 1f       	adc	r31, r25
    284a:	63 9f       	mul	r22, r19
    284c:	b0 0d       	add	r27, r0
    284e:	e1 1d       	adc	r30, r1
    2850:	f9 1f       	adc	r31, r25
    2852:	bd 01       	movw	r22, r26
    2854:	cf 01       	movw	r24, r30
    2856:	11 24       	eor	r1, r1
    2858:	08 95       	ret

0000285a <__udivmodsi4>:
    285a:	a1 e2       	ldi	r26, 0x21	; 33
    285c:	1a 2e       	mov	r1, r26
    285e:	aa 1b       	sub	r26, r26
    2860:	bb 1b       	sub	r27, r27
    2862:	fd 01       	movw	r30, r26
    2864:	0d c0       	rjmp	.+26     	; 0x2880 <__udivmodsi4_ep>

00002866 <__udivmodsi4_loop>:
    2866:	aa 1f       	adc	r26, r26
    2868:	bb 1f       	adc	r27, r27
    286a:	ee 1f       	adc	r30, r30
    286c:	ff 1f       	adc	r31, r31
    286e:	a2 17       	cp	r26, r18
    2870:	b3 07       	cpc	r27, r19
    2872:	e4 07       	cpc	r30, r20
    2874:	f5 07       	cpc	r31, r21
    2876:	20 f0       	brcs	.+8      	; 0x2880 <__udivmodsi4_ep>
    2878:	a2 1b       	sub	r26, r18
    287a:	b3 0b       	sbc	r27, r19
    287c:	e4 0b       	sbc	r30, r20
    287e:	f5 0b       	sbc	r31, r21

00002880 <__udivmodsi4_ep>:
    2880:	66 1f       	adc	r22, r22
    2882:	77 1f       	adc	r23, r23
    2884:	88 1f       	adc	r24, r24
    2886:	99 1f       	adc	r25, r25
    2888:	1a 94       	dec	r1
    288a:	69 f7       	brne	.-38     	; 0x2866 <__udivmodsi4_loop>
    288c:	60 95       	com	r22
    288e:	70 95       	com	r23
    2890:	80 95       	com	r24
    2892:	90 95       	com	r25
    2894:	9b 01       	movw	r18, r22
    2896:	ac 01       	movw	r20, r24
    2898:	bd 01       	movw	r22, r26
    289a:	cf 01       	movw	r24, r30
    289c:	08 95       	ret

0000289e <__prologue_saves__>:
    289e:	2f 92       	push	r2
    28a0:	3f 92       	push	r3
    28a2:	4f 92       	push	r4
    28a4:	5f 92       	push	r5
    28a6:	6f 92       	push	r6
    28a8:	7f 92       	push	r7
    28aa:	8f 92       	push	r8
    28ac:	9f 92       	push	r9
    28ae:	af 92       	push	r10
    28b0:	bf 92       	push	r11
    28b2:	cf 92       	push	r12
    28b4:	df 92       	push	r13
    28b6:	ef 92       	push	r14
    28b8:	ff 92       	push	r15
    28ba:	0f 93       	push	r16
    28bc:	1f 93       	push	r17
    28be:	cf 93       	push	r28
    28c0:	df 93       	push	r29
    28c2:	cd b7       	in	r28, 0x3d	; 61
    28c4:	de b7       	in	r29, 0x3e	; 62
    28c6:	ca 1b       	sub	r28, r26
    28c8:	db 0b       	sbc	r29, r27
    28ca:	0f b6       	in	r0, 0x3f	; 63
    28cc:	f8 94       	cli
    28ce:	de bf       	out	0x3e, r29	; 62
    28d0:	0f be       	out	0x3f, r0	; 63
    28d2:	cd bf       	out	0x3d, r28	; 61
    28d4:	09 94       	ijmp

000028d6 <__epilogue_restores__>:
    28d6:	2a 88       	ldd	r2, Y+18	; 0x12
    28d8:	39 88       	ldd	r3, Y+17	; 0x11
    28da:	48 88       	ldd	r4, Y+16	; 0x10
    28dc:	5f 84       	ldd	r5, Y+15	; 0x0f
    28de:	6e 84       	ldd	r6, Y+14	; 0x0e
    28e0:	7d 84       	ldd	r7, Y+13	; 0x0d
    28e2:	8c 84       	ldd	r8, Y+12	; 0x0c
    28e4:	9b 84       	ldd	r9, Y+11	; 0x0b
    28e6:	aa 84       	ldd	r10, Y+10	; 0x0a
    28e8:	b9 84       	ldd	r11, Y+9	; 0x09
    28ea:	c8 84       	ldd	r12, Y+8	; 0x08
    28ec:	df 80       	ldd	r13, Y+7	; 0x07
    28ee:	ee 80       	ldd	r14, Y+6	; 0x06
    28f0:	fd 80       	ldd	r15, Y+5	; 0x05
    28f2:	0c 81       	ldd	r16, Y+4	; 0x04
    28f4:	1b 81       	ldd	r17, Y+3	; 0x03
    28f6:	aa 81       	ldd	r26, Y+2	; 0x02
    28f8:	b9 81       	ldd	r27, Y+1	; 0x01
    28fa:	ce 0f       	add	r28, r30
    28fc:	d1 1d       	adc	r29, r1
    28fe:	0f b6       	in	r0, 0x3f	; 63
    2900:	f8 94       	cli
    2902:	de bf       	out	0x3e, r29	; 62
    2904:	0f be       	out	0x3f, r0	; 63
    2906:	cd bf       	out	0x3d, r28	; 61
    2908:	ed 01       	movw	r28, r26
    290a:	08 95       	ret

0000290c <_exit>:
    290c:	f8 94       	cli

0000290e <__stop_program>:
    290e:	ff cf       	rjmp	.-2      	; 0x290e <__stop_program>
